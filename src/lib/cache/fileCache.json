{
  "_app": {
    "name": "_app",
    "content": "import '@/app/globals.css';\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { AppProps } from 'next/app';\n\nexport default function App({ Component, pageProps }: AppProps) {\n    return (\n        \n            \n            \n        \n    );\n} ",
    "parentName": null,
    "path": "_app"
  },
  "_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n    \"introduction\": \"Introduction\",\n    \"get-started\": \"Getting Started\",\n    \"lomi-cli\": \"lomi. with CLI\",\n    \"git-integration\": \"Contributing\",\n    \"api-reference\": \"API Reference\",\n    \"advanced-guides\": \"Advanced Guides\",\n    \"license-management\": \"License\"\n};\n\nexport default meta;",
    "parentName": null,
    "path": "_meta"
  },
  "advanced-guides/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n  \"handling-webhooks\": \"Handling Webhooks\",\n  \"idempotency-keys\": \"Idempotency Keys\",\n  \"error-handling\": \"Error Handling\",\n  \"security-best-practices\": \"Security Best Practices\",\n  \"testing\": \"Testing Guide\",\n  \"ci-cd\": \"CI/CD Integration\"\n};\n\nexport default meta;",
    "parentName": "advanced-guides",
    "path": "advanced-guides/_meta"
  },
  "advanced-guides/ci-cd": {
    "name": "ci-cd",
    "content": "CI/CD Integration\n\n\nThis guide covers best practices for integrating lomi with your CI/CD pipeline, ensuring reliable deployments and automated testing.\n\nEnvironment Setup\n\n\n1. Environment Variables\n\n\n```yaml\n.env.ci\n\nLOMI_API_KEY=test_key_xxx\nLOMI_WEBHOOK_SECRET=whsec_xxx\nLOMI_ENV=test\n```\n\n2. Secrets Management\n\n\n```typescript\n// config/secrets.ts\nexport function loadSecrets() {\n  const requiredSecrets = [\n    'LOMI_API_KEY',\n    'LOMI_WEBHOOK_SECRET'\n  ];\n  \n  for (const secret of requiredSecrets) {\n    if (!process.env[secret]) {\n      throw new Error(`Missing required secret: ${secret}`);\n    }\n  }\n}\n```\n\nGitHub Actions\n\n\n1. Test Workflow\n\n\n```yaml\n.github/workflows/test.yml\n\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Run tests\n        run: npm test\n        env:\n          LOMI_API_KEY: ${{ secrets.LOMI_TEST_API_KEY }}\n          LOMI_WEBHOOK_SECRET: ${{ secrets.TEST_WEBHOOK_SECRET }}\n          LOMI_ENV: test\n```\n\n2. Deploy Workflow\n\n\n```yaml\n.github/workflows/deploy.yml\n\nname: Deploy\n\non:\n  push:\n    branches: [ main ]\n    \njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: eu-west-1\n          \n      - name: Deploy to production\n        run: |\n          npm ci\n          npm run build\n          npm run deploy\n        env:\n          LOMI_API_KEY: ${{ secrets.LOMI_PROD_API_KEY }}\n          LOMI_WEBHOOK_SECRET: ${{ secrets.PROD_WEBHOOK_SECRET }}\n          LOMI_ENV: production\n```\n\nAutomated Testing\n\n\n1. Pre-deployment Tests\n\n\n```typescript\n// scripts/pre-deploy.ts\nimport { LomiSDK } from '@lomi/sdk';\n\nasync function runPreDeploymentChecks() {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_API_KEY\n  });\n  \n  // 1. Verify API connectivity\n  await lomi.merchants.list();\n  \n  // 2. Test webhook endpoint\n  const webhookTest = await lomi.webhooks.test({\n    url: process.env.WEBHOOK_URL\n  });\n  \n  if (!webhookTest.success) {\n    throw new Error('Webhook test failed');\n  }\n  \n  // 3. Verify provider availability\n  const providers = await lomi.providers.list();\n  if (providers.length === 0) {\n    throw new Error('No payment providers available');\n  }\n}\n```\n\n2. Integration Tests\n\n\n```typescript\n// tests/integration/payment.test.ts\ndescribe('Payment Integration', () => {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_API_KEY\n  });\n  \n  beforeAll(async () => {\n    // Setup test environment\n    await setupTestEnvironment();\n  });\n  \n  it('should process payment end-to-end', async () => {\n    // Create session\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: process.env.TEST_MERCHANT_ID,\n      amount: 1000,\n      currency: 'XOF',\n      provider_codes: ['FREE_MONEY']\n    });\n    \n    // Simulate payment\n    await lomi.test.simulatePayment(session.id);\n    \n    // Verify success\n    const updated = await lomi.checkoutSessions.retrieve(\n      session.id\n    );\n    expect(updated.status).toBe('succeeded');\n  });\n});\n```\n\nDeployment Strategies\n\n\n1. Blue-Green Deployment\n\n\n```typescript\n// scripts/deploy.ts\nasync function blueGreenDeploy() {\n  // 1. Deploy to staging\n  await deploy('staging');\n  \n  // 2. Run health checks\n  const health = await checkHealth('staging');\n  if (!health.ok) {\n    await rollback('staging');\n    throw new Error('Health check failed');\n  }\n  \n  // 3. Switch traffic\n  await switchTraffic('staging', 'production');\n  \n  // 4. Monitor for errors\n  await monitorDeployment();\n}\n```\n\n2. Canary Deployment\n\n\n```typescript\n// scripts/canary.ts\nasync function canaryDeploy() {\n  // 1. Deploy to canary\n  await deploy('canary', { capacity: '10%' });\n  \n  // 2. Monitor metrics\n  const metrics = await monitorCanary({\n    duration: '1h',\n    errorThreshold: 0.1\n  });\n  \n  if (metrics.errorRate > 0.1) {\n    await rollback('canary');\n    throw new Error('Canary failed');\n  }\n  \n  // 3. Scale up deployment\n  await scaleDeployment('canary', '100%');\n}\n```\n\nMonitoring\n\n\n1. Health Checks\n\n\n```typescript\n// monitoring/health.ts\nexport async function checkServiceHealth() {\n  try {\n    // 1. API health\n    await lomi.merchants.list();\n    \n    // 2. Webhook health\n    const webhooks = await lomi.webhooks.list();\n    const activeWebhooks = webhooks.filter(\n      w => w.status === 'active'\n    );\n    \n    if (activeWebhooks.length === 0) {\n      throw new Error('No active webhooks');\n    }\n    \n    // 3. Database health\n    await db.raw('SELECT 1');\n    \n    return { status: 'healthy' };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      error: error.message\n    };\n  }\n}\n```\n\n2. Metrics Collection\n\n\n```typescript\n// monitoring/metrics.ts\nexport function collectMetrics() {\n  return {\n    // Payment metrics\n    payments: {\n      success: getSuccessRate(),\n      volume: getPaymentVolume(),\n      latency: getAverageLatency()\n    },\n    \n    // Webhook metrics\n    webhooks: {\n      delivery: getDeliveryRate(),\n      latency: getWebhookLatency()\n    },\n    \n    // System metrics\n    system: {\n      memory: getMemoryUsage(),\n      cpu: getCPUUsage(),\n      errors: getErrorRate()\n    }\n  };\n}\n```\n\nRollback Procedures\n\n\n1. Automated Rollback\n\n\n```typescript\n// scripts/rollback.ts\nasync function automaticRollback(deployment: string) {\n  try {\n    // 1. Stop traffic to new version\n    await stopTraffic(deployment);\n    \n    // 2. Restore previous version\n    await restorePreviousVersion();\n    \n    // 3. Verify rollback\n    const health = await checkHealth('production');\n    if (!health.ok) {\n      throw new Error('Rollback verification failed');\n    }\n    \n    // 4. Notify team\n    await notifyTeam('Rollback completed');\n  } catch (error) {\n    await notifyTeam('Manual intervention required');\n    throw error;\n  }\n}\n```\n\nNext Steps\n\n\n- [Testing Guide](./testing)\n- [Security Best Practices](./security-best-practices)\n- [API Reference](/api-reference) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/ci-cd"
  },
  "advanced-guides/error-handling": {
    "name": "error-handling",
    "content": "Error Handling\n\n\nWhen integrating with lomi., it's essential to handle errors gracefully to provide a smooth payment experience for your customers. lomi. uses conventional HTTP response codes and returns meaningful error codes and messages that you can use to troubleshoot issues and inform your customers about the status of their transactions.\n\nError Response Format\n\n\nAll errors follow this format:\n\n```json\n{\n  \"error\": {\n    \"message\": \"Error description\",\n    \"code\": 400,\n    \"details\": [\n      {\n        \"path\": \"amount\",\n        \"message\": \"Amount must be a positive number\"\n      }\n    ]\n  }\n}\n```\n\nHTTP Status Codes\n\n\n- `400` Bad Request - Invalid parameters or validation failed\n- `401` Unauthorized - Missing or invalid API key\n- `403` Forbidden - Valid API key but insufficient permissions\n- `404` Not Found - Resource doesn't exist\n- `429` Too Many Requests - Rate limit exceeded\n- `500` Internal Server Error - Something went wrong on our end\n\nValidation Errors\n\n\nWhen request validation fails:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    amount: -100,  // Invalid: must be positive\n    currency: 'INVALID',  // Invalid: must be 3 letters\n    provider_codes: []  // Invalid: must not be empty\n  });\n} catch (error) {\n  if (error.validationErrors) {\n    // Validation failed with specific field errors\n    error.validationErrors.errors.forEach(err => {\n      console.error(`${err.path}: ${err.message}`);\n    });\n  }\n}\n```\n\nAuthentication Errors\n\n\nWhen API key validation fails:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  });\n} catch (error) {\n  if (error.statusCode === 401) {\n    // Check common authentication issues\n    if (!process.env.LOMI_API_KEY) {\n      console.error('API key not configured');\n    } else if (process.env.LOMI_API_KEY.startsWith('test_')) {\n      console.error('Using test key in production');\n    } else {\n      console.error('Invalid API key');\n    }\n  }\n}\n```\n\nRate Limit Errors\n\n\nWhen you exceed the rate limit (100 requests per 15 minutes):\n\n```typescript\ntry {\n  const response = await fetch(' {\n    method: 'POST',\n    headers: {\n      'x-api-key': process.env.LOMI_API_KEY\n    }\n  });\n\n  // Check rate limit headers\n  console.log({\n    remaining: response.headers.get('X-RateLimit-Remaining'),\n    reset: response.headers.get('X-RateLimit-Reset')\n  });\n} catch (error) {\n  if (error.statusCode === 429) {\n    // Implement exponential backoff\n    const retryAfter = parseInt(error.headers['retry-after'] || '60');\n    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n    // Retry request\n  }\n}\n```\n\nProvider Errors\n\n\nWhen payment provider operations fail:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  });\n} catch (error) {\n  switch (error.code) {\n    case 'provider_not_available':\n      console.error('Payment provider is temporarily unavailable');\n      break;\n    case 'provider_declined':\n      console.error('Payment declined by provider:', error.message);\n      break;\n    case 'invalid_phone':\n      console.error('Invalid phone number format');\n      break;\n  }\n}\n```\n\nBest Practices\n\n\n1. **Graceful Degradation**\n   - Always provide fallback options\n   - Show user-friendly error messages\n   - Log detailed errors for debugging\n\n2. **Retry Strategy**\n   ```typescript\n   async function withRetry(fn, maxRetries = 3) {\n     for (let i = 0; i = 500) {\n           // Wait longer between each retry\n           await new Promise(resolve => \n             setTimeout(resolve, Math.pow(2, i) * 1000)\n           );\n           continue;\n         }\n         throw error;\n       }\n     }\n   }\n   ```\n\n3. **Error Monitoring**\n   - Log all errors with context\n   - Track error rates and patterns\n   - Set up alerts for critical errors\n\nNext Steps\n\n\n- [Idempotency Keys](./idempotency-keys)\n- [Security Best Practices](./security-best-practices)\n- [API Reference](/api-reference/errors) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/error-handling"
  },
  "advanced-guides/handling-webhooks": {
    "name": "handling-webhooks",
    "content": "Handling Webhooks\n\n\nWebhooks allow you to receive real-time updates about payment events. This guide explains how to securely handle webhook notifications from lomi.\n\nSetup\n\n\n1. Configure Your Endpoint\n\n\nCreate a dedicated endpoint for webhook notifications:\n\n```typescript\nimport express from 'express';\nimport crypto from 'crypto';\n\nconst app = express();\n\n// Use raw body parser for webhook signature verification\napp.post('/webhooks', \n  express.raw({type: 'application/json'}),\n  handleWebhook\n);\n```\n\n2. Verify Signatures\n\n\nAlways verify webhook signatures to ensure requests are from lomi:\n\n```typescript\nfunction verifySignature(\n  payload: Buffer,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n    \n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(hmac)\n  );\n}\n\nasync function handleWebhook(req: Request, res: Response) {\n  const signature = req.headers['lomi-signature'];\n  \n  if (!signature || !verifySignature(\n    req.body,\n    signature as string,\n    process.env.WEBHOOK_SECRET\n  )) {\n    return res.status(400).json({\n      error: 'Invalid signature'\n    });\n  }\n  \n  const event = JSON.parse(req.body.toString());\n  \n  // Process the event\n  await processWebhookEvent(event);\n  \n  // Return 200 quickly\n  res.json({ received: true });\n}\n```\n\nEvent Types\n\n\nPayment Events\n\n\n1. **payment.created**\n   ```typescript\n   if (event.type === 'payment.created') {\n     const payment = event.data;\n     await updateOrderStatus(payment.metadata.orderId, 'pending');\n   }\n   ```\n\n2. **payment.succeeded**\n   ```typescript\n   if (event.type === 'payment.succeeded') {\n     const payment = event.data;\n     await fulfillOrder(payment.metadata.orderId);\n   }\n   ```\n\n3. **payment.failed**\n   ```typescript\n   if (event.type === 'payment.failed') {\n     const payment = event.data;\n     await notifyCustomer(payment.metadata.orderId, 'payment_failed');\n   }\n   ```\n\nRefund Events\n\n\n1. **refund.created**\n   ```typescript\n   if (event.type === 'refund.created') {\n     const refund = event.data;\n     await updateRefundStatus(refund.id, 'pending');\n   }\n   ```\n\n2. **refund.succeeded**\n   ```typescript\n   if (event.type === 'refund.succeeded') {\n     const refund = event.data;\n     await completeRefund(refund.id);\n   }\n   ```\n\nBest Practices\n\n\n1. Quick Response\n\n\nRespond quickly to webhook notifications:\n\n```typescript\nasync function handleWebhook(req: Request, res: Response) {\n  // Verify signature first\n  \n  // Return 200 quickly\n  res.json({ received: true });\n  \n  // Process event asynchronously\n  try {\n    await processWebhookEvent(event);\n  } catch (error) {\n    // Log error but don't affect response\n    console.error('Webhook processing error:', error);\n  }\n}\n```\n\n2. Idempotency\n\n\nHandle duplicate events gracefully:\n\n```typescript\nasync function processWebhookEvent(event: WebhookEvent) {\n  // Check if event was already processed\n  const processed = await db.webhookEvents.findOne({\n    eventId: event.id\n  });\n  \n  if (processed) {\n    return; // Skip processing\n  }\n  \n  // Process the event\n  await handleEvent(event);\n  \n  // Mark as processed\n  await db.webhookEvents.create({\n    eventId: event.id,\n    type: event.type,\n    processedAt: new Date()\n  });\n}\n```\n\n3. Error Handling\n\n\nImplement robust error handling:\n\n```typescript\nasync function handleWebhook(req: Request, res: Response) {\n  try {\n    // Verify signature\n    \n    // Parse event\n    const event = JSON.parse(req.body.toString());\n    \n    // Return 200 quickly\n    res.json({ received: true });\n    \n    // Process asynchronously\n    await processWebhookEvent(event);\n  } catch (error) {\n    console.error('Webhook error:', error);\n    \n    // Don't expose error details\n    res.status(400).json({\n      error: 'Invalid webhook payload'\n    });\n  }\n}\n```\n\n4. Logging\n\n\nImplement comprehensive logging:\n\n```typescript\nfunction logWebhookEvent(event: WebhookEvent) {\n  // Remove sensitive data\n  const sanitizedEvent = {\n    ...event,\n    data: {\n      ...event.data,\n      customer: '[REDACTED]'\n    }\n  };\n  \n  console.log('Webhook received:', {\n    id: event.id,\n    type: event.type,\n    created: event.created,\n    data: sanitizedEvent.data\n  });\n}\n```\n\nTesting Webhooks\n\n\nLocal Development\n\n\nUse the CLI for local testing:\n\n```bash\nlomi webhook forward --url \n```\n\nTest Events\n\n\nSend test events using the CLI:\n\n```bash\nlomi webhook test --event payment.succeeded\n```\n\nMonitoring\n\n\n1. View Recent Events\n\n\n```bash\nlomi webhook events list\n```\n\n2. Retry Failed Events\n\n\n```bash\nlomi webhook events retry \n```\n\nNext Steps\n\n\n- [Security Best Practices](./security-best-practices)\n- [Error Handling](./error-handling)\n- [API Reference](/api-reference) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/handling-webhooks"
  },
  "advanced-guides/idempotency-keys": {
    "name": "idempotency-keys",
    "content": "Idempotency\n\n\nIdempotency ensures that an API request can't be performed multiple times by mistake. This is crucial for payment operations to prevent duplicate charges.\n\nHow It Works\n\n\n1. You generate a unique key for each request\n2. Include the key in your request header\n3. If you retry with the same key, you'll get the same response\n\nUsing Idempotency Keys\n\n\nInclude the `idempotency-key` header in your requests:\n\n```typescript\n// Using the SDK\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: 'your_merchant_id',\n  amount: 1000,\n  currency: 'XOF',\n  provider_codes: ['ORANGE_MONEY']\n}, {\n  idempotencyKey: 'unique_request_id_123'\n});\n\n// Direct API calls\nconst response = await fetch(' {\n  method: 'POST',\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY,\n    'idempotency-key': 'unique_request_id_123',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    // request parameters\n  })\n});\n```\n\nGenerating Keys\n\n\nGenerate unique, deterministic keys based on your business logic:\n\n```typescript\nfunction generateIdempotencyKey(orderId: string): string {\n  const timestamp = Date.now();\n  return `order_${orderId}_${timestamp}`;\n}\n\n// Using UUID v4\nimport { v4 as uuidv4 } from 'uuid';\nconst idempotencyKey = uuidv4();\n\n// Using order-specific information\nconst idempotencyKey = `order_${orderId}_${timestamp}_${amount}`;\n```\n\nKey Lifecycle\n\n\n- Keys are valid for 24 hours\n- After 24 hours, the same key can be reused\n- Keys must be unique across all your requests\n\nError Handling\n\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  }, {\n    idempotencyKey: 'unique_key'\n  });\n} catch (error) {\n  if (error.code === 'idempotency_key_reused') {\n    // Key was used within last 24 hours\n    console.error('Duplicate request detected');\n  } else if (error.code === 'idempotency_key_invalid') {\n    // Invalid key format\n    console.error('Invalid idempotency key');\n  }\n}\n```\n\nBest Practices\n\n\n1. **Key Generation**\n   - Use UUIDs or order-specific information\n   - Include timestamp for uniqueness\n   - Keep keys reasonably short\n\n2. **Storage**\n   - Store keys with request outcomes\n   - Clean up old keys periodically\n   - Index keys for quick lookups\n\n3. **Retry Logic**\n   ```typescript\n   async function withIdempotency(fn, key, maxRetries = 3) {\n     for (let i = 0; i  \n             setTimeout(resolve, Math.pow(2, i) * 1000)\n           );\n           continue;\n         }\n         throw error;\n       }\n     }\n   }\n   \n   // Usage\n   await withIdempotency(\n     (key) => lomi.checkoutSessions.create({\n       // ... parameters\n     }, { idempotencyKey: key }),\n     'unique_key_123'\n   );\n   ```\n\nCommon Scenarios\n\n\n1. **Payment Creation**\n   ```typescript\n   const idempotencyKey = `payment_${orderId}_${amount}_${timestamp}`;\n   ```\n\n2. **Refunds**\n   ```typescript\n   const idempotencyKey = `refund_${paymentId}_${amount}_${timestamp}`;\n   ```\n\n3. **Webhook Retries**\n   ```typescript\n   const idempotencyKey = `webhook_${eventId}_${attempt}`;\n   ```\n\nNext Steps\n\n\n- [Error Handling](./error-handling)\n- [Webhooks](./handling-webhooks)\n- [API Reference](/api-reference) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/idempotency-keys"
  },
  "advanced-guides/security-best-practices": {
    "name": "security-best-practices",
    "content": "Security Best Practices\n\n\nImplementing robust security measures is crucial when handling payments. Follow these best practices to ensure secure integration with lomi.\n\nAPI Authentication\n\n\nAPI Key Security\n\n\n1. **Environment Variables**\n   ```typescript\n   // Don't hardcode API keys\n   const lomi = new LomiSDK({\n     apiKey: process.env.LOMI_API_KEY\n   });\n   ```\n\n2. **Key Rotation**\n   - Rotate API keys periodically\n   - Use different keys for development and production\n   - Revoke compromised keys immediately\n\n3. **Access Control**\n   - Limit API key access to necessary services\n   - Use test keys for development and testing\n   - Monitor API key usage for suspicious activity\n\nRequest Security\n\n\nTLS Requirements\n\n\nAll API requests must use HTTPS/TLS:\n\n```typescript\nconst api = axios.create({\n  baseURL: '\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY\n  }\n});\n```\n\nRequest Validation\n\n\n1. **Input Sanitization**\n   ```typescript\n   function sanitizeAmount(amount: number): number {\n     return Math.floor(Math.abs(amount));\n   }\n   \n   function sanitizePhoneNumber(phone: string): string {\n     return phone.replace(/[^\\d+]/g, '');\n   }\n   ```\n\n2. **Schema Validation**\n   ```typescript\n   import { z } from 'zod';\n   \n   const PaymentSchema = z.object({\n     amount: z.number().positive(),\n     currency: z.enum(['XOF']),\n     provider_codes: z.array(z.string()),\n     merchant_id: z.string()\n   });\n   \n   function validatePaymentRequest(data: unknown) {\n     return PaymentSchema.parse(data);\n   }\n   ```\n\nWebhook Security\n\n\nSignature Verification\n\n\nAlways verify webhook signatures:\n\n```typescript\nimport crypto from 'crypto';\n\nfunction verifyWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n  \n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(hmac)\n  );\n}\n\n// Express middleware\napp.post('/webhook', express.raw({type: 'application/json'}), (req, res) => {\n  const signature = req.headers['lomi-signature'];\n  \n  if (!signature || !verifyWebhookSignature(\n    req.body,\n    signature as string,\n    process.env.WEBHOOK_SECRET\n  )) {\n    return res.status(400).json({ error: 'Invalid signature' });\n  }\n  \n  // Process webhook\n});\n```\n\nWebhook Endpoints\n\n\n1. **Access Control**\n   - Use HTTPS endpoints only\n   - Implement IP whitelisting\n   - Rate limit webhook endpoints\n\n2. **Error Handling**\n   ```typescript\n   app.post('/webhook', async (req, res) => {\n     try {\n       // Process webhook\n       res.status(200).send('OK');\n     } catch (error) {\n       // Log error details securely\n       console.error('Webhook processing error:', error);\n       \n       // Return generic error to caller\n       res.status(500).json({\n         error: 'Internal server error'\n       });\n     }\n   });\n   ```\n\nData Security\n\n\nSensitive Data Handling\n\n\n1. **Data Minimization**\n   ```typescript\n   // Only collect necessary data\n   const session = await lomi.checkoutSessions.create({\n     merchant_id: merchantId,\n     amount: amount,\n     currency: 'XOF',\n     provider_codes: ['ORANGE_MONEY'],\n     metadata: {\n       orderId: order.id\n       // Don't include sensitive customer data\n     }\n   });\n   ```\n\n2. **Secure Storage**\n   - Never store full payment details\n   - Encrypt sensitive data at rest\n   - Implement proper access controls\n\nError Logging\n\n\n```typescript\n// Avoid logging sensitive data\nfunction logError(error: Error, context: object) {\n  const sanitizedContext = {\n    ...context,\n    apiKey: '[REDACTED]',\n    customerPhone: '[REDACTED]'\n  };\n  \n  console.error('Error:', {\n    message: error.message,\n    stack: error.stack,\n    context: sanitizedContext\n  });\n}\n```\n\nNetwork Security\n\n\nRate Limiting\n\n\nImplement rate limiting for your endpoints:\n\n```typescript\nimport rateLimit from 'express-rate-limit';\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\napp.use('/api/', limiter);\n```\n\nTimeouts\n\n\nSet appropriate timeouts:\n\n```typescript\nconst api = axios.create({\n  timeout: 10000, // 10 seconds\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY\n  }\n});\n```\n\nMonitoring and Alerts\n\n\n1. **Activity Monitoring**\n   ```typescript\n   function monitorAPIUsage(event: APIEvent) {\n     if (event.amount > 1000000) { // Large transaction\n       alertTeam('Large transaction detected', event);\n     }\n     \n     if (event.errorCount > 10) { // Multiple failures\n       alertTeam('Multiple API errors detected', event);\n     }\n   }\n   ```\n\n2. **Suspicious Activity**\n   - Monitor for unusual patterns\n   - Track failed authentication attempts\n   - Alert on unexpected volume spikes\n\nDevelopment Practices\n\n\n1. **Code Security**\n   - Keep dependencies updated\n   - Use security linters\n   - Conduct regular security reviews\n\n2. **Environment Separation**\n   ```typescript\n   const config = {\n     development: {\n       apiUrl: '\n       webhookSecret: process.env.DEV_WEBHOOK_SECRET\n     },\n     production: {\n       apiUrl: '\n       webhookSecret: process.env.PROD_WEBHOOK_SECRET\n     }\n   }[process.env.NODE_ENV || 'development'];\n   ```\n\nNext Steps\n\n\n- [Error Handling](./error-handling)\n- [Idempotency Keys](./idempotency-keys)\n- [API Reference](/api-reference) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/security-best-practices"
  },
  "advanced-guides/testing": {
    "name": "testing",
    "content": "Testing Guide\n\n\nThis guide covers best practices for testing your lomi integration, from local development to production readiness.\n\nTest Environment\n\n\nSetup\n\n\n1. **Test API Key**\n   ```typescript\n   const lomi = new LomiSDK({\n     apiKey: process.env.LOMI_TEST_API_KEY,\n     environment: 'test'\n   });\n   ```\n\n2. **Test Configuration**\n   ```typescript\n   // test/config.ts\n   export const testConfig = {\n     merchantId: process.env.TEST_MERCHANT_ID,\n     providers: ['FREE_MONEY', 'ORANGE_MONEY'],\n     webhookUrl: '\n     amount: 1000,\n     currency: 'XOF'\n   };\n   ```\n\nIntegration Tests\n\n\n1. Payment Flow\n\n\n```typescript\nimport { expect } from 'chai';\nimport { LomiSDK } from '@lomi/sdk';\n\ndescribe('Payment Flow', () => {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_TEST_API_KEY\n  });\n  \n  it('should create a checkout session', async () => {\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: testConfig.merchantId,\n      amount: testConfig.amount,\n      currency: testConfig.currency,\n      provider_codes: testConfig.providers,\n      metadata: {\n        orderId: 'test_order_123'\n      }\n    });\n    \n    expect(session.id).to.be.a('string');\n    expect(session.status).to.equal('pending');\n  });\n  \n  it('should retrieve a session', async () => {\n    const session = await lomi.checkoutSessions.retrieve(\n      'cs_test_123'\n    );\n    \n    expect(session.status).to.be.oneOf([\n      'pending',\n      'succeeded',\n      'failed'\n    ]);\n  });\n});\n```\n\n2. Webhook Testing\n\n\n```typescript\nimport express from 'express';\nimport crypto from 'crypto';\n\ndescribe('Webhook Handling', () => {\n  const app = express();\n  let server;\n  \n  before(() => {\n    app.post('/webhooks', \n      express.raw({type: 'application/json'}),\n      handleWebhook\n    );\n    server = app.listen(3000);\n  });\n  \n  after(() => {\n    server.close();\n  });\n  \n  it('should verify webhook signatures', () => {\n    const payload = Buffer.from(JSON.stringify({\n      type: 'payment.succeeded',\n      data: {}\n    }));\n    \n    const signature = crypto\n      .createHmac('sha256', process.env.WEBHOOK_SECRET)\n      .update(payload)\n      .digest('hex');\n      \n    const isValid = verifySignature(\n      payload,\n      signature,\n      process.env.WEBHOOK_SECRET\n    );\n    \n    expect(isValid).to.be.true;\n  });\n});\n```\n\n3. Error Handling\n\n\n```typescript\ndescribe('Error Handling', () => {\n  it('should handle invalid requests', async () => {\n    try {\n      await lomi.checkoutSessions.create({\n        // Invalid request\n        amount: -1000\n      });\n      \n      throw new Error('Should have thrown');\n    } catch (error) {\n      expect(error.code).to.equal('invalid_request');\n      expect(error.message).to.include('amount');\n    }\n  });\n  \n  it('should handle authentication errors', async () => {\n    const invalidLomi = new LomiSDK({\n      apiKey: 'invalid_key'\n    });\n    \n    try {\n      await invalidLomi.checkoutSessions.create({\n        // Valid request\n        merchant_id: testConfig.merchantId,\n        amount: testConfig.amount,\n        currency: testConfig.currency,\n        provider_codes: testConfig.providers\n      });\n      \n      throw new Error('Should have thrown');\n    } catch (error) {\n      expect(error.code).to.equal('authentication_error');\n    }\n  });\n});\n```\n\nEnd-to-End Testing\n\n\n1. Setup Test Environment\n\n\n```typescript\n// test/setup.ts\nimport { TestEnvironment } from './utils';\n\nbefore(async () => {\n  const env = new TestEnvironment();\n  await env.setup();\n  \n  // Create test merchant\n  const merchant = await env.createMerchant();\n  process.env.TEST_MERCHANT_ID = merchant.id;\n  \n  // Setup webhook endpoint\n  await env.setupWebhook();\n});\n\nafter(async () => {\n  await env.cleanup();\n});\n```\n\n2. Complete Payment Flow\n\n\n```typescript\ndescribe('End-to-End Payment', () => {\n  it('should complete payment flow', async () => {\n    // 1. Create checkout session\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: testConfig.merchantId,\n      amount: testConfig.amount,\n      currency: testConfig.currency,\n      provider_codes: ['FREE_MONEY'],\n      metadata: {\n        orderId: 'test_order_123'\n      }\n    });\n    \n    // 2. Simulate payment\n    await lomi.test.simulatePayment(session.id);\n    \n    // 3. Verify webhook received\n    const event = await waitForWebhook('payment.succeeded');\n    expect(event.data.id).to.equal(session.id);\n    \n    // 4. Verify final status\n    const updated = await lomi.checkoutSessions.retrieve(\n      session.id\n    );\n    expect(updated.status).to.equal('succeeded');\n  });\n});\n```\n\nTest Utilities\n\n\n1. Webhook Helper\n\n\n```typescript\n// test/utils/webhook.ts\nexport class WebhookHelper {\n  private events: WebhookEvent[] = [];\n  \n  handleWebhook(event: WebhookEvent) {\n    this.events.push(event);\n  }\n  \n  async waitForEvent(type: string, timeout = 5000): Promise {\n    const start = Date.now();\n    \n    while (Date.now() - start  e.type === type);\n      if (event) return event;\n      await new Promise(r => setTimeout(r, 100));\n    }\n    \n    throw new Error(`Timeout waiting for ${type}`);\n  }\n}\n```\n\n2. Test Data Generator\n\n\n```typescript\n// test/utils/data.ts\nexport class TestData {\n  static generateOrder() {\n    return {\n      id: `order_${Date.now()}`,\n      amount: Math.floor(Math.random() * 10000) + 1000,\n      currency: 'XOF'\n    };\n  }\n  \n  static generateCustomer() {\n    return {\n      name: `Test User ${Date.now()}`,\n      email: `test${Date.now()}@example.com`,\n      phone: '+22501234567'\n    };\n  }\n}\n```\n\nCI/CD Integration\n\n\nGitHub Actions Example\n\n\n```yaml\n.github/workflows/test.yml\n\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          \n      - name: Install dependencies\n        run: npm install\n        \n      - name: Run tests\n        run: npm test\n        env:\n          LOMI_TEST_API_KEY: ${{ secrets.LOMI_TEST_API_KEY }}\n          TEST_WEBHOOK_SECRET: ${{ secrets.TEST_WEBHOOK_SECRET }}\n```\n\nNext Steps\n\n\n- [CI/CD Integration](./ci-cd)\n- [Error Handling](./error-handling)\n- [API Reference](/api-reference) ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/testing"
  },
  "api-reference/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n    \"overview\": \"Overview\",\n    \"authentication\": \"Authentication\",\n    \"endpoints\": \"API Endpoints\",\n    \"data-models\": \"Data Models\",\n    \"errors\": \"Error Handling\",\n    \"webhooks\": \"Webhooks\",\n    \"providers\": \"Payment Providers\"\n}\n\nexport default meta;",
    "parentName": "api-reference",
    "path": "api-reference/_meta"
  },
  "api-reference/authentication": {
    "name": "authentication",
    "content": "Authentication\n\n\nThe lomi.africa API uses API keys for authentication. All API requests must include your API key in the headers.\n\nAPI Keys\n\n\nYour API key should be included in the `X-API-KEY` header of all requests:\n\n```bash\nX-API-KEY: your_api_key_here\n```\n\nExample Request\n\n\n```bash\ncurl -X GET \" \\\n  -H \"X-API-KEY: your_api_key_here\" \\\n  -H \"Content-Type: application/json\"\n```\n\n```typescript\nimport { LomiClient } from '@lomi/sdk';\n\nconst lomi = new LomiClient({\n  apiKey: 'your_api_key_here'\n});\n```\n\nSecurity Best Practices\n\n\n1. **Keep Keys Secure**\n   - Never expose API keys in client-side code\n   - Don't commit API keys to version control\n   - Use environment variables to store keys\n\n2. **Key Rotation**\n   - Rotate keys periodically\n   - Immediately rotate compromised keys\n   - Use different keys for development and production\n\n3. **Access Control**\n   - Use test keys for development\n   - Limit key access to necessary team members\n   - Monitor key usage regularly\n\nTest vs Production Keys\n\n\n- **Test Keys**: Start with `test_` prefix\n  - Use for development and testing\n  - No real transactions processed\n  - Test provider integrations available\n\n- **Production Keys**: Start with `live_` prefix\n  - Use for real transactions\n  - Actual money movement\n  - Real provider integrations\n\nGetting API Keys\n\n\n1. [Sign up]( for a lomi.africa account\n2. Complete the merchant verification process\n3. Navigate to API Settings in your dashboard\n4. Generate API keys for test and production environments\n\nKey Management\n\n\nYou can manage your API keys from the [Dashboard](\n- Generate new keys\n- Revoke existing keys\n- View key usage statistics\n- Set key permissions and restrictions\n\nRate Limiting\n\n\nAPI keys are subject to rate limiting:\n- Test keys: 100 requests per minute\n- Production keys: 1000 requests per minute\n- Custom limits available for enterprise plans ",
    "parentName": "api-reference",
    "path": "api-reference/authentication"
  },
  "api-reference/data-models": {
    "name": "data-models",
    "content": "Data Models\n\n\nThis section describes the structure of objects used throughout the API. Understanding these models is crucial for successful API integration.\n\nCore Models\n\n\nMerchant\n\nRepresents a business account on the platform.\n\n```typescript\ninterface Merchant {\n  merchant_id: string;      // UUID\n  name: string;            // Business name\n  email: string;           // Contact email\n  phone_number: string;    // Contact phone\n  onboarded: boolean;      // Onboarding status\n  country: string;         // Country code\n  avatar_url?: string;     // Profile image\n  preferred_language?: string;\n  timezone?: string;\n  metadata?: Record;\n  created_at: string;      // ISO datetime\n  updated_at: string;      // ISO datetime\n}\n```\n\nProduct\n\nRepresents an item or service that can be purchased.\n\n```typescript\ninterface Product {\n  product_id: string;      // UUID\n  merchant_id: string;     // UUID\n  name: string;\n  description?: string;\n  price: number;\n  currency_code: CurrencyCode;\n  image_url?: string;\n  is_active: boolean;\n  display_on_storefront: boolean;\n  created_at: string;      // ISO datetime\n  updated_at: string;      // ISO datetime\n}\n```\n\nTransaction\n\nRepresents a payment transaction.\n\n```typescript\ninterface Transaction {\n  transaction_id: string;  // UUID\n  merchant_id: string;     // UUID\n  customer_id: string;     // UUID\n  amount: number;\n  currency_code: CurrencyCode;\n  status: TransactionStatus;\n  provider_code: ProviderCode;\n  payment_method_code: PaymentMethodCode;\n  reference_id: string;\n  metadata?: Record;\n  created_at: string;      // ISO datetime\n  updated_at: string;      // ISO datetime\n}\n```\n\nSubscription Models\n\n\nSubscriptionPlan\n\nDefines a recurring billing plan.\n\n```typescript\ninterface SubscriptionPlan {\n  plan_id: string;         // UUID\n  merchant_id: string;     // UUID\n  name: string;\n  description?: string;\n  amount: number;\n  currency_code: CurrencyCode;\n  billing_frequency: BillingFrequency;\n  failed_payment_action: FailedPaymentAction;\n  charge_day?: number;\n  metadata?: Record;\n  created_at: string;      // ISO datetime\n  updated_at: string;      // ISO datetime\n}\n```\n\nPayment Models\n\n\nPaymentLink\n\nRepresents a shareable payment URL.\n\n```typescript\ninterface PaymentLink {\n  link_id: string;         // UUID\n  merchant_id: string;     // UUID\n  title: string;\n  public_description?: string;\n  private_description?: string;\n  amount?: number;\n  currency_code: CurrencyCode;\n  allowed_providers: ProviderCode[];\n  url: string;\n  expires_at?: string;     // ISO datetime\n  created_at: string;      // ISO datetime\n  updated_at: string;      // ISO datetime\n}\n```\n\nCheckoutSession\n\nRepresents a payment collection session.\n\n```typescript\ninterface CheckoutSession {\n  checkout_session_id: string;\n  merchant_id: string;     // UUID\n  url: string;\n  status: \"open\" | \"completed\" | \"expired\";\n  success_url: string;\n  cancel_url: string;\n  provider_codes: ProviderCode[];\n  expires_at: string;      // ISO datetime\n  created_at: string;      // ISO datetime\n}\n```\n\nEnums\n\n\nCurrencyCode\n\nSupported currency codes.\n\n```typescript\nenum CurrencyCode {\n  XOF = \"XOF\",  // West African CFA franc\n  USD = \"USD\",  // US Dollar\n  EUR = \"EUR\"   // Euro\n}\n```\n\nProviderCode\n\nAvailable payment providers.\n\n```typescript\nenum ProviderCode {\n  ORANGE = \"ORANGE\",\n  WAVE = \"WAVE\",\n  ECOBANK = \"ECOBANK\",\n  MTN = \"MTN\",\n  MOOV = \"MOOV\",\n  AIRTEL = \"AIRTEL\",\n  MPESA = \"MPESA\",\n  // ... other providers\n}\n```\n\nPaymentMethodCode\n\nSupported payment methods.\n\n```typescript\nenum PaymentMethodCode {\n  MOBILE_MONEY = \"MOBILE_MONEY\",\n  CARDS = \"CARDS\",\n  BANK_TRANSFER = \"BANK_TRANSFER\",\n  USSD = \"USSD\",\n  QR_CODE = \"QR_CODE\",\n  E_WALLET = \"E_WALLET\",\n  CRYPTO = \"CRYPTO\"\n}\n```\n\nTransactionStatus\n\nPossible transaction states.\n\n```typescript\nenum TransactionStatus {\n  PENDING = \"pending\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n  REFUNDED = \"refunded\"\n}\n```\n\nBillingFrequency\n\nSubscription billing intervals.\n\n```typescript\nenum BillingFrequency {\n  WEEKLY = \"weekly\",\n  BIWEEKLY = \"bi-weekly\",\n  MONTHLY = \"monthly\",\n  QUARTERLY = \"quarterly\",\n  SEMIANNUAL = \"semi-annual\",\n  YEARLY = \"yearly\",\n  ONETIME = \"one-time\"\n}\n```\n\nWebhook Models\n\n\nWebhookEvent\n\nRepresents an event notification.\n\n```typescript\ninterface WebhookEvent {\n  event_type: WebhookEventType;\n  merchant_id: string;\n  data: Record;\n  created_at: string;\n}\n```\n\nWebhookEventType\n\nTypes of events that trigger webhooks.\n\n```typescript\nenum WebhookEventType {\n  TRANSACTION_CREATED = \"TRANSACTION_CREATED\",\n  TRANSACTION_COMPLETED = \"TRANSACTION_COMPLETED\",\n  TRANSACTION_FAILED = \"TRANSACTION_FAILED\",\n  REFUND_COMPLETED = \"REFUND_COMPLETED\",\n  // ... other event types\n}\n``` ",
    "parentName": "api-reference",
    "path": "api-reference/data-models"
  },
  "api-reference/endpoints": {
    "name": "endpoints",
    "content": "API Endpoints\n\n\nThis section provides detailed information about all available API endpoints. Each endpoint includes examples in multiple programming languages and detailed request/response schemas.\n\nMerchants\n\n\nGet Merchant Details\n\n`GET /merchants/{merchant_id}`\n\nRetrieve detailed information about a merchant.\n\n```typescript\n// Using TypeScript SDK\nconst merchant = await lomi.merchants.get('merchant_123');\n```\n\n```python\nUsing Python SDK (coming soon)\n\nmerchant = lomi.merchants.get('merchant_123')\n```\n\n```bash\nUsing curl\n\ncurl -X GET \" \\\n  -H \"X-API-KEY: your_api_key_here\"\n```\n\nResponse\n\n```json\n{\n  \"merchant_id\": \"merchant_123\",\n  \"name\": \"Example Store\",\n  \"email\": \"store@example.com\",\n  \"phone_number\": \"+221777777777\",\n  \"onboarded\": true,\n  \"country\": \"SN\",\n  \"created_at\": \"2024-01-19T12:00:00Z\"\n}\n```\n\nList Connected Providers\n\n`GET /merchants/{merchant_id}/providers`\n\nGet a list of payment providers connected to a merchant account.\n\nProducts\n\n\nCreate Product\n\n`POST /products`\n\nCreate a new product for payment collection.\n\n```typescript\nconst product = await lomi.products.create({\n  name: \"Premium Plan\",\n  price: 10000,\n  currency_code: \"XOF\",\n  description: \"Monthly premium subscription\"\n});\n```\n\nRequest Body\n\n\\`\\`\\`yaml\n{\n  name: string\n  price: number\n  currency_code: \"XOF\" | \"USD\" | \"EUR\"\n  description?: string\n  image_url?: string\n  is_active?: boolean\n  display_on_storefront?: boolean\n}\n\\`\\`\\`\n\nList Products\n\n`GET /products?merchant_id={merchant_id}`\n\nRetrieve all products for a merchant.\n\nSubscriptions\n\n\nCreate Subscription Plan\n\n`POST /subscriptions`\n\nCreate a recurring billing plan.\n\n```typescript\nconst plan = await lomi.subscriptions.create({\n  name: \"Pro Plan\",\n  amount: 5000,\n  currency_code: \"XOF\",\n  billing_frequency: \"monthly\"\n});\n```\n\nManage Subscriptions\n\n- `GET /subscriptions` - List all subscription plans\n- `GET /subscriptions/{plan_id}` - Get plan details\n- `PATCH /subscriptions/{plan_id}` - Update plan\n- `DELETE /subscriptions/{plan_id}` - Delete plan\n\nTransactions\n\n\nCreate Transaction\n\n`POST /transactions`\n\nProcess a payment transaction.\n\n```typescript\nconst transaction = await lomi.transactions.create({\n  merchant_id: \"merchant_123\",\n  customer_id: \"customer_456\",\n  amount: 1000,\n  currency_code: \"XOF\",\n  provider_code: \"ORANGE\",\n  payment_method_code: \"MOBILE_MONEY\"\n});\n```\n\nList Transactions\n\n`GET /transactions?merchant_id={merchant_id}`\n\nGet transaction history with optional filters.\n\nPayment Links\n\n\nCreate Payment Link\n\n`POST /payment-links`\n\nGenerate a shareable payment link.\n\n```typescript\nconst link = await lomi.paymentLinks.create({\n  merchant_id: \"merchant_123\",\n  title: \"Product Purchase\",\n  amount: 15000,\n  currency_code: \"XOF\",\n  allowed_providers: [\"ORANGE\", \"WAVE\", \"MTN\"]\n});\n```\n\nManage Payment Links\n\n- `GET /payment-links` - List all payment links\n- `GET /payment-links/{link_id}` - Get link details\n- `PATCH /payment-links/{link_id}` - Update link\n- `DELETE /payment-links/{link_id}` - Delete link\n\nCheckout Sessions\n\n\nCreate Checkout Session\n\n`POST /checkout-sessions`\n\nCreate a new checkout session for collecting payments.\n\n```typescript\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: \"merchant_123\",\n  success_url: \"\n  cancel_url: \"\n  provider_codes: [\"ORANGE\", \"WAVE\"]\n});\n```\n\nList Checkout Sessions\n\n`GET /checkout-sessions?merchant_id={merchant_id}`\n\nGet all checkout sessions with optional status filters.\n\nCustomers\n\n\nCreate Customer\n\n`POST /customers`\n\nCreate a new customer record.\n\n```typescript\nconst customer = await lomi.customers.create({\n  merchant_id: \"merchant_123\",\n  email: \"customer@example.com\",\n  phone_number: \"+221777777777\"\n});\n```\n\nManage Customers\n\n- `GET /customers` - List all customers\n- `GET /customers/{customer_id}` - Get customer details\n- `PATCH /customers/{customer_id}` - Update customer\n- `DELETE /customers/{customer_id}` - Delete customer\n\nRefunds\n\n\nCreate Refund\n\n`POST /refunds`\n\nInitiate a refund for a transaction.\n\n```typescript\nconst refund = await lomi.refunds.create({\n  transaction_id: \"txn_123\",\n  amount: 1000,\n  reason: \"Customer request\"\n});\n```\n\nManage Refunds\n\n- `GET /refunds/{refund_id}` - Get refund details\n- `PATCH /refunds/{refund_id}` - Update refund status ",
    "parentName": "api-reference",
    "path": "api-reference/endpoints"
  },
  "api-reference/errors": {
    "name": "errors",
    "content": "Error Handling\n\n\nError Types\n\n\nAll API errors follow a consistent structure that includes an error code, message, and additional details when available.\n\n```json\n{\n  \"code\": \"invalid_request\",\n  \"message\": \"The provided currency is not supported\",\n  \"details\": {\n    \"field\": \"currency_code\",\n    \"value\": \"GBP\",\n    \"allowed_values\": [\"XOF\", \"USD\", \"EUR\"]\n  }\n}\n```\n\nError Categories\n\n\nAuthentication Errors (401)\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `invalid_api_key` | Invalid API key provided | Check your API key is correct and active |\n| `expired_api_key` | API key has expired | Generate a new API key in the dashboard |\n| `missing_api_key` | No API key provided | Include X-API-KEY header in your request |\n\nAuthorization Errors (403)\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `insufficient_permissions` | API key lacks required permissions | Request additional permissions or use a different key |\n| `account_inactive` | Merchant account is inactive | Contact support to reactivate your account |\n| `rate_limit_exceeded` | Too many requests | Implement exponential backoff in your integration |\n\nValidation Errors (400)\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `invalid_amount` | Invalid transaction amount | Ensure amount is positive and within limits |\n| `invalid_currency` | Unsupported currency code | Use one of: XOF, USD, EUR |\n| `invalid_phone` | Invalid phone number format | Use international format: +221XXXXXXXXX |\n| `missing_required_field` | Required field not provided | Check the API reference for required fields |\n\nResource Errors (404)\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `merchant_not_found` | Merchant ID doesn't exist | Verify the merchant_id is correct |\n| `transaction_not_found` | Transaction not found | Check the transaction_id |\n| `customer_not_found` | Customer doesn't exist | Verify the customer_id |\n\nProvider Errors (503)\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `provider_unavailable` | Payment provider is offline | Retry the request or try a different provider |\n| `provider_timeout` | Provider request timed out | Retry with exponential backoff |\n| `provider_rejected` | Provider rejected transaction | Check provider-specific error details |\n\nError Handling Best Practices\n\n\nImplement Retry Logic\n\n```typescript\nimport { LomiClient, ProviderError } from '@lomi/sdk';\n\nasync function processPayment(data) {\n  const maxRetries = 3;\n  let attempt = 0;\n\n  while (attempt < maxRetries) {\n    try {\n      const result = await lomi.transactions.create(data);\n      return result;\n    } catch (error) {\n      if (error instanceof ProviderError && error.isRetryable()) {\n        attempt++;\n        await sleep(Math.pow(2, attempt) * 1000); // Exponential backoff\n        continue;\n      }\n      throw error;\n    }\n  }\n}\n```\n\nHandle Rate Limits\n\n```typescript\nimport { RateLimitError } from '@lomi/sdk';\n\ntry {\n  await lomi.transactions.list();\n} catch (error) {\n  if (error instanceof RateLimitError) {\n    const resetTime = error.resetAt;\n    const waitMs = resetTime - Date.now();\n    await sleep(waitMs);\n    // Retry request\n  }\n}\n```\n\nValidate Input Data\n\n```typescript\nimport { ValidationError } from '@lomi/sdk';\n\ntry {\n  await lomi.customers.create({\n    email: 'invalid-email',\n    phone: 'invalid-phone'\n  });\n} catch (error) {\n  if (error instanceof ValidationError) {\n    console.log(error.details); // Shows specific validation failures\n    // Handle each validation error\n  }\n}\n```\n\nProvider-Specific Errors\n\n\nEach payment provider may return specific error codes. Here's how to handle them:\n\nOrange Money\n\n```typescript\ntry {\n  await lomi.transactions.create({\n    provider_code: 'ORANGE',\n    // ...\n  });\n} catch (error) {\n  if (error.provider_code === 'ORANGE') {\n    switch (error.provider_error_code) {\n      case 'INSUFFICIENT_BALANCE':\n        // Handle insufficient balance\n        break;\n      case 'INVALID_PIN':\n        // Handle invalid PIN\n        break;\n      // Handle other Orange-specific errors\n    }\n  }\n}\n```\n\nWave\n\n```typescript\ntry {\n  await lomi.transactions.create({\n    provider_code: 'WAVE',\n    // ...\n  });\n} catch (error) {\n  if (error.provider_code === 'WAVE') {\n    switch (error.provider_error_code) {\n      case 'USER_CANCELLED':\n        // Handle user cancellation\n        break;\n      case 'DAILY_LIMIT_EXCEEDED':\n        // Handle limit exceeded\n        break;\n      // Handle other Wave-specific errors\n    }\n  }\n}\n```\n\nError Monitoring\n\n\nWe recommend using our dashboard's error monitoring tools to:\n- Track error rates and patterns\n- Set up alerts for critical errors\n- Analyze error distributions by provider\n- Monitor API health and performance\n\nDebugging Tools\n\n\nTest Mode\n\nUse test mode to simulate various error scenarios:\n```typescript\nconst lomi = new LomiClient({\n  apiKey: 'test_key',\n  debug: true // Enables detailed error logging\n});\n```\n\nRequest IDs\n\nAll API responses include a unique request ID. Include this when contacting support:\n```typescript\ntry {\n  await lomi.transactions.create(data);\n} catch (error) {\n  console.log(error.requestId); // Use this ID for support\n}\n``` ",
    "parentName": "api-reference",
    "path": "api-reference/errors"
  },
  "api-reference/overview": {
    "name": "overview",
    "content": "API Overview\n\n\nThe lomi.africa Payments API is a powerful payment orchestration platform that enables businesses to accept payments across multiple providers and payment methods in Africa.\n\nBase URL\n\n\nAll API requests should be made to:\n\n```bash\n\n```\n\nKey Features\n\n\n- **Multiple Payment Providers**: Support for major payment providers including Orange Money, Wave, MTN, Moov, Airtel, M-Pesa, and more\n- **Various Payment Methods**: Accept payments via Mobile Money, Cards, Bank Transfers, USSD, QR Codes, and Digital Wallets\n- **Subscription Management**: Create and manage recurring billing plans with flexible frequencies\n- **Payment Links**: Generate shareable payment links for quick collection\n- **Webhook Integration**: Real-time notifications for payment events\n- **Comprehensive Reporting**: Detailed transaction history and analytics\n- **Multi-Currency Support**: Handle transactions in XOF, USD, and EUR\n\nAPI Versioning\n\n\nThe current version is `v1`. We maintain backward compatibility and notify of any breaking changes in advance.\n\nRate Limiting\n\n\nThe API implements rate limiting to ensure stability. Rate limits are applied on a per-API-key basis. Contact support for custom limits.\n\nResponse Format\n\n\nAll responses are returned in JSON format. Successful responses include the requested data, while error responses include error details and messages.\n\nExample success response:\n```json\n{\n  \"data\": {\n    \"transaction_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"status\": \"completed\"\n  }\n}\n```\n\nExample error response:\n```json\n{\n  \"code\": \"invalid_request\",\n  \"message\": \"Invalid currency code provided\",\n  \"details\": {\n    \"field\": \"currency_code\",\n    \"value\": \"XXX\"\n  }\n}\n```\n\nSDK Support\n\n\nWe provide official SDKs for:\n- Node.js/TypeScript\n- Python (coming soon)\n- PHP (coming soon)\n- Go (coming soon)\n\nNeed Help?\n\n\n- Join our [Developer Community](\n- Contact [Support](mailto:support@lomi.africa)\n- Read our [API Status]( ",
    "parentName": "api-reference",
    "path": "api-reference/overview"
  },
  "api-reference/providers": {
    "name": "providers",
    "content": "Payment Providers\n\n\nThis guide details the payment providers available through Lomi's API and their specific requirements.\n\nOverview\n\n\nLomi supports multiple payment providers across Africa, each with its own features and requirements:\n\n| Provider | Countries | Methods | Currencies |\n|----------|-----------|----------|------------|\n| Orange Money | SN, ML, BF | Mobile Money | XOF |\n| Wave | SN, CI | Mobile Money, QR | XOF |\n| MTN | CI, BF | Mobile Money | XOF |\n| Moov | SN, CI | Mobile Money | XOF |\n| Ecobank | Global | Cards | XOF, USD, EUR |\n| M-Pesa | KE | Mobile Money | USD |\n\nProvider Setup\n\n\nOrange Money\n\n```typescript\n// Connect Orange Money account\nconst provider = await lomi.providers.connect({\n  provider_code: 'ORANGE',\n  phone_number: '+221777777777',\n  merchant_code: 'OM123456'\n});\n\n// Create transaction\nconst transaction = await lomi.transactions.create({\n  provider_code: 'ORANGE',\n  payment_method_code: 'MOBILE_MONEY',\n  amount: 1000,\n  currency_code: 'XOF',\n  customer_phone: '+221777777777'\n});\n```\n\nRequirements\n\n- Merchant account with Orange Money\n- Business KYC verification\n- Valid merchant code\n- API credentials\n\nWave\n\n```typescript\n// Connect Wave account\nconst provider = await lomi.providers.connect({\n  provider_code: 'WAVE',\n  business_id: 'WAVE123456',\n  api_key: 'wave_api_key'\n});\n\n// Create QR code payment\nconst qr = await lomi.qrCodes.create({\n  provider_code: 'WAVE',\n  amount: 1000,\n  currency_code: 'XOF'\n});\n```\n\nRequirements\n\n- Wave Business account\n- Business verification\n- API credentials\n- Callback URL configuration\n\nProvider Features\n\n\nOrange Money\n\n\n- **Payment Methods**\n  - USSD push payments\n  - QR code payments\n  - Direct debit\n  \n- **Limits**\n  - Min: 100 XOF\n  - Max: 1,000,000 XOF per transaction\n  - Daily: 2,000,000 XOF\n  \n- **Features**\n  - Instant notifications\n  - Refund support\n  - Recurring payments\n  - Split payments\n\nWave\n\n\n- **Payment Methods**\n  - QR code payments\n  - Direct payments\n  - Payment links\n  \n- **Limits**\n  - Min: 100 XOF\n  - Max: 2,000,000 XOF per transaction\n  - Daily: 5,000,000 XOF\n  \n- **Features**\n  - Real-time notifications\n  - Instant refunds\n  - Business profiles\n  - Analytics dashboard\n\nTesting\n\n\nTest Credentials\n\n\nEach provider has specific test credentials:\n\n```typescript\n// Orange Money test account\nconst lomi = new LomiClient({\n  apiKey: 'test_key',\n  provider_credentials: {\n    ORANGE: {\n      test_numbers: ['+221770000000', '+221770000001'],\n      merchant_code: 'TEST123'\n    }\n  }\n});\n```\n\nTest Scenarios\n\n\nSuccessful Payment\n\n```typescript\nconst transaction = await lomi.transactions.create({\n  provider_code: 'ORANGE',\n  amount: 1000,\n  customer_phone: '+221770000000' // Test success number\n});\n```\n\nFailed Payment\n\n```typescript\nconst transaction = await lomi.transactions.create({\n  provider_code: 'ORANGE',\n  amount: 1000,\n  customer_phone: '+221770000001' // Test failure number\n});\n```\n\nProvider-Specific Errors\n\n\nOrange Money Errors\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `INSUFFICIENT_BALANCE` | Customer lacks funds | Ask customer to top up |\n| `INVALID_PIN` | Wrong PIN entered | Ask customer to retry |\n| `DAILY_LIMIT` | Daily limit exceeded | Try different provider |\n\nWave Errors\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `USER_CANCELLED` | User cancelled payment | Prompt to retry |\n| `ACCOUNT_LOCKED` | Account security lock | Contact Wave support |\n| `INVALID_BUSINESS` | Invalid business account | Verify credentials |\n\nBest Practices\n\n\n1. Provider Selection\n\n```typescript\n// Check provider availability\nconst providers = await lomi.providers.list({\n  country: 'SN',\n  currency: 'XOF'\n});\n\n// Sort by priority\nconst preferredProvider = providers.sort((a, b) => \n  b.success_rate - a.success_rate\n)[0];\n```\n\n2. Fallback Strategy\n\n```typescript\nasync function processPayment(data) {\n  const providers = ['ORANGE', 'WAVE', 'MTN'];\n  \n  for (const provider of providers) {\n    try {\n      return await lomi.transactions.create({\n        ...data,\n        provider_code: provider\n      });\n    } catch (error) {\n      if (error.code === 'provider_unavailable') {\n        continue; // Try next provider\n      }\n      throw error;\n    }\n  }\n}\n```\n\n3. Provider Health Monitoring\n\n```typescript\n// Monitor provider status\nconst status = await lomi.providers.getStatus('ORANGE');\nif (status.health !== 'healthy') {\n  // Use fallback provider\n}\n```\n\nIntegration Checklist\n\n\n- [ ] Provider account setup\n- [ ] API credentials configuration\n- [ ] Webhook endpoint setup\n- [ ] Test transactions verification\n- [ ] Error handling implementation\n- [ ] Monitoring setup\n- [ ] Production verification\n\nSupport\n\n\nEach provider has dedicated support channels:\n\n- Orange Money: support@orange.com\n- Wave: merchant.support@wave.com\n- MTN: api.support@mtn.com\n\nFor general integration support:\n- Email: support@lomi.africa\n- Documentation: \n- Status page:  ",
    "parentName": "api-reference",
    "path": "api-reference/providers"
  },
  "api-reference/webhooks": {
    "name": "webhooks",
    "content": "Webhooks\n\n\nWebhooks allow your application to receive real-time notifications about events that occur in your Lomi account.\n\nSetting Up Webhooks\n\n\n1. Create a Webhook Endpoint\n\n```typescript\nconst webhook = await lomi.webhooks.create({\n  url: \"\n  authorized_events: [\"TRANSACTION_COMPLETED\", \"REFUND_COMPLETED\"],\n  metadata: { environment: \"production\" }\n});\n```\n\n2. Verify Webhook Signatures\n\n```typescript\nimport { verifyWebhookSignature } from '@lomi/sdk';\n\napp.post('/webhooks', express.raw({type: 'application/json'}), (req, res) => {\n  const signature = req.headers['x-lomi-signature'];\n  \n  try {\n    const event = verifyWebhookSignature(\n      req.body,\n      signature,\n      webhookSecret\n    );\n    handleWebhookEvent(event);\n    res.json({received: true});\n  } catch (err) {\n    res.status(400).send('Webhook signature verification failed');\n  }\n});\n```\n\nEvent Types\n\n\nTransaction Events\n\n| Event | Description |\n|-------|-------------|\n| `TRANSACTION_CREATED` | Transaction has been initiated |\n| `TRANSACTION_COMPLETED` | Payment was successful |\n| `TRANSACTION_FAILED` | Payment attempt failed |\n| `TRANSACTION_EXPIRED` | Payment session expired |\n\nRefund Events\n\n| Event | Description |\n|-------|-------------|\n| `REFUND_CREATED` | Refund has been initiated |\n| `REFUND_COMPLETED` | Refund was successful |\n| `REFUND_FAILED` | Refund attempt failed |\n\nSubscription Events\n\n| Event | Description |\n|-------|-------------|\n| `SUBSCRIPTION_CREATED` | New subscription created |\n| `SUBSCRIPTION_UPDATED` | Subscription details changed |\n| `SUBSCRIPTION_CANCELLED` | Subscription was cancelled |\n| `SUBSCRIPTION_RENEWED` | Recurring payment processed |\n| `SUBSCRIPTION_PAYMENT_FAILED` | Recurring payment failed |\n\nProvider Events\n\n| Event | Description |\n|-------|-------------|\n| `PROVIDER_CONNECTED` | New provider connected |\n| `PROVIDER_DISCONNECTED` | Provider disconnected |\n| `PROVIDER_CREDENTIALS_EXPIRED` | Provider credentials need renewal |\n\nEvent Payloads\n\n\nTransaction Completed\n\n```json\n{\n  \"id\": \"evt_123\",\n  \"type\": \"TRANSACTION_COMPLETED\",\n  \"created_at\": \"2024-01-19T12:00:00Z\",\n  \"data\": {\n    \"transaction_id\": \"txn_123\",\n    \"merchant_id\": \"merchant_123\",\n    \"amount\": 1000,\n    \"currency_code\": \"XOF\",\n    \"status\": \"completed\",\n    \"provider_code\": \"ORANGE\",\n    \"payment_method_code\": \"MOBILE_MONEY\"\n  }\n}\n```\n\nSubscription Renewed\n\n```json\n{\n  \"id\": \"evt_124\",\n  \"type\": \"SUBSCRIPTION_RENEWED\",\n  \"created_at\": \"2024-01-19T12:00:00Z\",\n  \"data\": {\n    \"subscription_id\": \"sub_123\",\n    \"plan_id\": \"plan_123\",\n    \"customer_id\": \"cust_123\",\n    \"transaction_id\": \"txn_124\",\n    \"amount\": 5000,\n    \"currency_code\": \"XOF\",\n    \"next_billing_date\": \"2024-02-19T12:00:00Z\"\n  }\n}\n```\n\nBest Practices\n\n\n1. Implement Idempotency\n\n```typescript\napp.post('/webhooks', async (req, res) => {\n  const eventId = req.body.id;\n  \n  // Check if event was already processed\n  if (await hasProcessedEvent(eventId)) {\n    return res.json({received: true});\n  }\n  \n  // Process the event\n  await handleWebhookEvent(req.body);\n  \n  // Mark event as processed\n  await markEventProcessed(eventId);\n  \n  res.json({received: true});\n});\n```\n\n2. Handle Retries\n\n```typescript\napp.post('/webhooks', async (req, res) => {\n  try {\n    await handleWebhookEvent(req.body);\n    res.json({received: true});\n  } catch (error) {\n    // Return 5xx for retryable errors\n    if (error.isRetryable) {\n      res.status(500).json({error: 'Please retry'});\n    } else {\n      // Return 200 for non-retryable errors to prevent retries\n      res.json({received: true});\n    }\n  }\n});\n```\n\n3. Monitor Webhook Health\n\n```typescript\n// Track failed deliveries\napp.post('/webhooks', async (req, res) => {\n  try {\n    await handleWebhookEvent(req.body);\n    await recordWebhookSuccess(req.body.id);\n  } catch (error) {\n    await recordWebhookFailure(req.body.id, error);\n    throw error;\n  }\n});\n```\n\nTesting Webhooks\n\n\nUsing Test Events\n\n```typescript\n// Create test webhook event\nconst testEvent = await lomi.webhooks.generateTestEvent({\n  type: 'TRANSACTION_COMPLETED',\n  data: {\n    amount: 1000,\n    currency_code: 'XOF'\n  }\n});\n```\n\nLocal Development\n\nWe recommend using tools like [ngrok]( for local webhook testing:\n\n```bash\nStart ngrok\n\nngrok http 3000\n\nUpdate webhook URL\n\ncurl -X PATCH \" \\\n  -H \"X-API-KEY: your_api_key\" \\\n  -d '{\"url\": \"\n```\n\nWebhook Logs\n\n\nView webhook delivery attempts and responses in the [Dashboard](\n- Delivery status\n- Response codes\n- Response bodies\n- Retry attempts\n- Timing information ",
    "parentName": "api-reference",
    "path": "api-reference/webhooks"
  },
  "get-started/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n    \"lomi-basics\": \"Basics\",\n    \"variables\": \"Variables\"\n};\n\nexport default meta;",
    "parentName": "get-started",
    "path": "get-started/_meta"
  },
  "get-started/lomi-basics/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n  \"sign-up\": \"Sign Up\",\n  \"create-merchant-account\": \"Create a Merchant Account\",\n  \"setup-payment-methods\": \"Set Up Payment Methods\",\n  \"process-transactions\": \"Process Transactions\"\n};\n\nexport default meta;",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/_meta"
  },
  "get-started/lomi-basics/create-merchant-account": {
    "name": "create-merchant-account",
    "content": "Merchant Account\n\n\nCreating an Account\n\n\n1. Visit [lomi.africa](\n2. Provide business details:\n   - Legal business name\n   - Tax ID\n   - Country of operation\n   - Contact information\n\nAccount Verification\n\n\nRequired documents:\n- Business registration\n- Owner or legal signatory Government ID\n- Proof of address\n- Bank account details\n\nAPI Access\n\n\nOnce verified, access your API credentials:\n\n```typescript\n// Test Environment\nconst testClient = new LomiSDK({\n  apiKey: 'lomi_sk_test_...',\n  baseUrl: '\n});\n\n// Production Environment\nconst liveClient = new LomiSDK({\n  apiKey: 'lomi_sk_live_...',\n  baseUrl: '\n});\n```\n\nMerchant Information\n\n\nRetrieve merchant details:\n```typescript\nconst merchant = await lomi.merchants.get('merchant_id');\n```\n\nResponse example:\n```json\n{\n  \"merchant_id\": \"mer_123\",\n  \"business_name\": \"Example Corp\",\n  \"country\": \"SN\",\n  \"currency\": \"XOF\",\n  \"status\": \"active\",\n  \"capabilities\": {\n    \"orange_money_payments\": \"active\",\n    \"wave_payments\": \"active\",\n    \"card_payments\": \"pending\"\n  }\n}\n```\n\nNext Steps\n\n\n- [Set Up Payment Methods](./setup-payment-methods)\n- [Process Transactions](./process-transactions)\n- [API Reference](/api-reference)",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/create-merchant-account"
  },
  "get-started/lomi-basics/process-transactions": {
    "name": "process-transactions",
    "content": "Processing Transactions\n\n\nCreating a Checkout Session\n\n\n```typescript\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: 'your_merchant_id',\n  success_url: '\n  cancel_url: '\n  provider_codes: ['ORANGE_MONEY', 'WAVE'],\n  amount: 1000,\n  currency: 'XOF',\n  metadata: {\n    order_id: '123',\n    customer_id: '456'\n  }\n});\n```\n\nListing Transactions\n\n\n```typescript\nconst transactions = await lomi.transactions.list({\n  merchant_id: 'your_merchant_id',\n  status: 'succeeded',  // 'pending' | 'succeeded' | 'failed'\n  provider: 'ORANGE_MONEY',\n  from_date: '2024-01-01T00:00:00Z',\n  to_date: '2024-01-31T23:59:59Z',\n  limit: 100,\n  page: 1\n});\n```\n\nHandling Webhooks\n\n\n```typescript\napp.post('/webhook', express.json(), (req, res) => {\n  try {\n    const event = lomi.webhooks.constructEvent(\n      req.body,\n      req.headers['lomi-signature'],\n      process.env.LOMI_WEBHOOK_SECRET\n    );\n\n    switch (event.type) {\n      case 'payment.succeeded':\n        await handleSuccessfulPayment(event.data);\n        break;\n      case 'payment.failed':\n        await handleFailedPayment(event.data);\n        break;\n      case 'payment.pending':\n        await handlePendingPayment(event.data);\n        break;\n    }\n\n    res.json({ received: true });\n  } catch (err) {\n    res.status(400).json({\n      error: {\n        message: err.message\n      }\n    });\n  }\n});\n```\n\nError Handling\n\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... session parameters\n  });\n} catch (error) {\n  if (error.statusCode === 400) {\n    // Handle validation errors\n    console.error('Validation failed:', error.validationErrors);\n  } else if (error.statusCode === 401) {\n    // Handle authentication errors\n    console.error('Invalid API key');\n  } else {\n    // Handle other errors\n    console.error('Error:', error.message);\n  }\n}\n```\n\nRate Limits\n\n\n- 300 requests per 15 minutes per IP\n- Webhook endpoints must respond within 30 seconds\n- Idempotency keys are valid for 24 hours\n\nBest Practices\n\n\n1. **Idempotency**\n   ```typescript\n   const session = await lomi.checkoutSessions.create({\n     // ... session parameters\n   }, {\n     idempotencyKey: 'unique_request_id'\n   });\n   ```\n\n2. **Metadata**\n   ```typescript\n   const session = await lomi.checkoutSessions.create({\n     // ... session parameters\n     metadata: {\n       order_id: '123',\n       customer_email: 'customer@example.com',\n       product_ids: ['prod_1', 'prod_2']\n     }\n   });\n   ```\n\n3. **Webhook Retries**\n   - Implement exponential backoff\n   - Store failed events for retry\n   - Monitor webhook delivery rates\n\nNext Steps\n\n\n- [API Reference](/api-reference)\n- [Error Codes](/errors)\n- [Testing Guide](/testing)",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/process-transactions"
  },
  "get-started/lomi-basics/setup-payment-methods": {
    "name": "setup-payment-methods",
    "content": "Payment Methods\n\n\nAvailable Providers\n\n\n```typescript\n// List available payment providers\nconst providers = await lomi.providers.list();\n```\n\nResponse example:\n```json\n{\n  \"providers\": [\n    {\n      \"code\": \"ORANGE_MONEY\",\n      \"name\": \"Orange Money\",\n      \"currencies\": [\"XOF\"],\n      \"status\": \"active\"\n    },\n    {\n      \"code\": \"WAVE\",\n      \"name\": \"Wave\",\n      \"currencies\": [\"XOF\"],\n      \"status\": \"active\"\n    },\n    {\n      \"code\": \"MTN\",\n      \"name\": \"MTN Mobile Money\",\n      \"currencies\": [\"XOF\"],\n      \"status\": \"active\"\n    }\n  ]\n}\n```\n\nUsing Providers in Checkout\n\n\n```typescript\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: 'your_merchant_id',\n  provider_codes: ['ORANGE_MONEY', 'WAVE'], // Specify available methods\n  amount: 1000,\n  currency: 'XOF',\n  success_url: '\n  cancel_url: '\n  metadata: {\n    order_id: '123'\n  }\n});\n```\n\nProvider Requirements\n\n\nMobile Money\n\n- **Orange Money**: Requires customer phone number\n- **Wave**: Requires customer phone number\n- **Free Money**: Requires customer phone number\n\nAll mobile money providers:\n- Support XOF currency\n- Require valid phone numbers\n- Process payments in real-time\n\nTesting\n\n\nUse these test credentials:\n\n```typescript\nconst testCredentials = {\n  ORANGE_MONEY: {\n    phone: '771234567',\n    otp: '123456'  // Always succeeds\n  },\n  WAVE: {\n    phone: '771234568',\n    otp: '123456'  // Always succeeds\n  },\n  FREE_MONEY: {\n    phone: '771234569',\n    otp: '123456'  // Always succeeds\n  }\n};\n```\n\nError Handling\n\n\nCommon provider errors:\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... session parameters\n  });\n} catch (error) {\n  switch (error.code) {\n    case 'provider_not_available':\n      // Provider temporarily unavailable\n      break;\n    case 'invalid_phone_number':\n      // Invalid phone number format\n      break;\n    case 'currency_not_supported':\n      // Provider doesn't support the currency\n      break;\n  }\n}\n```\n\nNext Steps\n\n\n- [Process Transactions](./process-transactions)\n- [Testing Guide](/testing)\n- [API Reference](/api-reference)",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/setup-payment-methods"
  },
  "get-started/lomi-basics/sign-up": {
    "name": "sign-up",
    "content": "Getting Started\n\n\nPrerequisites\n\n- Business registration in a supported country\n- Valid email address\n- Technical requirements:\n  - Node.js 14+ for SDK usage\n  - HTTPS endpoint for webhooks\n\nQuick Start\n\n\n1. Account Setup\n\nVisit [lomi.africa]( to create your account.\n\n2. Get Your API Keys\n\n```bash\nTest Environment\n\nexport LOMI_API_KEY=lomi_sk_test_...\n\nProduction Environment\n\nexport LOMI_API_KEY=lomi_sk_live_...\n```\n\n3. Install SDK (Optional)\n\n```bash\nnpm install lomi-node\nor\n\nyarn add lomi-node\n```\n\n4. Make Your First API Call\n\n```typescript\nimport { LomiSDK } from 'lomi-node';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY,\n  baseUrl: process.env.LOMI_API_URL // Optional, defaults to production\n});\n\n// Create a checkout session\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: 'your_merchant_id',\n  success_url: '\n  cancel_url: '\n  provider_codes: ['ORANGE_MONEY', 'WAVE'],\n  amount: 1000,\n  currency: 'XOF'\n});\n```\n\n5. Set Up Webhook\n\n```typescript\nimport express from 'express';\nconst app = express();\n\napp.post('/webhook', express.json(), (req, res) => {\n  const event = lomi.webhooks.constructEvent(\n    req.body,\n    req.headers['lomi-signature'],\n    process.env.WEBHOOK_SECRET\n  );\n  \n  // Handle the event\n  switch (event.type) {\n    case 'payment.success':\n      // Handle successful payment\n      break;\n  }\n  \n  res.json({ received: true });\n});\n```\n\nTesting\n\n\nUse test API keys and these test values:\n```typescript\n// Test phone numbers\nconst testNumbers = {\n  ORANGE_MONEY: '771234567',\n  WAVE: '771234568',\n  FREE_MONEY: '771234569'\n};\n\n// Test card\nconst testCard = {\n  number: '4242424242424242',\n  exp_month: 12,\n  exp_year: 2024,\n  cvc: '123'\n};\n```\n\nGo Live Checklist\n\n\n1. ✓ Complete business verification\n2. ✓ Set up webhook endpoint with HTTPS\n3. ✓ Test all payment methods\n4. ✓ Switch to live API keys\n5. ✓ Update webhook URL in dashboard\n6. ✓ Implement proper error handling\n\nNext Steps\n\n\n- [Process Transactions](./process-transactions)\n- [API Reference](/api-reference)\n- [Error Handling](/errors)\n\nSupport\n\n\n- Technical issues: [hello@lomi.africa](mailto:hello@lomi.africa)\n- API Status: [status.lomi.africa](\n- Schedule call: [Book Demo](\n",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/sign-up"
  },
  "get-started/variables/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n\t\"overview\": \"Overview\",\n\t\"api-keys\": \"API Keys\"\n};\n\nexport default meta;",
    "parentName": "get-started",
    "path": "get-started/variables/_meta"
  },
  "get-started/variables/api-keys": {
    "name": "api-keys",
    "content": "API Keys\n\n\nAPI keys are used to authenticate your requests to the lomi. API. Each key has a prefix that indicates its environment:\n- Test keys start with `lomi_sk_test_`\n- Live keys start with `lomi_sk_`\n\nTypes of Keys\n\n\n1. **Test Keys**\n   - Use for development and testing\n   - No real transactions processed\n   - Test credentials always work\n\n2. **Live Keys**\n   - Use for production environment\n   - Real transactions processed\n   - Must complete verification first\n\nUsing API Keys\n\n\nInclude your API key in the `x-api-key` header with every request:\n\n```typescript\n// Using the SDK\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY\n});\n\n// Direct API calls\nconst headers = {\n  'x-api-key': process.env.LOMI_API_KEY,\n  'Content-Type': 'application/json'\n};\n\nconst response = await fetch(' {\n  method: 'POST',\n  headers,\n  body: JSON.stringify({\n    // request body\n  })\n});\n```\n\nKey Management\n\n\nEnvironment Variables\n\n```bash\n.env.development\n\nLOMI_API_KEY=lomi_sk_test_...\n\n.env.production\n\nLOMI_API_KEY=lomi_sk_live_...\n```\n\nSecurity Best Practices\n\n\n1. **Key Storage**\n   - Never commit API keys to version control\n   - Use environment variables\n   - Use secrets management in production\n\n2. **Access Control**\n   - Keep keys secure and private\n   - Don't share keys between applications\n   - Rotate keys periodically\n\n3. **Environment Separation**\n   - Use test keys for development\n   - Use live keys only in production\n   - Validate environment before deployment\n\nError Handling\n\n\nCommon API key errors:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  });\n} catch (error) {\n  switch (error.statusCode) {\n    case 401:\n      console.error('Invalid or missing API key');\n      break;\n    case 403:\n      console.error('API key does not have required permissions');\n      break;\n  }\n}\n```\n\nRate Limits\n\n\n- 100 requests per 15 minutes per IP\n- Applies to both test and live keys\n- Rate limit headers included in responses\n\nNext Steps\n\n\n- [Security Best Practices](/advanced-guides/security-best-practices)\n- [Error Handling](/advanced-guides/error-handling)\n- [API Reference](/api-reference) ",
    "parentName": "get-started",
    "path": "get-started/variables/api-keys"
  },
  "get-started/variables/overview": {
    "name": "overview",
    "content": "Variables\n\n\nAPI Keys\n\n\nTest Keys\n\n```bash\nFormat: lomi_sk_test_[random_string]\n\nexport LOMI_API_KEY=lomi_sk_test_abc123...\n```\n\nLive Keys\n\n```bash\nFormat: lomi_sk_live_[random_string]\n\nexport LOMI_API_KEY=lomi_sk_live_xyz789...\n```\n\nEnvironment Variables\n\n\nRequired Variables\n\n```bash\nAPI Authentication\n\nLOMI_API_KEY=your_api_key\n\nWebhook Security\n\nLOMI_WEBHOOK_SECRET=your_webhook_secret\n```\n\nOptional Variables\n\n```bash\nEnvironment Selection\n\nLOMI_API_URL=  # Production (default)\nLOMI_API_URL=  # Sandbox\n\nTimeouts\n\nLOMI_TIMEOUT=30000  # API request timeout in ms\n```\n\nUsage Examples\n\n\nNode.js SDK\n\n```typescript\nimport { LomiSDK } from 'lomi-node';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY,\n  baseUrl: process.env.LOMI_API_URL,\n  timeout: parseInt(process.env.LOMI_TIMEOUT || '30000')\n});\n```\n\nDirect API Calls\n\n```typescript\nconst headers = {\n  'x-api-key': process.env.LOMI_API_KEY,\n  'Content-Type': 'application/json'\n};\n\nconst response = await fetch(' {\n  method: 'POST',\n  headers,\n  body: JSON.stringify({\n    merchant_id: process.env.LOMI_MERCHANT_ID,\n    // ... other parameters\n  })\n});\n```\n\nWebhook Verification\n\n```typescript\nconst isValid = lomi.webhooks.verifySignature(\n  payload,\n  headers['lomi-signature'],\n  process.env.LOMI_WEBHOOK_SECRET\n);\n```\n\nSecurity Best Practices\n\n\n1. **API Keys**\n   - Never commit keys to version control\n   - Use different keys for test/live environments\n   - Rotate keys periodically\n   - Restrict key access to necessary team members\n\n2. **Environment Files**\n   ```bash\n   # .env.example\n   LOMI_API_KEY=\n   LOMI_WEBHOOK_SECRET=\n   LOMI_API_URL=\n   \n   # .gitignore\n   .env\n   .env.local\n   ```\n\n3. **CI/CD Security**\n   - Use secret management services\n   - Encrypt environment variables\n   - Regular security audits\n\nNeed Help?\n\n\n- [API Reference](/api-reference)\n- [Security Guide](/security)\n- [Support](mailto:hello@lomi.africa)",
    "parentName": "get-started",
    "path": "get-started/variables/overview"
  },
  "git-integration/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"getting-started\": \"Getting Started\",\n  \"contributing-guidelines\": \"Contributing Guidelines\",\n  \"bounty-program\": \"Bounty Program\",\n  \"code-of-conduct\": \"Code of Conduct\",\n  \"code-reviews\": \"Code Reviews\",\n  \"branching-strategy\": \"Branching\",\n  \"versioning\": \"Versioning\"\n};\n\nexport default meta;",
    "parentName": "git-integration",
    "path": "git-integration/_meta"
  },
  "git-integration/best-practices": {
    "name": "best-practices",
    "content": "Best Practices\n\n\nCode Organization\n\n\n1. Project Structure\n\n```bash\napi.lomi.africa/\n├── src/\n│   ├── controllers/   # Request handlers\n│   ├── services/      # Business logic\n│   ├── models/        # Data models\n│   ├── middleware/    # Express middleware\n│   └── utils/         # Helper functions\n├── tests/\n│   ├── unit/         # Unit tests\n│   └── integration/  # Integration tests\n└── scripts/          # Build and utility scripts\n```\n\n2. File Naming\n\n```bash\nTypeScript files\n\nuser.controller.ts\npayment.service.ts\nwebhook.middleware.ts\n\nTest files\n\nuser.test.ts\npayment.integration.test.ts\n```\n\nCode Style\n\n\n1. TypeScript Usage\n\n```typescript\n// Use interfaces for type definitions\ninterface PaymentRequest {\n  amount: number;\n  currency: string;\n  provider_code: string;\n}\n\n// Use type guards\nfunction isPaymentRequest(obj: unknown): obj is PaymentRequest {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'amount' in obj &&\n    'currency' in obj &&\n    'provider_code' in obj\n  );\n}\n```\n\n2. Error Handling\n\n```typescript\n// Custom error classes\nclass ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\n// Error handling middleware\napp.use((error: Error, req: Request, res: Response) => {\n  if (error instanceof ValidationError) {\n    res.status(400).json({ error: error.message });\n  } else {\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\nSecurity\n\n\n1. Environment Variables\n\n```bash\n.env.example\n\nLOMI_API_KEY=\nLOMI_WEBHOOK_SECRET=\nNODE_ENV=development\n\n.gitignore\n\n.env\n.env.local\n*.log\n```\n\n2. Sensitive Data\n\n```typescript\n// Redact sensitive information in logs\nconst sanitizeData = (data: any) => {\n  const masked = { ...data };\n  if (masked.apiKey) masked.apiKey = '[REDACTED]';\n  if (masked.phoneNumber) masked.phoneNumber = '[REDACTED]';\n  return masked;\n};\n```\n\nTesting\n\n\n1. Test Organization\n\n```typescript\ndescribe('PaymentService', () => {\n  describe('createPayment', () => {\n    it('should create payment with valid data', async () => {\n      // Test implementation\n    });\n\n    it('should handle validation errors', async () => {\n      // Test implementation\n    });\n  });\n});\n```\n\n2. Test Coverage\n\n```bash\nRun coverage report\n\nnpm run test:coverage\n\nCoverage thresholds in jest.config.ts\n\ncoverageThreshold: {\n  global: {\n    branches: 80,\n    functions: 80,\n    lines: 80\n  }\n}\n```\n\nGit Workflow\n\n\n1. Branch Management\n\n```bash\nKeep branches focused and short-lived\n\ngit checkout -b feature/add-wave-provider\ngit commit -m \"feat(payments): implement Wave provider\"\ngit push origin feature/add-wave-provider\n```\n\n2. Commit Messages\n\n```bash\nFormat: (): \n\nfeat(auth): add API key rotation\nfix(webhook): handle timeout errors\ndocs(api): update authentication guide\n```\n\nDocumentation\n\n\n1. Code Comments\n\n```typescript\n/**\n * Process a payment request\n * @param request - Payment request details\n * @returns Promise resolving to payment result\n * @throws {ValidationError} If request is invalid\n */\nasync function processPayment(\n  request: PaymentRequest\n): Promise {\n  // Implementation\n}\n```\n\n2. README Files\n\n```markdown\nComponent Name\n\n\nOverview\n\nBrief description of the component's purpose\n\nUsage\n\nCode examples and usage instructions\n\nConfiguration\n\nAvailable configuration options\n\nTesting\n\nHow to run and write tests\n```\n\nDeployment\n\n\n1. CI/CD\n\n```yaml\n.github/workflows/ci.yml\n\nname: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: npm ci\n      - run: npm test\n```\n\n2. Version Control\n\n```json\n{\n  \"name\": \"@lomi/api\",\n  \"version\": \"1.2.3\",\n  \"engines\": {\n    \"node\": \">=14\"\n  }\n}\n```\n\nNext Steps\n\n\n- [Code Reviews](./code-reviews)\n- [Contributing Guidelines](./contributing-guidelines)\n- [Security Best Practices](/advanced-guides/security-best-practices) ",
    "parentName": "git-integration",
    "path": "git-integration/best-practices"
  },
  "git-integration/bounty-program": {
    "name": "bounty-program",
    "content": "Bounty Program\n\n\n> Coming Soon! We're working on launching our bounty program to reward community contributions.\n\nOverview\n\n\nThe lomi. bounty program will reward developers for:\n- Implementing new payment providers\n- Adding new features\n- Fixing critical bugs\n- Improving security\n- Enhancing documentation\n\nProgram Structure\n\n\n1. Reward Tiers\n\n```typescript\ninterface BountyTier {\n  level: 'easy' | 'medium' | 'hard';\n  reward: number;  // USD\n  timeframe: string;\n}\n\nconst tiers = {\n  easy: {\n    reward: 100,\n    timeframe: '1-2 weeks'\n  },\n  medium: {\n    reward: 250,\n    timeframe: '2-4 weeks'\n  },\n  hard: {\n    reward: 500,\n    timeframe: '4-8 weeks'\n  }\n};\n```\n\n2. Focus Areas\n\n- Payment Integration\n- Security Improvements\n- Performance Optimization\n- Developer Experience\n- Documentation\n\nHow It Will Work\n\n\n1. Issue Selection\n\n```bash\nIssues will be labeled\n\ngood-first-issue\nbounty-easy\nbounty-medium\nbounty-hard\n```\n\n2. Claiming Process\n\n```typescript\ninterface BountyClaim {\n  issue_id: string;\n  developer_id: string;\n  proposal: string;\n  timeline: string;\n}\n```\n\n3. Submission Requirements\n\n- Clean, tested code\n- Documentation updates\n- Test coverage\n- Security considerations\n\nPayment Process\n\n\n1. Review Criteria\n\n```typescript\ninterface ReviewChecklist {\n  code_quality: boolean;\n  test_coverage: boolean;\n  documentation: boolean;\n  security: boolean;\n}\n```\n\n2. Payment Methods\n\n- PayPal\n- Bank Transfer\n- Crypto (selected currencies)\n\nStay Updated\n\n\nTo be notified when the bounty program launches:\n\n1. Star our repository\n2. Watch for announcements\n3. Join our community:\n   - [GitHub Discussions](\n   - [Twitter](\n   - [Discord]( (Coming Soon)\n\nNext Steps\n\n\n- [Contributing Guidelines](./contributing-guidelines)\n- [Code of Conduct](./code-of-conduct)\n- [Best Practices](./best-practices) ",
    "parentName": "git-integration",
    "path": "git-integration/bounty-program"
  },
  "git-integration/branching-strategy": {
    "name": "branching-strategy",
    "content": "Branching Strategy\n\n\nWe follow a modified GitFlow workflow that emphasizes simplicity and continuous delivery.\n\nMain Branches\n\n\n`main` Branch\n\n- Production-ready code\n- Protected branch\n- Requires pull request and review\n- Tagged with version numbers\n- Automated deployments to production\n\n`develop` Branch\n\n- Integration branch\n- Latest development changes\n- Automated deployments to staging\n- CI runs all tests\n\nFeature Development\n\n\nFeature Branches\n\n```bash\nCreate feature branch\n\ngit checkout develop\ngit checkout -b feature/payment-method-wave\n\nKeep updated with develop\n\ngit fetch origin\ngit rebase origin/develop\n\nPush changes\n\ngit push origin feature/payment-method-wave\n```\n\nBug Fix Branches\n\n```bash\nCreate bug fix branch\n\ngit checkout develop\ngit checkout -b fix/transaction-timeout\n\nAfter testing\n\ngit push origin fix/transaction-timeout\n```\n\nRelease Process\n\n\nRelease Branches\n\n```bash\nCreate release branch\n\ngit checkout develop\ngit checkout -b release/1.2.0\n\nVersion bump and final testing\n\nnpm version minor\ngit push origin release/1.2.0\n```\n\nHotfix Branches\n\n```bash\nCreate hotfix branch\n\ngit checkout main\ngit checkout -b hotfix/1.2.1\n\nFix critical bug\n\nnpm version patch\ngit push origin hotfix/1.2.1\n```\n\nBranch Protection Rules\n\n\n1. **`main` Branch**\n   - Require pull request reviews\n   - Require status checks to pass\n   - No direct pushes\n   - Linear history (rebase merging)\n\n2. **`develop` Branch**\n   - Require status checks to pass\n   - Allow rebase merging\n   - Automated test suite must pass\n\nMerge Strategy\n\n\n1. **Feature to Develop**\n   ```bash\n   git checkout develop\n   git pull origin develop\n   git merge --no-ff feature/payment-method-wave\n   git push origin develop\n   ```\n\n2. **Release to Main**\n   ```bash\n   git checkout main\n   git pull origin main\n   git merge --no-ff release/1.2.0\n   git tag -a v1.2.0 -m \"Version 1.2.0\"\n   git push origin main --tags\n   ```\n\nBest Practices\n\n\n1. **Branch Naming**\n   - `feature/*` - New features\n   - `fix/*` - Bug fixes\n   - `release/*` - Release preparation\n   - `hotfix/*` - Emergency fixes\n   - Use descriptive names\n\n2. **Commit Messages**\n   ```bash\n   # Format\n   (): \n\n   # Examples\n   feat(payments): add Wave payment method\n   fix(webhooks): handle timeout errors\n   docs(api): update authentication guide\n   ```\n\n3. **Code Review**\n   - Create detailed pull requests\n   - Add relevant labels\n   - Link related issues\n   - Request specific reviewers\n\nNext Steps\n\n\n- [Code Reviews](./code-reviews)\n- [Versioning](./versioning)\n- [Contributing Guidelines](./contributing-guidelines) ",
    "parentName": "git-integration",
    "path": "git-integration/branching-strategy"
  },
  "git-integration/code-of-conduct": {
    "name": "code-of-conduct",
    "content": "Code of Conduct\n\n\nOur Pledge\n\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\n\nOur Standards\n\n\nPositive Behavior\n\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nUnacceptable Behavior\n\n\n- The use of sexualized language or imagery\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information without explicit permission\n- Other conduct which could reasonably be considered inappropriate\n\nEnforcement Responsibilities\n\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nScope\n\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.\n\nEnforcement\n\n\n1. Correction\n\n```bash\nPrivate message\n\n\"Your comment [link] was inappropriate because...\"\n```\n\n2. Warning\n\n```bash\nOfficial warning\n\n\"This is a formal warning. Further violations will result in...\"\n```\n\n3. Temporary Ban\n\n```bash\nTemporary restriction\n\n\"Your access has been restricted for [duration] due to...\"\n```\n\n4. Permanent Ban\n\n```bash\nPermanent restriction\n\n\"Due to repeated violations, your access has been permanently revoked.\"\n```\n\nReporting Guidelines\n\n\n1. Contact Information\n\n\n- Email: conduct@lomi.africa\n- GitHub: Open an issue with `[COC]` prefix\n- Slack: Direct message to @moderators\n\n2. Report Format\n\n\n```markdown\nIncident Report\n\n- Date/Time: [When it occurred]\n- Location: [Where it occurred]\n- Description: [What happened]\n- Evidence: [Links/Screenshots]\n- Witnesses: [If any]\n```\n\n3. Response Time\n\n\n- Initial response: Within 24 hours\n- Investigation: 1-7 days\n- Resolution: As soon as investigation completes\n\nAttribution\n\n\nThis Code of Conduct is adapted from the [Contributor Covenant]( version 2.1, available at [\n\nAcknowledgments\n\n\nWe thank all contributors who help maintain a positive community environment.\n\nNext Steps\n\n\n- [Contributing Guidelines](./contributing-guidelines)\n- [Best Practices](./best-practices)\n- [Support](mailto:hello@lomi.africa) ",
    "parentName": "git-integration",
    "path": "git-integration/code-of-conduct"
  },
  "git-integration/code-reviews": {
    "name": "code-reviews",
    "content": "Code Reviews\n\n\nOur code review process ensures code quality, knowledge sharing, and maintainability.\n\nPull Request Guidelines\n\n\n1. Title Format\n\n```bash\nFormat\n\n(): \n\nExamples\n\nfeat(payments): implement Wave payment provider\nfix(webhooks): handle timeout errors\ndocs(api): update authentication guide\n```\n\n2. Description Template\n\n```markdown\nChanges\n\n- Added Wave payment provider integration\n- Implemented webhook signature verification\n- Updated API documentation\n\nTesting\n\n- Unit tests added for payment processing\n- Integration tests for webhook handling\n- Manual testing with test credentials\n\nScreenshots\n\n[If applicable]\n\nRelated Issues\n\nCloses #123\n```\n\nReview Process\n\n\n1. Self Review\n\n```bash\nRun tests\n\nnpm test\n\nCheck linting\n\nnpm run lint\n\nBuild documentation\n\nnpm run docs:build\n```\n\n2. Code Review\n\n- Request reviews from relevant team members\n- Address feedback promptly\n- Re-request review after changes\n\n3. CI Checks\n\n- All tests must pass\n- Code coverage requirements met\n- No security vulnerabilities\n- Documentation updated\n\nReview Checklist\n\n\n1. Code Quality\n\n- [ ] Follows coding standards\n- [ ] No duplicate code\n- [ ] Proper error handling\n- [ ] Efficient implementation\n\n2. Testing\n\n- [ ] Unit tests added/updated\n- [ ] Integration tests if needed\n- [ ] Edge cases covered\n- [ ] Test coverage maintained\n\n3. Security\n\n- [ ] Input validation\n- [ ] Authentication/Authorization\n- [ ] Sensitive data handling\n- [ ] Security best practices\n\n4. Documentation\n\n- [ ] Code comments\n- [ ] API documentation\n- [ ] README updates\n- [ ] Changelog entry\n\nBest Practices\n\n\n1. As a Submitter\n\n```typescript\n// DO: Small, focused changes\nfunction validatePayment(amount: number): boolean {\n  return amount > 0 && amount  0;\n}\n\n// Unhelpful feedback\n// This is wrong\n```\n\n3. Code Examples\n\n```typescript\n// Before\nfunction process(data) {\n  if (data) {\n    return data.value;\n  }\n}\n\n// After\nfunction process(data: InputData): OutputData {\n  if (!data) {\n    throw new Error('Data is required');\n  }\n  return data.value;\n}\n```\n\nReview Comments\n\n\n1. Constructive Feedback\n\n```typescript\n// Instead of:\n// This is messy\n\n// Better:\n// Consider extracting this logic into a separate function\n// for better reusability and testing:\nfunction validateWebhookSignature(\n  payload: string,\n  signature: string\n): boolean {\n  // Implementation\n}\n```\n\n2. Suggestions\n\n```typescript\n// Instead of:\n// Use better names\n\n// Better:\n// Consider more descriptive names:\n// - `processPayment` -> `validateAndProcessPayment`\n// - `data` -> `paymentData`\n```\n\nAfter Review\n\n\n1. Addressing Feedback\n\n```bash\nUpdate branch\n\ngit fetch origin\ngit rebase origin/develop\n\nMake changes\n\ngit add .\ngit commit -m \"fix: address review feedback\"\n\nForce push if needed\n\ngit push --force-with-lease\n```\n\n2. Merging\n\n```bash\nSquash and merge\n\ngit checkout develop\ngit merge --squash feature/payment-method\n\nOr rebase and merge\n\ngit checkout develop\ngit rebase feature/payment-method\n```\n\nNext Steps\n\n\n- [Contributing Guidelines](./contributing-guidelines)\n- [Branching Strategy](./branching-strategy)\n- [Best Practices](./best-practices) ",
    "parentName": "git-integration",
    "path": "git-integration/code-reviews"
  },
  "git-integration/contributing-guidelines": {
    "name": "contributing-guidelines",
    "content": "Contributing Guidelines\n\n\nThank you for your interest in contributing to lomi. This guide will help you get started.\n\nGetting Started\n\n\n1. Development Setup\n\n\n```bash\nClone repository\n\ngit clone \ncd api\n\nInstall dependencies\n\nnpm install\n\nSet up environment\n\ncp .env.example .env\n```\n\n2. Running Tests\n\n\n```bash\nRun all tests\n\nnpm test\n\nRun specific tests\n\nnpm test -- --grep \"payment\"\n\nRun with coverage\n\nnpm run test:coverage\n```\n\n3. Local Development\n\n\n```bash\nStart development server\n\nnpm run dev\n\nBuild documentation\n\nnpm run docs:dev\n\nRun linting\n\nnpm run lint\n```\n\nContributing Process\n\n\n1. Find an Issue\n\n- Check [open issues](\n- Look for `good first issue` label\n- Ask questions if needed\n\n2. Fork and Clone\n\n```bash\nFork via GitHub UI\n\n\nClone your fork\n\ngit clone \ncd api\n\nAdd upstream remote\n\ngit remote add upstream \n```\n\n3. Create Branch\n\n```bash\nUpdate main\n\ngit checkout main\ngit pull upstream main\n\nCreate branch\n\ngit checkout -b feature/my-contribution\n```\n\n4. Make Changes\n\n```bash\nMake your changes\n\ngit add .\ngit commit -m \"feat: add new feature\"\n\nKeep branch updated\n\ngit fetch upstream\ngit rebase upstream/main\n```\n\n5. Submit PR\n\n- Push changes to your fork\n- Create pull request\n- Fill out PR template\n- Request review\n\nCode Standards\n\n\n1. TypeScript\n\n```typescript\n// Use TypeScript for type safety\ninterface PaymentRequest {\n  amount: number;\n  currency: string;\n  provider_code: string;\n}\n\nfunction processPayment(request: PaymentRequest): Promise {\n  // Implementation\n}\n```\n\n2. Testing\n\n```typescript\ndescribe('Payment Processing', () => {\n  it('should process valid payment', async () => {\n    const request = {\n      amount: 1000,\n      currency: 'XOF',\n      provider_code: 'ORANGE_MONEY'\n    };\n    \n    const result = await processPayment(request);\n    expect(result).toBeDefined();\n  });\n});\n```\n\n3. Documentation\n\n```typescript\n/**\n * Process a payment request\n * @param request - Payment request details\n * @returns Promise resolving to payment result\n * @throws {ValidationError} If request is invalid\n * @throws {PaymentError} If payment processing fails\n */\nasync function processPayment(\n  request: PaymentRequest\n): Promise {\n  // Implementation\n}\n```\n\nPull Request Guidelines\n\n\n1. Title Format\n\n```bash\n(): \n\nExamples\n\nfeat(payments): add Wave provider support\nfix(webhooks): handle timeout errors\ndocs(api): update authentication guide\n```\n\n2. Description\n\n```markdown\nChanges\n\n- Added Wave payment provider\n- Implemented webhook handling\n- Updated documentation\n\nTesting\n\n- Added unit tests\n- Manual testing completed\n- All CI checks passing\n\nRelated Issues\n\nCloses #123\n```\n\nReview Process\n\n\n1. Before Submitting\n\n- [ ] Tests passing\n- [ ] Code linted\n- [ ] Documentation updated\n- [ ] Commits squashed\n\n2. During Review\n\n- Respond to feedback\n- Make requested changes\n- Keep PR updated\n\n3. After Merge\n\n- Delete branch\n- Update related issues\n- Monitor deployment\n\nBest Practices\n\n\n1. Commits\n\n```bash\nGood\n\ngit commit -m \"feat(auth): add API key rotation\"\n\nBad\n\ngit commit -m \"fixed stuff\"\n```\n\n2. Code Style\n\n```typescript\n// Good\nfunction validateAmount(amount: number): boolean {\n  return amount > 0 && amount 0&&a<=1000000;\n}\n```\n\n3. Error Handling\n\n```typescript\n// Good\ntry {\n  await processPayment(request);\n} catch (error) {\n  if (error instanceof ValidationError) {\n    // Handle validation error\n  } else if (error instanceof PaymentError) {\n    // Handle payment error\n  } else {\n    // Handle unknown error\n  }\n}\n\n// Bad\ntry {\n  await processPayment(request);\n} catch (error) {\n  console.error(error);\n}\n```\n\nNext Steps\n\n\n- [Code of Conduct](./code-of-conduct)\n- [Branching Strategy](./branching-strategy)\n- [Code Reviews](./code-reviews) ",
    "parentName": "git-integration",
    "path": "git-integration/contributing-guidelines"
  },
  "git-integration/overview": {
    "name": "overview",
    "content": "Git Integration Overview\n\n\nThis section covers how to contribute to lomi.'s open-source projects and integrate with our version control system.\n\nRepository Structure\n\n\n```bash\napi.lomi.africa/\n├── src/           # Source code\n├── tests/         # Test files\n├── scripts/       # Build and utility scripts\n├── openapi/       # API specifications\n└── docs/          # Documentation\n```\n\nKey Concepts\n\n\n1. **Branching Strategy**\n   - `main` - Production-ready code\n   - `develop` - Integration branch\n   - `feature/*` - New features\n   - `fix/*` - Bug fixes\n   - `release/*` - Release preparation\n\n2. **Version Control**\n   - Semantic versioning\n   - Automated releases\n   - Changelog management\n\n3. **Quality Control**\n   - Automated testing\n   - Code review process\n   - CI/CD pipelines\n\nGetting Started\n\n\n1. Fork the repository\n2. Clone your fork\n3. Set up development environment\n4. Create feature branch\n5. Submit pull request\n\nNext Steps\n\n\n- [Getting Started](./getting-started)\n- [Contributing Guidelines](./contributing-guidelines)\n- [Code of Conduct](./code-of-conduct)",
    "parentName": "git-integration",
    "path": "git-integration/overview"
  },
  "git-integration/using-cli": {
    "name": "using-cli",
    "content": "Using Git CLI for Collaboration\n\n\nWhen collaborating on your lomi. integration using Git, you can use the command-line interface (CLI) to perform various Git operations. This allows you to manage your integration code and configurations effectively.\n\nInitializing a Git Repository\n\n\nTo get started, initialize a Git repository in the directory where your integration code and configuration files are stored:\n\n```bash\ngit init\n```\n\nStaging and Committing Changes\n\n\nAfter making changes to your integration code or configurations, stage the changes using the `git add` command:\n\n```bash\ngit add .\n```\n\nThen, commit the changes with a descriptive message:\n\n```bash\ngit commit -m \"Update payment provider configuration\"\n```\n\nPushing Changes to a Remote Repository\n\n\nTo collaborate with your team, push your changes to a remote repository:\n\n```bash\ngit push origin main\n```\n\nReplace `main` with the appropriate branch name if you're using a different branching strategy.\n\nPulling Changes from a Remote Repository\n\n\nTo get the latest changes made by your team members, pull the changes from the remote repository:\n\n```bash\ngit pull origin main\n```\n\nAgain, replace `main` with the appropriate branch name if necessary.\n\nResolving Merge Conflicts\n\n\nIf you encounter merge conflicts when pulling changes, you'll need to resolve them manually. Open the conflicting files, make the necessary changes, and then stage and commit the resolved files:\n\n```bash\ngit add resolved_file.js\ngit commit -m \"Resolve merge conflicts\"\n```\n\nBest Practices\n\n\n- Commit frequently with descriptive messages\n- Use branches for developing new features or configurations\n- Regularly pull changes from the remote repository to stay up-to-date\n- Resolve merge conflicts carefully and communicate with your team\n\nBy using the Git CLI effectively and following best practices, you can collaborate smoothly with your team on your lomi. integration.\n",
    "parentName": "git-integration",
    "path": "git-integration/using-cli"
  },
  "git-integration/versioning": {
    "name": "versioning",
    "content": "Versioning\n\n\nWe follow Semantic Versioning (SemVer) for all our packages and APIs.\n\nVersion Format\n\n\n```bash\nMAJOR.MINOR.PATCH\nExample: 1.2.3\n\n```\n\n- **MAJOR**: Breaking changes\n- **MINOR**: New features (backward compatible)\n- **PATCH**: Bug fixes (backward compatible)\n\nVersion Management\n\n\nNPM Version\n\n\n```bash\nPatch release\n\nnpm version patch\n1.2.3 -> 1.2.4\n\n\nMinor release\n\nnpm version minor\n1.2.3 -> 1.3.0\n\n\nMajor release\n\nnpm version major\n1.2.3 -> 2.0.0\n\n```\n\nGit Tags\n\n\n```bash\nCreate annotated tag\n\ngit tag -a v1.2.3 -m \"Version 1.2.3\"\n\nPush tags\n\ngit push origin --tags\n```\n\nRelease Process\n\n\n1. **Update Version**\n   ```bash\n   # Update package.json\n   npm version minor\n\n   # Update changelog\n   git cliff -o CHANGELOG.md\n   \n   # Commit changes\n   git add CHANGELOG.md\n   git commit -m \"chore: update changelog\"\n   ```\n\n2. **Create Release**\n   ```bash\n   # Create GitHub release\n   gh release create v1.2.3 \\\n     --title \"Version 1.2.3\" \\\n     --notes-file CHANGELOG.md\n   ```\n\nAPI Versioning\n\n\nURL Versioning\n\n\n```bash\nCurrent version\n\n\n\nFuture version\n\n\n```\n\nVersion Lifecycle\n\n\n1. **Active**\n   - Latest version\n   - Full support\n   - Regular updates\n\n2. **Maintained**\n   - Previous version\n   - Security updates\n   - Bug fixes only\n\n3. **Deprecated**\n   - Old version\n   - Limited support\n   - Migration required\n\nBreaking Changes\n\n\n1. **Notification**\n   - Advance notice (minimum 6 months)\n   - Migration guide\n   - Deprecation warnings\n\n2. **Documentation**\n   - Version comparison\n   - Migration steps\n   - Code examples\n\n3. **Support**\n   - Migration assistance\n   - Legacy version support\n   - Transition period\n\nVersion Control\n\n\nPackage Files\n\n\n```json\n{\n  \"name\": \"@lomi/sdk\",\n  \"version\": \"1.2.3\",\n  \"engines\": {\n    \"node\": \">=14\"\n  }\n}\n```\n\nLock Files\n\n\n```bash\nNPM\n\npackage-lock.json\n\nYarn\n\nyarn.lock\n```\n\nBest Practices\n\n\n1. **Version Numbers**\n   - Use semantic versioning\n   - Document changes\n   - Keep changelog updated\n\n2. **Dependencies**\n   - Pin exact versions\n   - Regular updates\n   - Security audits\n\n3. **Release Notes**\n   - Clear descriptions\n   - Breaking changes\n   - Upgrade guide\n\nNext Steps\n\n\n- [Contributing Guidelines](./contributing-guidelines)\n- [API Reference](/api-reference)\n- [Changelog]( ",
    "parentName": "git-integration",
    "path": "git-integration/versioning"
  },
  "introduction/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n    \"what-is-lomi\": \"What is lomi.?\",\n    \"manifesto\": \"Manifesto\",\n    \"feedback-community\": \"Feedback and Community\"\n};\n\nexport default meta;",
    "parentName": "introduction",
    "path": "introduction/_meta"
  },
  "introduction/feedback-community": {
    "name": "feedback-community",
    "content": "Feedback & Community \n\n\nAt lomi., we believe that the best products are built together with their  community of users. Our growth and evolution are driven by real merchant needs.\n\nHelp us continue building West Africa's most comprehensive and merchant-friendly payment orchestration platform!\n\n**Share Your Experience**\n- Report bugs and suggest features on [GitHub](\n- Support us and share your integration success stories on [Product hunt](\n- Help improve our documentation via [GitHub](\n- Request features and participate in our product discussions on [X](\n\n**Build With Us**\n- Contribute to our [open source platform](\n- Create and share plugins/extensions\n- Help other developers in the community\n- Submit pull requests\n\n**Stay Connected**\n- Join our [Slack community](\n- Access our [Blog]( for updates\n- Attend our community events (stay tuned!)\n- Follow us on [Linkedin](\n- Create an account on [lomi.](\n\nSupport Channels\n\n\n**Developer Support**\n- Developer support via [Slack](\n- Code examples and tutorials here — [Recipes](\n- Integration assistance\n\n**Business Support**\n- 24/7 merchant support — [hello@lomi.africa](mailto:hello@lomi.africa)\n- Partnership inquiries — [hello@lomi.africa](mailto:hello@lomi.africa)",
    "parentName": "introduction",
    "path": "introduction/feedback-community"
  },
  "introduction/manifesto": {
    "name": "manifesto",
    "content": "Manifesto\n\n\nThe time has come to transform payment processing across West Africa.\n\nWe believe that accepting payments shouldn't be complex, regardless of where you operate or what payment methods your customers prefer. The fragmented payment landscape creates unnecessary barriers and friction for businesses trying to grow.\n\nlomi. addresses these challenges with an open approach to payment orchestration. We \nbelieve that:\n- Every business, regardless of size, can easily and should sell online\n- Merchants focus on growing their business, not wrestling with payment infrastructure\n- Innovation in financial services must be accessible to all\n- Payment solutions must be built by and for our local ecosystem\n\nOur Principles\n\n\nTo achieve this vision, we've built lomi. on these foundational principles:\n\n**Merchant First**\n- Your success is our success\n- Every feature we build solves a real merchant need\n- Pricing is transparent and fair\n- Your feedbacks drives our roadmap\n\n**Local Context Matters**\n- Built specifically for West African markets\n- Deep understanding of local payment behaviors\n- Adapted to local infrastructure realities\n- Partnerships with key regional players\n\n**Community Driven**\n- Open source is more than code sharing\n- Community contributions are valued and recognized\n- Knowledge sharing is essential\n\n**Long-term Commitment**\n- Building sustainable payment infrastructure\n- Investing in the local tech ecosystem\n- Growing with our merchants\n- Continuous innovation and improvement\n\nJoin us in our mission to simplify payment processing across West Africa.\n\nOpen Source\n\n\nWe believe in the power of open source to drive innovation and collaboration. By making our platform open source, we:\n\n- Foster transparency and trust with our merchants and partners\n- Encourage community contributions to continuously enhance the platform\n- Enable developers to extend and customize lomi. to suit their unique needs",
    "parentName": "introduction",
    "path": "introduction/manifesto"
  },
  "introduction/what-is-lomi": {
    "name": "what-is-lomi",
    "content": "What is lomi.?\n\n\nlomi. is a unified, open-source payment orchestration platform built to transform payment processing across West Africa. We seamlessly integrate multiple payment providers and methods while providing a comprehensive set of products for merchants.\n\nOur platform empowers businesses to focus on growth without worrying about the challenges of payment processing.\n\nWe aim to solve two core challenges:\n\n**Payment Complexity**\n\n\nThe West African payment landscape is fragmented, with numerous payment providers, methods, and regulatory requirements. This complexity often forces merchants to manage multiple integrations, leading to increased development costs, maintenance overhead, and technical debt.\n\nlomi. solves this by providing:\n\n- **Unified Integration**: One integration for all your preferred payment channels (Credit cards, MTN Momo, Wave, Orange Money — and counting!)\n- **Customizable Checkout**: Highly customizable, seamless checkout experiences to boost conversion\n- **Enterprise grade Analytics**: Gain valuable insights through detailed transaction reporting\n- **Simple Reconciliation**: Simple reconciliation and refunds processes\n- **Powerful Dashboard**: Powerful dashboard for business management\n\n> *Get started by creating an account on [lomi.](\n\n**Security and Compliance**\n\n\nMerchants need robust security measures and compliance frameworks, but implementing these without compromising user experience or increasing operational complexity is challenging, especially in the West African context.\n\nlomi. addresses this through:\n\n- **Advanced Security**:\n  - Industry-leading fraud detection and prevention\n  - Secure tokenization and PCI-compliant data storage\n  - Real-time transaction monitoring\n  \n- **Built-in Compliance**:\n  - Licensed payment service provider from the BCEAO (Banque Centrale des États de l'Afrique de l'Ouest)\n  - Comprehensive audit trails and logs\n  - Regular security updates and compliance monitoring\n\nThe platform is designed with security-first principles, ensuring that both merchants and their customers can transact with confidence.\n\n---\n\nHow we deliver\n\n\nTo ensure merchants can easily leverage our solutions to fix these core challenges, we provide:\n\n**🛠️ Developer-First Approach**\n- Well-documented APIs\n- SDKs in popular languages (Node.js, Python, PHP)\n- Extensive integration guides and code samples\n- 24/7 dedicated customer support\n\n> *Explore our [API Documentation](../api-reference/overview) to get started*\n\n**Open Source**\n- Complete transparency with our merchants and partners\n- Community-driven development\n- Extensible platform for custom needs\n\nJoin our vibrant open-source community on [GitHub]( and help shape the future of payments in West Africa!",
    "parentName": "introduction",
    "path": "introduction/what-is-lomi"
  },
  "license-management/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"open-source\": \"Self-hosting\"\n};\n\nexport default meta;",
    "parentName": "license-management",
    "path": "license-management/_meta"
  },
  "license-management/open-source": {
    "name": "open-source",
    "content": "Open Source Licensing\n\n\nlomi. is committed to providing a powerful and accessible payment orchestration platform for everyone. As part of this commitment, our solution is entirely open-source and available on Github.\n\nWe are here to help you make money\n\n\nFor regular merchants of our open-source version, there is no need to worry about this. You can simply start using lomi on our website without any restrictions and/or additional setup.\n\nFeatures and Limitations\n\n\nWhile the open-source version of lomi. provides a comprehensive set of features for payment orchestration, it may lack some of the advanced capabilities and support offered in our hosted platform.\n\nFor a detailed comparison of the features available in each version, please refer to our [feature matrix](\n\nGoing live by hosting the solution myself\n\n\nIf you would like to host the platform yourself, you can easily get started by cloning our main repo. However you'll have to get providers API keys by contacting them yourself.\n\nTechnical Requirements\n\n- Node.js 18 or higher\n- PostgreSQL 13 or higher\n- Redis (optional, for caching)\n\nQuick Start Guide\n\n```bash copy\nClone the repository\n\ngit clone \ncd lomi.\n\nInstall dependencies\n\nnpm install\n\nSet up environment\n\ncp .env.example .env\n\nStart development server\n\nnpm run dev\n```\n\nSupported Payment Providers\n\n- Orange Money\n- Wave\n- MTN Mobile Money\n- VISA and Mastercard\n- More integrations coming soon\n\nEnterprise Needs\n\n\nIf you find that your business does not need to host it manually and requires more advanced features, dedicated support, or enterprise-grade capabilities, you can just get started on the [main platform](\n\nLearn More\n\n\nTo learn more about our vision and why lomi. is open-source, please visit our [About page]( or [contact our founder](mailto:babacar@lomi.africa).\n\nCommunity Resources\n\n- [GitHub Repository](\n- [Documentation](\n- [Community Forum](#) ",
    "parentName": "license-management",
    "path": "license-management/open-source"
  },
  "license-management/overview": {
    "name": "overview",
    "content": "License Management\n\n\nlomi. offers both an open-source solution and a hosted platform to cater to the diverse needs of our users. This section provides an overview of the licensing options available and how to manage them.\n\nOpen Source\n\n\nFor users who prefer to self-host the lomi. platform, we provide an open-source version of our software. There is no need for license management when using the open-source version. Simply download the source code from our GitHub repository, install it on your own infrastructure, and start using lomi. without any restrictions.\n\nWhile the open-source version provides a comprehensive set of features for payment orchestration, it may lack some of the advanced capabilities and support offered by our hosted platform. For a detailed comparison of the features available in each version, please refer to our [feature matrix](\n\nKindly note that the open-source version does not include payment channels; you'll need to implement them yourself by contacting each payment providers and sign a commmercial agreement to use their services.\n\nQuick Comparison\n\n\n| Feature | Open Source | Hosted Platform |\n|---------|------------|-----------------|\n| Core Payment Processing | ✓ | ✓ |\n| Built-in Payment Channels | - | ✓ |\n| Self-hosting | ✓ | - |\n| Custom Deployment | ✓ | - |\n| Automatic Updates | - | ✓ |\n| Premium Support | - | ✓ |\n| Advanced Analytics | - | ✓ |\n\nHosted Platform\n\n\nFor businesses that prefer a fully-managed solution, we offer a hosted platform on our website. The hosted platform provides additional features, dedicated support, and benefits tailored to the needs of growing businesses.\n\nTo get started with the hosted platform, simply create an account on [lomi.]( and follow the setup instructions. Our team will be available to assist you throughout the process and provide guidance on optimizing your payment orchestration setup.\n\nSupport Options\n\n\nThe hosted platform includes:\n- 24/7 Technical Support\n- Dedicated Account Manager\n- Priority Issue Resolution\n- Implementation Assistance\n\nNeed Help Deciding?\n\n\nIf you have any questions about the differences between the open-source and hosted versions of lomi., or if you need help deciding which option is best suited for your needs, please don't hesitate to reach out to our team at [hello@lomi.africa](mailto:hello@lomi.africa).\n\nYou can also:\n- Schedule a demo and chat with our team: [Book Now](\n- Compare pricing: [View Plans](",
    "parentName": "license-management",
    "path": "license-management/overview"
  },
  "lomi-cli/_meta": {
    "name": "_meta",
    "content": "import { Meta } from '@/lib/types/meta';\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"configuration\": \"Configuration\",\n  \"webhook-development\": \"Webhook Development\"\n};\n\nexport default meta;",
    "parentName": "lomi-cli",
    "path": "lomi-cli/_meta"
  },
  "lomi-cli/configuration": {
    "name": "configuration",
    "content": "CLI Configuration\n\n\nThe lomi. CLI can be configured through various methods to suit your development workflow.\n\nConfiguration File\n\n\nCreate a `lomi.config.json` in your project root:\n\n```json copy\n{\n  \"environment\": \"development\",\n  \"webhook\": {\n    \"url\": \"\n    \"secret\": \"your_webhook_secret\",\n    \"events\": [\"payment.success\", \"payment.failed\"]\n  },\n  \"dev\": {\n    \"port\": 3000,\n    \"cors\": true,\n    \"webhook_url\": \"\n  }\n}\n```\n\nEnvironment Variables\n\n\nThe CLI respects the following environment variables:\n\n```bash copy\nAuthentication\n\nLOMI_API_KEY=your_api_key\n\nEnvironment\n\nLOMI_ENV=development|staging|production\n\nDevelopment\n\nLOMI_DEV_PORT=3000\nLOMI_WEBHOOK_URL=\nLOMI_WEBHOOK_SECRET=your_webhook_secret\n```\n\nProject-Level Configuration\n\n\nFor team settings, create a `.lomi` directory in your project:\n\n```bash\n.lomi/\n  ├── config.json     # Project configuration\n  ├── credentials     # API keys and secrets\n  └── webhooks/       # Webhook event samples\n```\n\nConfiguration Precedence\n\n\nSettings are loaded in the following order (later sources override earlier ones):\n\n1. Default configuration\n2. Project config file (`lomi.config.json`)\n3. Environment variables\n4. Command line arguments\n\nEnvironment-Specific Configuration\n\n\nCreate environment-specific configurations:\n\n```json copy\n// lomi.config.development.json\n{\n  \"webhook\": {\n    \"url\": \"\n  }\n}\n\n// lomi.config.production.json\n{\n  \"webhook\": {\n    \"url\": \"\n  }\n}\n```\n\nSecure Credentials\n\n\nThe CLI automatically encrypts sensitive information:\n\n```bash copy\nStore a secure value\n\nlomi config set webhook.secret your_secret\n\nUse in your application\n\nlomi config get webhook.secret\n```\n\nTeam Configuration\n\n\nShare non-sensitive configuration with your team:\n\n```bash copy\nExport shareable configuration\n\nlomi config export --safe > lomi.config.team.json\n\nImport team configuration\n\nlomi config import lomi.config.team.json\n```\n\nNext Steps\n\n\n- Learn about [Webhook Development](./webhook-development)\n- Explore our [Testing Guide](./testing)\n- Set up [CI/CD Integration](./ci-cd) ",
    "parentName": "lomi-cli",
    "path": "lomi-cli/configuration"
  },
  "lomi-cli/overview": {
    "name": "overview",
    "content": "lomi. CLI\n\n\nThe lomi. CLI helps you integrate lomi.'s payment services into your applications. It provides tools for:\n\n- Project initialization and configuration\n- Payment operations management\n- Webhook endpoint configuration\n- API key management\n- Integration status monitoring\n\nInstallation\n\n\nInstall the lomi. CLI using npm:\n\n```bash copy\nnpm install lomi.cli\n```\n\nAuthentication\n\n\nThe CLI requires authentication to interact with the lomi. API. You can authenticate using:\n\n1. **Environment Variable**:\n```bash copy\nexport LOMI_API_KEY=your_api_key_here\n```\n\n2. **Interactive Login**:\n```bash copy\nlomi login\n```\n\nCore Commands\n\n\n`lomi init`\n\n\nInitializes a new lomi. project in your current directory:\n\n```bash copy\nlomi init\n```\n\nThis command:\n- Creates a `lib/lomi.ts` file with client configuration\n- Sets up environment variables in `.env`\n- Installs the lomi. client package\n- Configures your API key\n\n`lomi dev`\n\n\nStarts the development environment:\n\n```bash copy\nlomi dev\n```\n\nFeatures:\n- Local development server\n- Integration testing support\n- Environment configuration\n\n`lomi status`\n\n\nDisplays your integration status:\n\n```bash copy\nlomi status\n```\n\nShows:\n- API connectivity status\n- Account information\n- Integration health\n\n`lomi payments`\n\n\nManage payment operations:\n\n```bash copy\nList payments\n\nlomi payments list\n\nGet payment details\n\nlomi payments get \n```\n\n`lomi webhook`\n\n\nManage webhook endpoints:\n\n```bash copy\nRegister new webhook\n\nlomi webhook register\n\nList webhooks\n\nlomi webhook list --merchant-id \n```\n\n`lomi api-key`\n\n\nManage API keys:\n\n```bash copy\nList keys\n\nlomi api-key list\n\nCreate key\n\nlomi api-key create\n```\n\nGlobal Options\n\n\n- `--api-key`: Set API key\n- `--env`: Set environment (default: 'production')\n- `--json`: JSON output format\n\nNext Steps\n\n\n- [Configuration](./configuration) - Configure the CLI\n- [Webhook Development](./webhook-development) - Set up webhooks\n\nFor command details, use `lomi help [command]`. For support, contact [hello@lomi.africa](mailto:hello@lomi.africa).",
    "parentName": "lomi-cli",
    "path": "lomi-cli/overview"
  },
  "lomi-cli/webhook-development": {
    "name": "webhook-development",
    "content": "Webhook Development\n\n\nThe lomi. CLI provides tools to help you manage webhook endpoints for your integration.\n\nRegistering Webhooks\n\n\nUse the `webhook register` command to set up a new webhook endpoint:\n\n```bash copy\nlomi webhook register\n```\n\nThe command will prompt you for:\n- Your merchant ID\n- The webhook URL\n- Events to subscribe to\n\nExample events include:\n- `payment.success`\n- `payment.failed`\n- `payment.pending`\n- `refund.success`\n- `refund.failed`\n\nManaging Webhooks\n\n\nList your registered webhook endpoints:\n\n```bash copy\nlomi webhook list --merchant-id your_merchant_id\n```\n\nThis shows:\n- Webhook ID\n- URL\n- Subscribed events\n- Active status\n- Last triggered timestamp\n\nSecurity\n\n\nWhen a webhook is registered, you'll receive a verification token. Store this securely - you'll need it to verify webhook signatures.\n\nLocal Development\n\n\nThe CLI includes a development server for testing webhooks locally:\n\n```bash copy\nlomi dev --port 3000\n```\n\nThis starts a server that:\n- Listens for incoming webhook events\n- Displays webhook headers and payload\n- Shows verification tokens\n- Logs all requests for debugging\n\nThe server will print detailed information about each received webhook, making it easy to debug your integration.\n\nDevelopment Setup\n\n\n1. Create a webhook endpoint in your application that can receive POST requests\n\n2. Register the webhook using the CLI:\n```bash copy\nlomi webhook register\n```\n\n3. Use the verification token to validate incoming webhooks:\n```typescript\nimport crypto from 'crypto';\n\nfunction verifyWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n  return hmac === signature;\n}\n```\n\nBest Practices\n\n\n1. **Always verify signatures**\n   - Use the verification token to validate webhook authenticity\n   - Reject requests with invalid signatures\n\n2. **Handle retries**\n   - Implement idempotency using the event ID\n   - Return 2xx status for successful processing\n   - Return 5xx status for retryable errors\n\n3. **Monitor webhook health**\n   - Track successful and failed deliveries\n   - Set up alerts for repeated failures\n\nNext Steps\n\n\n- [Configuration](./configuration) - Advanced webhook settings\n```",
    "parentName": "lomi-cli",
    "path": "lomi-cli/webhook-development"
  }
}