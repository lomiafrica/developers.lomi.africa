{
  "advanced-guides/working-with-bigint": {
    "name": "working-with-bigint",
    "content": "Working with BigInt\n\n\nWhen your response data contains `BigInt`, the parsed value may become corrupted because lomi. parses the response data by default, which can lead to a loss of fidelity.\nThis occurs because `JSON.parse()` does not handle `BigInt` values correctly by default.\n\nHowever, if you need access to the raw response data (for example, if it contains `BigInt`), you can bypass the parsing step.\n\nTo prevent automatic parsing and work directly with the raw response data, add the below expression to the `pre-request` script.\n\n```js\nreq.disableParsingResponseJson();\n```\n",
    "parentName": "advanced-guides",
    "path": "advanced-guides/working-with-bigint"
  },
  "get-started/javascript-sandbox": {
    "name": "javascript-sandbox",
    "content": "Javascript Sandbox\n\n\nYour collections might include JavaScript code in Variables, Scripts, Tests, and Assertions. \nWe take security seriously and want to ensure you can safely interact with collections, regardless of their source or original authors. \n\nThere are two modes you can choose from:\n![Javascript Sandbox](/screenshots/javascript-sandbox.png)\n\nSafe Mode\n\nJavaScript code is executed in a secure sandbox and cannot access your filesystem or execute system commands. We recommend Safe Mode for most users.\n\n> **Note**: When in doubt, leave the Collection in Safe Mode. You can always switch to Developer Mode later.\n\nDeveloper Mode\n\nJavaScript code has access to the filesystem, can execute system commands and access sensitive information.\n\nWhen to use Developer Mode\n\n- You trust the collection source/authors (Ex: Collection maintained by you/your team) and Safe Mode is not enough for your use case.\n- You need to use external npm packages in your scripts\n- Your collection needs access to filesystem / system commands\n\nWhen to avoid Developer Mode\n\n- You are running a collection that you do not trust (Ex: Downloaded from the internet)\n\n> **Warning**: Developer Mode can be dangerous and should only be used when you fully understand the implications.\n",
    "parentName": "get-started",
    "path": "get-started/javascript-sandbox"
  },
  "get-started/lomi-basics/create-merchant-account": {
    "name": "create-merchant-account",
    "content": "Creating a Merchant Account\n\n\nTo start using lomi., you first need to create a merchant account. \n\n1. Visit the [lomi. website]( and click on the \"Sign Up\" button.\n2. Fill in your business details, including your company name, contact information, and the payment methods you want to support.\n3. Agree to the terms of service and click \"Create Account\".\n4. You will receive a confirmation email. Click the link in the email to verify your account.\n\nCongratulations! You have successfully created your lomi. merchant account. You can now log in to your dashboard and start configuring your payment integration.\n",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/create-merchant-account"
  },
  "get-started/lomi-basics/process-transactions": {
    "name": "process-transactions",
    "content": "Processing Transactions\n\n\nWith lomi. integrated into your application, you can start processing transactions.\n\n1. When a customer initiates a payment on your website or app, send a payment request to lomi. using the appropriate API endpoint or SDK method.\n\n2. lomi. will handle the payment flow, securely collecting the customer's payment details and processing the transaction through the selected payment method.\n\n3. You will receive a response indicating the status of the transaction (success, failure, or pending).\n\n4. Use webhooks to receive real-time notifications about transaction updates and status changes.\n\n5. Manage and track your transactions through the lomi. dashboard, which provides detailed reporting and analytics.\n\nlomi. ensures secure and reliable payment processing, with built-in fraud detection and PCI DSS compliance.\n\nFor more information on transaction processing and best practices, refer to the [Transaction Processing Guide](../transactions/overview).",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/process-transactions"
  },
  "get-started/lomi-basics/setup-payment-methods": {
    "name": "setup-payment-methods",
    "content": "Setting Up Payment Methods\n\n\nAfter creating your merchant account, the next step is to set up the payment methods you want to offer to your customers.\n\n1. Log in to your lomi. dashboard.\n2. Navigate to the \"Payment Methods\" section.\n3. Click on the \"Add Payment Method\" button.\n4. Select the payment method you want to add (e.g., credit card, mobile money, etc.).\n5. Follow the instructions to provide the necessary details and credentials for the selected payment method.\n6. Save your changes.\n\nRepeat these steps for each payment method you want to support. lomi. will handle the integration with the respective payment providers.\n\nFeel free to customize your checkout experience, set up webhooks for real-time notifications, and explore other features available in your dashboard.\n",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/setup-payment-methods"
  },
  "get-started/lomi-basics/sign-up": {
    "name": "sign-up",
    "content": "Getting Started with lomi.\n\n\nTo start using lomi. for your payment processing needs, follow these steps:\n\n1. **Sign up**: Visit the [lomi. website]( and create a merchant account.\n\n2. **Set up payment methods**: Configure the payment methods you want to support in your lomi. dashboard.\n\n3. **Integrate with your application**: Use lomi.'s API or SDKs to integrate payment processing into your application. Refer to the [Integration Guide](../integration/getting-started) for detailed instructions.\n\n4. **Test your integration**: Use lomi.'s testing environment to simulate transactions and ensure your integration is working as expected.\n\n5. **Go live**: Once you've thoroughly tested your integration, switch to live mode and start processing real transactions.\n\nlomi. provides comprehensive documentation, SDKs, and support to help you get started quickly and smoothly.\n",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/sign-up"
  },
  "get-started/lomi-basics/test-integration": {
    "name": "test-integration",
    "content": "Testing Your Integration\n\n\nTo ensure your payment integration is working as expected, lomi. provides a testing environment.\n\n1. In your lomi. dashboard, navigate to the \"Integration\" section.\n2. Select the \"Test Mode\" option.\n3. Use the provided test credentials and payment details to simulate transactions.\n4. Monitor the test transactions in the \"Transactions\" section of your dashboard.\n5. Verify that the transactions are processed correctly and the expected webhooks are triggered.\n\nTesting your integration thoroughly helps you identify and fix any issues before going live.\n\n> For more advanced testing scenarios and tips, refer to the [Testing Guide](../testing/introduction).\n\n\n\n",
    "parentName": "get-started",
    "path": "get-started/lomi-basics/test-integration"
  },
  "get-started/variables/overview": {
    "name": "overview",
    "content": "Variables\n\n\n> **Note**: With the release of v1.28.0, we’ve shifted to treating all Request Variables as strings instead of inferring the data type from the value. See [discussion]( for more information.\n\nOverview\n\nVariables in the lomi. allow you to store dynamic values that can be reused across multiple API requests, environments, and workflows. This feature enhances flexibility, maintainability, and efficiency by enabling you to manage frequently changing data points such as tokens, environment-specific URLs, or user-defined values in one place.",
    "parentName": "get-started",
    "path": "get-started/variables/overview"
  },
  "git-integration/overview": {
    "name": "overview",
    "content": "Collaboration and Versioning\n\n\nlomi. understands the importance of collaboration and versioning when it comes to your payment integration setup. While lomi. itself is not version-controlled, you can use version control systems like Git to manage your integration code and configurations.\n\nHere are some best practices for collaborating and versioning your lomi. integration:\n\n1. **Use a version control system**: Store your integration code and configuration files in a version control system like Git. This allows you to track changes, collaborate with your team, and maintain a history of your integration setup.\n\n2. **Keep sensitive information separate**: Avoid storing sensitive information like API keys, secrets, and credentials in version control. Use environment variables or secure key management systems to handle sensitive data.\n\n3. **Use branches for development**: Create separate branches for development, testing, and production. This allows you to work on new features or configurations without affecting the stable version of your integration.\n\n4. **Review and test changes**: Before merging changes to the main branch, ensure they are thoroughly reviewed and tested. Use pull requests to facilitate code reviews and discussions.\n\n5. **Tag releases**: Use tags to mark specific versions of your integration code. This makes it easier to reference and deploy specific versions of your integration.\n\n6. **Keep your integration up to date**: Regularly update your integration code to leverage the latest features and improvements provided by lomi.. Stay informed about updates and changelogs through the lomi. documentation and community channels.\n\nBy following these best practices and leveraging version control systems, you can effectively collaborate with your team and maintain a robust and reliable payment integration with lomi..",
    "parentName": "git-integration",
    "path": "git-integration/overview"
  },
  "git-integration/using-cli": {
    "name": "using-cli",
    "content": "Collaboration via CLI\n\n\nIn the open-source version of lomi.,  Git operations are performed manually using the terminal or tools like VSCode's Git features. \n\nThis includes:\n\n- [Initializing a Git repository](#initializing-git-in-bruno-collection)\n- [Adding and committing changes](#adding-and-committing-changes)\n- [Pushing and pulling updates](#pushing-and-pulling-changes)\n\nBelow is a step-by-step guide on how to use Git with lomi. in the open-source version.\n\nInitializing Git in a Collection\n\n\nTo add your collection to version control, you need to initialize a Git repository in the directory where your .bru files are stored using the following steps:\n\n1. **Navigate to the lomi. Collection Location:**\n\n   - Navigate to the location on your PC where you created the lomi. collection, and copy the path. [^1]\n\n2. **Change directory in Terminal:**\n\n   - Run the following command in the terminal:\n\n     ```bash\n     cd path/to/your/bruno/collection\n     ```\n\n3. **Initialize Git:**\n   - Run the following command to initialize Git in the lomi. collection directory:\n\n     ```bash\n     git init\n     ```\n\nAdding and Committing Changes\n\n\nAfter initializing the Git repository, you can add and commit changes to your collection.\n\n1. **Creating a New HTTP Request in lomi. App**\n\n    - Hover over the collection name in the lomi. app.\n    - Click on the three dots, then click on \"New Request.\"\n    - Type in the name of the request and populate the URL field with `\n    - After populating the fields with appropriate values, click on the \"Create\" button, or you can press ENTER/RETURN on your keyboard to create the request. This will create a new `.bru` file with the name that you just specified.\n\n2. **Adding and committing the changes**\n   - Stage all the changes made inside the collection:\n\n     ```bash\n     git add .\n     ```\n   - Commit the changes:\n\n     ```bash\n     git commit -m \"Created my first lomi. request 🐶\"\n     ```\n\nPushing and Pulling Changes\n\n\nTo share your changes with others, you can push and pull your commits to/from a remote repository.\n\n1. **Pushing changes**\n\n   ```bash\n   git push -u origin main\n   ```\n\n2. **Pulling changes**\n\n   ```bash\n   git pull origin main\n   ```\n",
    "parentName": "git-integration",
    "path": "git-integration/using-cli"
  },
  "introduction/feedback-community": {
    "name": "feedback-community",
    "content": "Feedback & Community \n\n\nlomi. is building a community of merchants, developers, and payment innovators who are committed to transforming the payment landscape in Africa. Our platform evolution and feature development are driven by real merchant needs and market requirements.\n\nHelp us continue building Africa's most comprehensive and merchant-friendly payment orchestration platform!\n\nHow to Engage\n\n- Raise an issue on [GitHub]( \n- Follow us on [Github](\n- Contact our [Support Team](mailto:hello@lomi.africa)\n- Visit our [Website](\n\nFor Developers\n\n- Explore our [API Documentation](../api-reference/overview)\n- Check out our [Integration Guides](../integration/getting-started)\n- Read our [Security Guidelines](../security/overview)\n- View our [SDK Documentation](../sdks/overview)",
    "parentName": "introduction",
    "path": "introduction/feedback-community"
  },
  "introduction/manifesto": {
    "name": "manifesto",
    "content": "Manifesto\n\n\nThe time has come to transform payment processing across Africa.\n\nWe believe that accepting payments shouldn't be complex, regardless of where you operate or what payment methods your customers prefer. The fragmented payment landscape in Africa creates unnecessary barriers for businesses trying to grow.\n\nlomi. addresses these challenges with a unified, open approach to payment orchestration. We believe that:\n\n- **Payment Processing Should Be Simple**: One integration to accept all payment methods\n- **Security Is Non-Negotiable**: Every transaction is protected with industry-leading security measures\n- **Innovation Should Be Accessible**: Advanced features like fraud detection and analytics are available to all businesses\n- **Integration Should Be Seamless**: Adding new payment methods is straightforward and hassle-free\n- **Compliance Is Built-In**: Meeting regulatory requirements is part of our platform's foundation\n\nWe envision an Africa where any business can easily accept payments from their customers, using any payment method, without worrying about the complexity behind the scenes. No more stories of *\"We can't expand to that market because integrating their payment systems is too complex.\"*\n\nJoin us in our mission to simplify payment processing across Africa. Experience the future of unified, secure, and efficient payment processing with lomi.\n",
    "parentName": "introduction",
    "path": "introduction/manifesto"
  },
  "introduction/what-is-lomi": {
    "name": "what-is-lomi",
    "content": "What is lomi.?\n\n\nlomi. is a unified, scalable payment orchestration platform built to transform payment processing across Africa. We seamlessly integrate multiple payment providers and methods while providing a comprehensive solution for merchants and their customers.\n\nWe aim to solve two core challenges:\n\n**Payment Complexity**\n\n\nlomi.'s superpower is simplifying the complex landscape of African payments through a unified platform that:\n\n- Integrates multiple payment providers (Stripe Connect, MTN, Wave, Orange Money)\n- Handles various payment methods\n- Provides comprehensive reporting and analytics\n- Offers customizable checkout experiences\n- Ensures secure, reliable payment processing\n\n> *Learn more about our [Core Features](../features/overview)*\n\n**Security and Compliance**\n\n\nPayment processing demands the highest levels of security and compliance. lomi. is built with:\n\n- Robust fraud detection and prevention\n- Secure tokenization and data storage\n- Multi-currency support\n- Comprehensive audit trails\n\nOur platform is designed with security-first principles, ensuring that both merchants and their customers can transact with confidence.\n\n> **Key Benefits**\n>\n> - Simplified payment management for merchants\n> - Unified integration for multiple payment providers\n> - Comprehensive security and compliance\n> - Real-time analytics and reporting\n> - Customizable checkout experiences\n",
    "parentName": "introduction",
    "path": "introduction/what-is-lomi"
  },
  "license-management/overview": {
    "name": "overview",
    "content": "License Management\n\n\nFor our open-source users, there is no concept of license management! Simply download, install, and go! \n\nOur commercial plans have different license management aspects. \nIf you have any questions about what plan is best suited for you, please see our [pricing page]() or [contact us](mailto:hello@usebruno.com) to discuss. \n\nLicense Types\n",
    "parentName": "license-management",
    "path": "license-management/overview"
  },
  "lomi-cli/overview": {
    "name": "overview",
    "content": "lomi. CLI\n\n\nWith lomi. CLI, you can run your API collections with ease using simple command line commands.\n\nThis makes it easier to test your APIs in different environments, automate your testing process, and integrate your API tests with your continuous integration and deployment workflows.\n\nInstallation\n\nTo install the lomi. CLI, use the node package manager of your choice, such as NPM:\n```bash copy\nnpm install -g @usebruno/cli\n```\n\nGetting Started\n\n\nNavigate to the directory where your API collection resides, and run the following command:\n\n```bash copy\nbru run\n```\n\nThis will run all the requests in your collection. If you want to run a single request, specify its filename:\n\n```bash copy\nbru run request.bru\n```\n\nRunning Requests in a Folder\n\nTo run all the requests within a folder, use:\n\n```bash copy\nbru run folder\n```\n\nUsing Environments\n\nIf you need to use a specific environment, you can pass it with the --env option:\n\n\n```bash copy\nbru run folder --env Local\n```\n\nPassing Environment Variables\n\nYou can pass environment variables directly to your collection with the --env-var option:\n\n\n```bash copy\nbru run folder --env Local --env-var JWT_TOKEN=1234\n```\n\nRunning a Collection with a CSV File\n\nIf you need to run a collection using data from a CSV file, specify the path to the file with the --csv-file-path option:\n\n```bash copy\nbru run folder --csv-file-path /path/to/csv/file.csv\n```\n\nOutputting Results\n\nTo save the results of your API tests to a file, use the --output option:\n\n\n```bash copy\nbru run folder --output results.json\n```\n\nGenerating Reports\n\n\nlomi. CLI provides built-in support for generating reports in three formats: **JSON**, **JUnit**, and **HTML**. These reports help with analyzing test results and integrating with various CI/CD tools.\n\nYou can generate any combination of these reports and even run them simultaneously.\n\nJSON Report\n\n\nTo generate a report in JSON format, use the `--reporter-json` option:\n\n```bash copy\nbru run request.bru --reporter-json results.json\n```\n\nThis will output the test results in a results.json file, which can be useful for further processing or programmatic analysis.\n\nJUnit Report\n\n\nTo generate a report in JUnit format, use the --reporter-junit option:\n\n```bash copy\nbru run request.bru --reporter-junit results.xml\n```\n\nThe results.xml file will be in a format compatible with JUnit, making it ideal for integration with CI/CD pipelines that rely on JUnit reporting.\n\n\nHTML Report\n\n\nTo generate a human-readable HTML report, use the --reporter-html option:\n\n```bash copy\nbru run request.bru --reporter-html results.html\n```\n\nThis will create an results.html file that provides a visual representation of the test outcomes, ideal for quick reviews.\n\nRunning Multiple Reporters Simultaneously\n\n\nYou can generate multiple reports at once by specifying more than one reporter option. For example, to generate JSON, JUnit, and HTML reports simultaneously, run:\n\n```bash copy\nbru run request.bru --reporter-json results.json --reporter-junit results.xml --reporter-html results.html\n```\n\nThis command will create three files: results.json, results.xml, and results.html, allowing you to analyze the results in different formats as needed.\n\n\nOptions\n\n| Option                    | Details                                                                       |\n|---------------------------|-------------------------------------------------------------------------------|\n| -h, --help                | Show help                                                                     |\n| --version                 | Show version number                                                           |\n| -r                        | Indicates a recursive run (default: false)                                    |\n| --cacert [string]         | CA certificate to verify peer against                                         |\n| --env [string]            | Specify environment to run with                                               |\n| --env-var [string]        | Overwrite a single environment variable, multiple usages possible             |\n| -o, --output [string]     | Path to write file results to                                                 |\n| -f, --format [string]     | Format of the file results; available formats are \"json\" (default) or \"junit\" |\n| --reporter-json [string]  | Path to generate a JSON report                                                |\n| --reporter-junit [string] | Path to generate a JUnit report                                               |\n| --reporter-html [string]  | Path to generate an HTML report                                               |\n| --insecure                | Allow insecure server connections                                             |\n| --tests-only              | Only run requests that have tests                                             |\n| --bail                    | Stop execution after a failure of a request, test, or assertion               |\n| --csv-file-path           | CSV file to run the collection with                                           |\n\nDemo\n\n![bru cli](/screenshots/cli-demo.webp)\n\nSupport\n\nIf you encounter any issues or have any feedback or suggestions, please raise them on our [GitHub repository](\n",
    "parentName": "lomi-cli",
    "path": "lomi-cli/overview"
  }
}