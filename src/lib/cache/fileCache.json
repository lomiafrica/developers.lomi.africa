{
  "_app": {
    "name": "_app",
    "content": "import \"@/app/globals.css\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { AppProps } from \"next/app\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    \n      \n      \n    \n  );\n}\n",
    "parentName": null,
    "path": "_app"
  },
  "_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"docs\": \"Docs\",\n  \"reference\": \"API Reference\",\n};\n\nexport default meta;\n",
    "parentName": null,
    "path": "_meta"
  },
  "docs/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"introduction\": \"Introduction\",\n  \"merchant-of-record\": \"Merchant of Record\",\n  \"freedom\": \"Open Source\",\n  \"get-started\": \"Getting started\",\n  \"lomi-cli\": \"lomi. with CLI\",\n  \"advanced-guides\": \"Advanced guides\",\n  \"contributing\": \"Contributing\",\n  \"support\": \"Support\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/_meta"
  },
  "docs/advanced-guides/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"handling-webhooks\": \"Handling Webhooks\",\n  \"idempotency-keys\": \"Idempotency Keys\",\n  \"error-handling\": \"Error Handling\",\n  \"security-best-practices\": \"Security Best Practices\",\n  \"testing\": \"Testing Guide\",\n  \"ci-cd\": \"CI/CD Integration\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/advanced-guides/_meta"
  },
  "docs/advanced-guides/ci-cd": {
    "name": "ci-cd",
    "content": "CI/CD Integration\n\n\nThis guide covers best practices for integrating lomi with your CI/CD pipeline, ensuring reliable deployments and automated testing.\n\nEnvironment Setup\n\n\n1. Environment Variables\n\n\n```yaml\n.env.ci\n\nLOMI_API_KEY=test_key_xxx\nLOMI_WEBHOOK_SECRET=whsec_xxx\nLOMI_ENV=test\n```\n\n2. Secrets Management\n\n\n```typescript\n// config/secrets.ts\nexport function loadSecrets() {\n  const requiredSecrets = [\n    'LOMI_API_KEY',\n    'LOMI_WEBHOOK_SECRET'\n  ];\n  \n  for (const secret of requiredSecrets) {\n    if (!process.env[secret]) {\n      throw new Error(`Missing required secret: ${secret}`);\n    }\n  }\n}\n```\n\nGitHub Actions\n\n\n1. Test Workflow\n\n\n```yaml\n.github/workflows/test.yml\n\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Run tests\n        run: npm test\n        env:\n          LOMI_API_KEY: ${{ secrets.LOMI_TEST_API_KEY }}\n          LOMI_WEBHOOK_SECRET: ${{ secrets.TEST_WEBHOOK_SECRET }}\n          LOMI_ENV: test\n```\n\n2. Deploy Workflow\n\n\n```yaml\n.github/workflows/deploy.yml\n\nname: Deploy\n\non:\n  push:\n    branches: [ main ]\n    \njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: eu-west-1\n          \n      - name: Deploy to production\n        run: |\n          npm ci\n          npm run build\n          npm run deploy\n        env:\n          LOMI_API_KEY: ${{ secrets.LOMI_PROD_API_KEY }}\n          LOMI_WEBHOOK_SECRET: ${{ secrets.PROD_WEBHOOK_SECRET }}\n          LOMI_ENV: production\n```\n\nAutomated Testing\n\n\n1. Pre-deployment Tests\n\n\n```typescript\n// scripts/pre-deploy.ts\nimport { LomiSDK } from '@lomi/sdk';\n\nasync function runPreDeploymentChecks() {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_API_KEY\n  });\n  \n  // 1. Verify API connectivity\n  await lomi.merchants.list();\n  \n  // 2. Test webhook endpoint\n  const webhookTest = await lomi.webhooks.test({\n    url: process.env.WEBHOOK_URL\n  });\n  \n  if (!webhookTest.success) {\n    throw new Error('Webhook test failed');\n  }\n  \n  // 3. Verify provider availability\n  const providers = await lomi.providers.list();\n  if (providers.length === 0) {\n    throw new Error('No payment providers available');\n  }\n}\n```\n\n2. Integration Tests\n\n\n```typescript\n// tests/integration/payment.test.ts\ndescribe('Payment Integration', () => {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_API_KEY\n  });\n  \n  beforeAll(async () => {\n    // Setup test environment\n    await setupTestEnvironment();\n  });\n  \n  it('should process payment end-to-end', async () => {\n    // Create session\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: process.env.TEST_MERCHANT_ID,\n      amount: 1000,\n      currency: 'XOF',\n      provider_codes: ['FREE_MONEY']\n    });\n    \n    // Simulate payment\n    await lomi.test.simulatePayment(session.id);\n    \n    // Verify success\n    const updated = await lomi.checkoutSessions.retrieve(\n      session.id\n    );\n    expect(updated.status).toBe('succeeded');\n  });\n});\n```\n\nDeployment Strategies\n\n\n1. Blue-Green Deployment\n\n\n```typescript\n// scripts/deploy.ts\nasync function blueGreenDeploy() {\n  // 1. Deploy to staging\n  await deploy('staging');\n  \n  // 2. Run health checks\n  const health = await checkHealth('staging');\n  if (!health.ok) {\n    await rollback('staging');\n    throw new Error('Health check failed');\n  }\n  \n  // 3. Switch traffic\n  await switchTraffic('staging', 'production');\n  \n  // 4. Monitor for errors\n  await monitorDeployment();\n}\n```\n\n2. Canary Deployment\n\n\n```typescript\n// scripts/canary.ts\nasync function canaryDeploy() {\n  // 1. Deploy to canary\n  await deploy('canary', { capacity: '10%' });\n  \n  // 2. Monitor metrics\n  const metrics = await monitorCanary({\n    duration: '1h',\n    errorThreshold: 0.1\n  });\n  \n  if (metrics.errorRate > 0.1) {\n    await rollback('canary');\n    throw new Error('Canary failed');\n  }\n  \n  // 3. Scale up deployment\n  await scaleDeployment('canary', '100%');\n}\n```\n\nMonitoring\n\n\n1. Health Checks\n\n\n```typescript\n// monitoring/health.ts\nexport async function checkServiceHealth() {\n  try {\n    // 1. API health\n    await lomi.merchants.list();\n    \n    // 2. Webhook health\n    const webhooks = await lomi.webhooks.list();\n    const activeWebhooks = webhooks.filter(\n      w => w.status === 'active'\n    );\n    \n    if (activeWebhooks.length === 0) {\n      throw new Error('No active webhooks');\n    }\n    \n    // 3. Database health\n    await db.raw('SELECT 1');\n    \n    return { status: 'healthy' };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      error: error.message\n    };\n  }\n}\n```\n\n2. Metrics Collection\n\n\n```typescript\n// monitoring/metrics.ts\nexport function collectMetrics() {\n  return {\n    // Payment metrics\n    payments: {\n      success: getSuccessRate(),\n      volume: getPaymentVolume(),\n      latency: getAverageLatency()\n    },\n    \n    // Webhook metrics\n    webhooks: {\n      delivery: getDeliveryRate(),\n      latency: getWebhookLatency()\n    },\n    \n    // System metrics\n    system: {\n      memory: getMemoryUsage(),\n      cpu: getCPUUsage(),\n      errors: getErrorRate()\n    }\n  };\n}\n```\n\nRollback Procedures\n\n\n1. Automated Rollback\n\n\n```typescript\n// scripts/rollback.ts\nasync function automaticRollback(deployment: string) {\n  try {\n    // 1. Stop traffic to new version\n    await stopTraffic(deployment);\n    \n    // 2. Restore previous version\n    await restorePreviousVersion();\n    \n    // 3. Verify rollback\n    const health = await checkHealth('production');\n    if (!health.ok) {\n      throw new Error('Rollback verification failed');\n    }\n    \n    // 4. Notify team\n    await notifyTeam('Rollback completed');\n  } catch (error) {\n    await notifyTeam('Manual intervention required');\n    throw error;\n  }\n}\n```\n\nNext Steps\n\n\n- [Testing Guide](./testing)\n- [Security Best Practices](./security-best-practices)\n- [API Reference](/api-reference) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/ci-cd"
  },
  "docs/advanced-guides/error-handling": {
    "name": "error-handling",
    "content": "Error Handling\n\n\nWhen integrating with lomi., it's essential to handle errors gracefully to provide a smooth payment experience for your customers. lomi. uses conventional HTTP response codes and returns meaningful error codes and messages that you can use to troubleshoot issues and inform your customers about the status of their transactions.\n\nError Response Format\n\n\nAll errors follow this format:\n\n```json\n{\n  \"error\": {\n    \"message\": \"Error description\",\n    \"code\": 400,\n    \"details\": [\n      {\n        \"path\": \"amount\",\n        \"message\": \"Amount must be a positive number\"\n      }\n    ]\n  }\n}\n```\n\nHTTP Status Codes\n\n\n- `400` Bad Request - Invalid parameters or validation failed\n- `401` Unauthorized - Missing or invalid API key\n- `403` Forbidden - Valid API key but insufficient permissions\n- `404` Not Found - Resource doesn't exist\n- `429` Too Many Requests - Rate limit exceeded\n- `500` Internal Server Error - Something went wrong on our end\n\nValidation Errors\n\n\nWhen request validation fails:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    amount: -100,  // Invalid: must be positive\n    currency: 'INVALID',  // Invalid: must be 3 letters\n    provider_codes: []  // Invalid: must not be empty\n  });\n} catch (error) {\n  if (error.validationErrors) {\n    // Validation failed with specific field errors\n    error.validationErrors.errors.forEach(err => {\n      console.error(`${err.path}: ${err.message}`);\n    });\n  }\n}\n```\n\nAuthentication Errors\n\n\nWhen API key validation fails:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  });\n} catch (error) {\n  if (error.statusCode === 401) {\n    // Check common authentication issues\n    if (!process.env.LOMI_API_KEY) {\n      console.error('API key not configured');\n    } else if (process.env.LOMI_API_KEY.startsWith('test_')) {\n      console.error('Using test key in production');\n    } else {\n      console.error('Invalid API key');\n    }\n  }\n}\n```\n\nRate Limit Errors\n\n\nWhen you exceed the rate limit (100 requests per 15 minutes):\n\n```typescript\ntry {\n  const response = await fetch(' {\n    method: 'POST',\n    headers: {\n      'x-api-key': process.env.LOMI_API_KEY\n    }\n  });\n\n  // Check rate limit headers\n  console.log({\n    remaining: response.headers.get('X-RateLimit-Remaining'),\n    reset: response.headers.get('X-RateLimit-Reset')\n  });\n} catch (error) {\n  if (error.statusCode === 429) {\n    // Implement exponential backoff\n    const retryAfter = parseInt(error.headers['retry-after'] || '60');\n    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n    // Retry request\n  }\n}\n```\n\nProvider Errors\n\n\nWhen payment provider operations fail:\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  });\n} catch (error) {\n  switch (error.code) {\n    case 'provider_not_available':\n      console.error('Payment provider is temporarily unavailable');\n      break;\n    case 'provider_declined':\n      console.error('Payment declined by provider:', error.message);\n      break;\n    case 'invalid_phone':\n      console.error('Invalid phone number format');\n      break;\n  }\n}\n```\n\nBest Practices\n\n\n1. **Graceful Degradation**\n   - Always provide fallback options\n   - Show user-friendly error messages\n   - Log detailed errors for debugging\n\n2. **Retry Strategy**\n   ```typescript\n   async function withRetry(fn, maxRetries = 3) {\n     for (let i = 0; i = 500) {\n           // Wait longer between each retry\n           await new Promise(resolve => \n             setTimeout(resolve, Math.pow(2, i) * 1000)\n           );\n           continue;\n         }\n         throw error;\n       }\n     }\n   }\n   ```\n\n3. **Error Monitoring**\n   - Log all errors with context\n   - Track error rates and patterns\n   - Set up alerts for critical errors\n\nNext Steps\n\n\n- [Idempotency Keys](./idempotency-keys)\n- [Security Best Practices](./security-best-practices)\n- [API Reference](/api-reference/errors) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/error-handling"
  },
  "docs/advanced-guides/handling-webhooks": {
    "name": "handling-webhooks",
    "content": "Handling Webhooks\n\n\nWebhooks allow you to receive real-time updates about payment events. This guide explains how to securely handle webhook notifications from lomi.\n\nSetup\n\n\n1. Configure Your Endpoint\n\n\nCreate a dedicated endpoint for webhook notifications:\n\n```typescript\nimport express from 'express';\nimport crypto from 'crypto';\n\nconst app = express();\n\n// Use raw body parser for webhook signature verification\napp.post('/webhooks', \n  express.raw({type: 'application/json'}),\n  handleWebhook\n);\n```\n\n2. Verify Signatures\n\n\nAlways verify webhook signatures to ensure requests are from lomi:\n\n```typescript\nfunction verifySignature(\n  payload: Buffer,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n    \n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(hmac)\n  );\n}\n\nasync function handleWebhook(req: Request, res: Response) {\n  const signature = req.headers['lomi-signature'];\n  \n  if (!signature || !verifySignature(\n    req.body,\n    signature as string,\n    process.env.WEBHOOK_SECRET\n  )) {\n    return res.status(400).json({\n      error: 'Invalid signature'\n    });\n  }\n  \n  const event = JSON.parse(req.body.toString());\n  \n  // Process the event\n  await processWebhookEvent(event);\n  \n  // Return 200 quickly\n  res.json({ received: true });\n}\n```\n\nEvent Types\n\n\nPayment Events\n\n\n1. **payment.created**\n   ```typescript\n   if (event.type === 'payment.created') {\n     const payment = event.data;\n     await updateOrderStatus(payment.metadata.orderId, 'pending');\n   }\n   ```\n\n2. **payment.succeeded**\n   ```typescript\n   if (event.type === 'payment.succeeded') {\n     const payment = event.data;\n     await fulfillOrder(payment.metadata.orderId);\n   }\n   ```\n\n3. **payment.failed**\n   ```typescript\n   if (event.type === 'payment.failed') {\n     const payment = event.data;\n     await notifyCustomer(payment.metadata.orderId, 'payment_failed');\n   }\n   ```\n\nRefund Events\n\n\n1. **refund.created**\n   ```typescript\n   if (event.type === 'refund.created') {\n     const refund = event.data;\n     await updateRefundStatus(refund.id, 'pending');\n   }\n   ```\n\n2. **refund.succeeded**\n   ```typescript\n   if (event.type === 'refund.succeeded') {\n     const refund = event.data;\n     await completeRefund(refund.id);\n   }\n   ```\n\nBest Practices\n\n\n1. Quick Response\n\n\nRespond quickly to webhook notifications:\n\n```typescript\nasync function handleWebhook(req: Request, res: Response) {\n  // Verify signature first\n  \n  // Return 200 quickly\n  res.json({ received: true });\n  \n  // Process event asynchronously\n  try {\n    await processWebhookEvent(event);\n  } catch (error) {\n    // Log error but don't affect response\n    console.error('Webhook processing error:', error);\n  }\n}\n```\n\n2. Idempotency\n\n\nHandle duplicate events gracefully:\n\n```typescript\nasync function processWebhookEvent(event: WebhookEvent) {\n  // Check if event was already processed\n  const processed = await db.webhookEvents.findOne({\n    eventId: event.id\n  });\n  \n  if (processed) {\n    return; // Skip processing\n  }\n  \n  // Process the event\n  await handleEvent(event);\n  \n  // Mark as processed\n  await db.webhookEvents.create({\n    eventId: event.id,\n    type: event.type,\n    processedAt: new Date()\n  });\n}\n```\n\n3. Error Handling\n\n\nImplement robust error handling:\n\n```typescript\nasync function handleWebhook(req: Request, res: Response) {\n  try {\n    // Verify signature\n    \n    // Parse event\n    const event = JSON.parse(req.body.toString());\n    \n    // Return 200 quickly\n    res.json({ received: true });\n    \n    // Process asynchronously\n    await processWebhookEvent(event);\n  } catch (error) {\n    console.error('Webhook error:', error);\n    \n    // Don't expose error details\n    res.status(400).json({\n      error: 'Invalid webhook payload'\n    });\n  }\n}\n```\n\n4. Logging\n\n\nImplement comprehensive logging:\n\n```typescript\nfunction logWebhookEvent(event: WebhookEvent) {\n  // Remove sensitive data\n  const sanitizedEvent = {\n    ...event,\n    data: {\n      ...event.data,\n      customer: '[REDACTED]'\n    }\n  };\n  \n  console.log('Webhook received:', {\n    id: event.id,\n    type: event.type,\n    created: event.created,\n    data: sanitizedEvent.data\n  });\n}\n```\n\nTesting Webhooks\n\n\nLocal Development\n\n\nUse the CLI for local testing:\n\n```bash\nlomi webhook forward --url \n```\n\nTest Events\n\n\nSend test events using the CLI:\n\n```bash\nlomi webhook test --event payment.succeeded\n```\n\nMonitoring\n\n\n1. View Recent Events\n\n\n```bash\nlomi webhook events list\n```\n\n2. Retry Failed Events\n\n\n```bash\nlomi webhook events retry \n```\n\nNext Steps\n\n\n- [Security Best Practices](./security-best-practices)\n- [Error Handling](./error-handling)\n- [API Reference](/api-reference) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/handling-webhooks"
  },
  "docs/advanced-guides/idempotency-keys": {
    "name": "idempotency-keys",
    "content": "Idempotency\n\n\nIdempotency ensures that an API request can't be performed multiple times by mistake. This is crucial for payment operations to prevent duplicate charges.\n\nHow It Works\n\n\n1. You generate a unique key for each request\n2. Include the key in your request header\n3. If you retry with the same key, you'll get the same response\n\nUsing Idempotency Keys\n\n\nInclude the `idempotency-key` header in your requests:\n\n```typescript\n// Using the SDK\nconst session = await lomi.checkoutSessions.create({\n  merchant_id: 'your_merchant_id',\n  amount: 1000,\n  currency: 'XOF',\n  provider_codes: ['ORANGE_MONEY']\n}, {\n  idempotencyKey: 'unique_request_id_123'\n});\n\n// Direct API calls\nconst response = await fetch(' {\n  method: 'POST',\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY,\n    'idempotency-key': 'unique_request_id_123',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    // request parameters\n  })\n});\n```\n\nGenerating Keys\n\n\nGenerate unique, deterministic keys based on your business logic:\n\n```typescript\nfunction generateIdempotencyKey(orderId: string): string {\n  const timestamp = Date.now();\n  return `order_${orderId}_${timestamp}`;\n}\n\n// Using UUID v4\nimport { v4 as uuidv4 } from 'uuid';\nconst idempotencyKey = uuidv4();\n\n// Using order-specific information\nconst idempotencyKey = `order_${orderId}_${timestamp}_${amount}`;\n```\n\nKey Lifecycle\n\n\n- Keys are valid for 24 hours\n- After 24 hours, the same key can be reused\n- Keys must be unique across all your requests\n\nError Handling\n\n\n```typescript\ntry {\n  const session = await lomi.checkoutSessions.create({\n    // ... parameters\n  }, {\n    idempotencyKey: 'unique_key'\n  });\n} catch (error) {\n  if (error.code === 'idempotency_key_reused') {\n    // Key was used within last 24 hours\n    console.error('Duplicate request detected');\n  } else if (error.code === 'idempotency_key_invalid') {\n    // Invalid key format\n    console.error('Invalid idempotency key');\n  }\n}\n```\n\nBest Practices\n\n\n1. **Key Generation**\n   - Use UUIDs or order-specific information\n   - Include timestamp for uniqueness\n   - Keep keys reasonably short\n\n2. **Storage**\n   - Store keys with request outcomes\n   - Clean up old keys periodically\n   - Index keys for quick lookups\n\n3. **Retry Logic**\n   ```typescript\n   async function withIdempotency(fn, key, maxRetries = 3) {\n     for (let i = 0; i  \n             setTimeout(resolve, Math.pow(2, i) * 1000)\n           );\n           continue;\n         }\n         throw error;\n       }\n     }\n   }\n   \n   // Usage\n   await withIdempotency(\n     (key) => lomi.checkoutSessions.create({\n       // ... parameters\n     }, { idempotencyKey: key }),\n     'unique_key_123'\n   );\n   ```\n\nCommon Scenarios\n\n\n1. **Payment Creation**\n   ```typescript\n   const idempotencyKey = `payment_${orderId}_${amount}_${timestamp}`;\n   ```\n\n2. **Refunds**\n   ```typescript\n   const idempotencyKey = `refund_${paymentId}_${amount}_${timestamp}`;\n   ```\n\n3. **Webhook Retries**\n   ```typescript\n   const idempotencyKey = `webhook_${eventId}_${attempt}`;\n   ```\n\nNext Steps\n\n\n- [Error Handling](./error-handling)\n- [Webhooks](./handling-webhooks)\n- [API Reference](/api-reference) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/idempotency-keys"
  },
  "docs/advanced-guides/security-best-practices": {
    "name": "security-best-practices",
    "content": "Security Best Practices\n\n\nImplementing robust security measures is crucial when handling payments. Follow these best practices to ensure secure integration with lomi.\n\nAPI Authentication\n\n\nAPI Key Security\n\n\n1. **Environment Variables**\n   ```typescript\n   // Don't hardcode API keys\n   const lomi = new LomiSDK({\n     apiKey: process.env.LOMI_API_KEY\n   });\n   ```\n\n2. **Key Rotation**\n   - Rotate API keys periodically\n   - Use different keys for development and production\n   - Revoke compromised keys immediately\n\n3. **Access Control**\n   - Limit API key access to necessary services\n   - Use test keys for development and testing\n   - Monitor API key usage for suspicious activity\n\nRequest Security\n\n\nTLS Requirements\n\n\nAll API requests must use HTTPS/TLS:\n\n```typescript\nconst api = axios.create({\n  baseURL: '\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY\n  }\n});\n```\n\nRequest Validation\n\n\n1. **Input Sanitization**\n   ```typescript\n   function sanitizeAmount(amount: number): number {\n     return Math.floor(Math.abs(amount));\n   }\n   \n   function sanitizePhoneNumber(phone: string): string {\n     return phone.replace(/[^\\d+]/g, '');\n   }\n   ```\n\n2. **Schema Validation**\n   ```typescript\n   import { z } from 'zod';\n   \n   const PaymentSchema = z.object({\n     amount: z.number().positive(),\n     currency: z.enum(['XOF']),\n     provider_codes: z.array(z.string()),\n     merchant_id: z.string()\n   });\n   \n   function validatePaymentRequest(data: unknown) {\n     return PaymentSchema.parse(data);\n   }\n   ```\n\nWebhook Security\n\n\nSignature Verification\n\n\nAlways verify webhook signatures:\n\n```typescript\nimport crypto from 'crypto';\n\nfunction verifyWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n  \n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(hmac)\n  );\n}\n\n// Express middleware\napp.post('/webhook', express.raw({type: 'application/json'}), (req, res) => {\n  const signature = req.headers['lomi-signature'];\n  \n  if (!signature || !verifyWebhookSignature(\n    req.body,\n    signature as string,\n    process.env.WEBHOOK_SECRET\n  )) {\n    return res.status(400).json({ error: 'Invalid signature' });\n  }\n  \n  // Process webhook\n});\n```\n\nWebhook Endpoints\n\n\n1. **Access Control**\n   - Use HTTPS endpoints only\n   - Implement IP whitelisting\n   - Rate limit webhook endpoints\n\n2. **Error Handling**\n   ```typescript\n   app.post('/webhook', async (req, res) => {\n     try {\n       // Process webhook\n       res.status(200).send('OK');\n     } catch (error) {\n       // Log error details securely\n       console.error('Webhook processing error:', error);\n       \n       // Return generic error to caller\n       res.status(500).json({\n         error: 'Internal server error'\n       });\n     }\n   });\n   ```\n\nData Security\n\n\nSensitive Data Handling\n\n\n1. **Data Minimization**\n   ```typescript\n   // Only collect necessary data\n   const session = await lomi.checkoutSessions.create({\n     merchant_id: merchantId,\n     amount: amount,\n     currency: 'XOF',\n     provider_codes: ['ORANGE_MONEY'],\n     metadata: {\n       orderId: order.id\n       // Don't include sensitive customer data\n     }\n   });\n   ```\n\n2. **Secure Storage**\n   - Never store full payment details\n   - Encrypt sensitive data at rest\n   - Implement proper access controls\n\nError Logging\n\n\n```typescript\n// Avoid logging sensitive data\nfunction logError(error: Error, context: object) {\n  const sanitizedContext = {\n    ...context,\n    apiKey: '[REDACTED]',\n    customerPhone: '[REDACTED]'\n  };\n  \n  console.error('Error:', {\n    message: error.message,\n    stack: error.stack,\n    context: sanitizedContext\n  });\n}\n```\n\nNetwork Security\n\n\nRate Limiting\n\n\nImplement rate limiting for your endpoints:\n\n```typescript\nimport rateLimit from 'express-rate-limit';\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\napp.use('/api/', limiter);\n```\n\nTimeouts\n\n\nSet appropriate timeouts:\n\n```typescript\nconst api = axios.create({\n  timeout: 10000, // 10 seconds\n  headers: {\n    'x-api-key': process.env.LOMI_API_KEY\n  }\n});\n```\n\nMonitoring and Alerts\n\n\n1. **Activity Monitoring**\n   ```typescript\n   function monitorAPIUsage(event: APIEvent) {\n     if (event.amount > 1000000) { // Large transaction\n       alertTeam('Large transaction detected', event);\n     }\n     \n     if (event.errorCount > 10) { // Multiple failures\n       alertTeam('Multiple API errors detected', event);\n     }\n   }\n   ```\n\n2. **Suspicious Activity**\n   - Monitor for unusual patterns\n   - Track failed authentication attempts\n   - Alert on unexpected volume spikes\n\nDevelopment Practices\n\n\n1. **Code Security**\n   - Keep dependencies updated\n   - Use security linters\n   - Conduct regular security reviews\n\n2. **Environment Separation**\n   ```typescript\n   const config = {\n     development: {\n       apiUrl: '\n       webhookSecret: process.env.DEV_WEBHOOK_SECRET\n     },\n     production: {\n       apiUrl: '\n       webhookSecret: process.env.PROD_WEBHOOK_SECRET\n     }\n   }[process.env.NODE_ENV || 'development'];\n   ```\n\nNext Steps\n\n\n- [Error Handling](./error-handling)\n- [Idempotency Keys](./idempotency-keys)\n- [API Reference](/api-reference) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/security-best-practices"
  },
  "docs/advanced-guides/testing": {
    "name": "testing",
    "content": "Testing Guide\n\n\nThis guide covers best practices for testing your lomi integration, from local development to production readiness.\n\nTest Environment\n\n\nSetup\n\n\n1. **Test API Key**\n   ```typescript\n   const lomi = new LomiSDK({\n     apiKey: process.env.LOMI_TEST_API_KEY,\n     environment: 'test'\n   });\n   ```\n\n2. **Test Configuration**\n   ```typescript\n   // test/config.ts\n   export const testConfig = {\n     merchantId: process.env.TEST_MERCHANT_ID,\n     providers: ['FREE_MONEY', 'ORANGE_MONEY'],\n     webhookUrl: '\n     amount: 1000,\n     currency: 'XOF'\n   };\n   ```\n\nIntegration Tests\n\n\n1. Payment Flow\n\n\n```typescript\nimport { expect } from 'chai';\nimport { LomiSDK } from '@lomi/sdk';\n\ndescribe('Payment Flow', () => {\n  const lomi = new LomiSDK({\n    apiKey: process.env.LOMI_TEST_API_KEY\n  });\n  \n  it('should create a checkout session', async () => {\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: testConfig.merchantId,\n      amount: testConfig.amount,\n      currency: testConfig.currency,\n      provider_codes: testConfig.providers,\n      metadata: {\n        orderId: 'test_order_123'\n      }\n    });\n    \n    expect(session.id).to.be.a('string');\n    expect(session.status).to.equal('pending');\n  });\n  \n  it('should retrieve a session', async () => {\n    const session = await lomi.checkoutSessions.retrieve(\n      'cs_test_123'\n    );\n    \n    expect(session.status).to.be.oneOf([\n      'pending',\n      'succeeded',\n      'failed'\n    ]);\n  });\n});\n```\n\n2. Webhook Testing\n\n\n```typescript\nimport express from 'express';\nimport crypto from 'crypto';\n\ndescribe('Webhook Handling', () => {\n  const app = express();\n  let server;\n  \n  before(() => {\n    app.post('/webhooks', \n      express.raw({type: 'application/json'}),\n      handleWebhook\n    );\n    server = app.listen(3000);\n  });\n  \n  after(() => {\n    server.close();\n  });\n  \n  it('should verify webhook signatures', () => {\n    const payload = Buffer.from(JSON.stringify({\n      type: 'payment.succeeded',\n      data: {}\n    }));\n    \n    const signature = crypto\n      .createHmac('sha256', process.env.WEBHOOK_SECRET)\n      .update(payload)\n      .digest('hex');\n      \n    const isValid = verifySignature(\n      payload,\n      signature,\n      process.env.WEBHOOK_SECRET\n    );\n    \n    expect(isValid).to.be.true;\n  });\n});\n```\n\n3. Error Handling\n\n\n```typescript\ndescribe('Error Handling', () => {\n  it('should handle invalid requests', async () => {\n    try {\n      await lomi.checkoutSessions.create({\n        // Invalid request\n        amount: -1000\n      });\n      \n      throw new Error('Should have thrown');\n    } catch (error) {\n      expect(error.code).to.equal('invalid_request');\n      expect(error.message).to.include('amount');\n    }\n  });\n  \n  it('should handle authentication errors', async () => {\n    const invalidLomi = new LomiSDK({\n      apiKey: 'invalid_key'\n    });\n    \n    try {\n      await invalidLomi.checkoutSessions.create({\n        // Valid request\n        merchant_id: testConfig.merchantId,\n        amount: testConfig.amount,\n        currency: testConfig.currency,\n        provider_codes: testConfig.providers\n      });\n      \n      throw new Error('Should have thrown');\n    } catch (error) {\n      expect(error.code).to.equal('authentication_error');\n    }\n  });\n});\n```\n\nEnd-to-End Testing\n\n\n1. Setup Test Environment\n\n\n```typescript\n// test/setup.ts\nimport { TestEnvironment } from './utils';\n\nbefore(async () => {\n  const env = new TestEnvironment();\n  await env.setup();\n  \n  // Create test merchant\n  const merchant = await env.createMerchant();\n  process.env.TEST_MERCHANT_ID = merchant.id;\n  \n  // Setup webhook endpoint\n  await env.setupWebhook();\n});\n\nafter(async () => {\n  await env.cleanup();\n});\n```\n\n2. Complete Payment Flow\n\n\n```typescript\ndescribe('End-to-End Payment', () => {\n  it('should complete payment flow', async () => {\n    // 1. Create checkout session\n    const session = await lomi.checkoutSessions.create({\n      merchant_id: testConfig.merchantId,\n      amount: testConfig.amount,\n      currency: testConfig.currency,\n      provider_codes: ['FREE_MONEY'],\n      metadata: {\n        orderId: 'test_order_123'\n      }\n    });\n    \n    // 2. Simulate payment\n    await lomi.test.simulatePayment(session.id);\n    \n    // 3. Verify webhook received\n    const event = await waitForWebhook('payment.succeeded');\n    expect(event.data.id).to.equal(session.id);\n    \n    // 4. Verify final status\n    const updated = await lomi.checkoutSessions.retrieve(\n      session.id\n    );\n    expect(updated.status).to.equal('succeeded');\n  });\n});\n```\n\nTest Utilities\n\n\n1. Webhook Helper\n\n\n```typescript\n// test/utils/webhook.ts\nexport class WebhookHelper {\n  private events: WebhookEvent[] = [];\n  \n  handleWebhook(event: WebhookEvent) {\n    this.events.push(event);\n  }\n  \n  async waitForEvent(type: string, timeout = 5000): Promise {\n    const start = Date.now();\n    \n    while (Date.now() - start  e.type === type);\n      if (event) return event;\n      await new Promise(r => setTimeout(r, 100));\n    }\n    \n    throw new Error(`Timeout waiting for ${type}`);\n  }\n}\n```\n\n2. Test Data Generator\n\n\n```typescript\n// test/utils/data.ts\nexport class TestData {\n  static generateOrder() {\n    return {\n      id: `order_${Date.now()}`,\n      amount: Math.floor(Math.random() * 10000) + 1000,\n      currency: 'XOF'\n    };\n  }\n  \n  static generateCustomer() {\n    return {\n      name: `Test User ${Date.now()}`,\n      email: `test${Date.now()}@example.com`,\n      phone: '+22501234567'\n    };\n  }\n}\n```\n\nCI/CD Integration\n\n\nGitHub Actions Example\n\n\n```yaml\n.github/workflows/test.yml\n\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          \n      - name: Install dependencies\n        run: npm install\n        \n      - name: Run tests\n        run: npm test\n        env:\n          LOMI_TEST_API_KEY: ${{ secrets.LOMI_TEST_API_KEY }}\n          TEST_WEBHOOK_SECRET: ${{ secrets.TEST_WEBHOOK_SECRET }}\n```\n\nNext Steps\n\n\n- [CI/CD Integration](./ci-cd)\n- [Error Handling](./error-handling)\n- [API Reference](/api-reference) ",
    "parentName": "docs",
    "path": "docs/advanced-guides/testing"
  },
  "docs/contributing/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"getting-started\": \"Getting Started\",\n  \"code-of-conduct\": \"Code of Conduct\",\n  \"code-reviews\": \"Code Reviews\",\n  \"branching-strategy\": \"Branching\",\n  \"versioning\": \"Versioning\",\n  \"best-practices\": \"Best practices\",\n  \"using-cli\": \"Using the CLI\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/contributing/_meta"
  },
  "docs/contributing/best-practices": {
    "name": "best-practices",
    "content": "Best practices\n\n\nFollowing these best practices helps maintain code quality, consistency, and security across the lomi. project.\n\nCode organization\n\n\n*(Guidance on structuring code within packages, modules, and components will be added here. Maintain a clear separation of concerns.)*\n\nSecurity\n\n\nSecurity is paramount. Follow these guidelines to protect user data and system integrity.\n\n1. Environment variables\n\n\nNever commit sensitive keys or secrets directly into the codebase. Use environment variables.\n\n```bash\n.env.example - Provide a template for required variables\n\nLOMI_API_KEY=\nLOMI_WEBHOOK_SECRET=\nNODE_ENV=development\n\n.gitignore - Ensure local environment files are not tracked\n\n.env\n.env.local\n*.log\n```\n\nRefer to the [API Environment documentation](../../developers-reference/api-environment) for managing API keys.\n\n2. Sensitive data handling\n\n\nAvoid logging sensitive information like API keys, passwords, or personal user data. If necessary, ensure it's properly redacted.\n\n```typescript\n// Example: Redact sensitive information in logs\nconst sanitizeData = (data: any) => {\n  const masked = { ...data };\n  // Define sensitive keys specific to your context\n  const sensitiveKeys = ['apiKey', 'secretKey', 'password', 'authorization', 'phoneNumber'];\n  sensitiveKeys.forEach(key => {\n    if (masked[key]) masked[key] = '[REDACTED]';\n  });\n  return masked;\n};\n```\n\nAlways validate and sanitize user input to prevent injection attacks.\nConsider practices like [Webhook Signature Verification](../../developers-reference/webhook-signature-verification) to ensure data integrity.\n\nTesting\n\n\n*(Details on testing strategies, frameworks (e.g., Jest, Vitest), and how to write and run tests for different parts of the monorepo will be added here. Aim for comprehensive unit, integration, and end-to-end tests.)*\n\nGit workflow\n\n\nAdhere to our established Git workflow for smooth collaboration.\n\n1. Branch management\n\n\nKeep feature branches focused on a single task and relatively short-lived. Regularly rebase with the `develop` branch.\n\n```bash\nCreate a focused feature branch\n\ngit checkout develop\ngit pull upstream develop\ngit checkout -b feature/add-wave-provider\n\nWork on the feature...\n\n\nCommit changes following guidelines\n\ngit commit -m \"feat(payments): implement Wave provider\"\n\nPush the branch\n\ngit push origin feature/add-wave-provider\n```\n\nSee the full [Branching Strategy](./branching-strategy) for details.\n\n2. Commit messages\n\n\nUse conventional commit messages to provide clarity and enable automated changelog generation.\n\n```bash\nFormat: (): \n\nExample types: feat, fix, docs, style, refactor, test, chore\n\nExample scopes: payments, webhooks, api, auth, docs\n\n\nfeat(auth): add API key rotation endpoint\nfix(webhook): handle signature verification errors gracefully\ndocs(api): update authentication guide example\n```\n\nDocumentation\n\n\nGood documentation is essential for maintainability and collaboration.\n\n1. Code comments\n\n\nUse comments to explain *why* something is done, not *what* it does (the code should explain the what). Use JSDoc or TSDoc for functions and complex logic.\n\n```typescript\n/**\n * Processes a payment request using the specified provider.\n * Handles potential errors and ensures idempotency.\n * @param request - The payment request details.\n * @returns A promise resolving to the payment result.\n * @throws {ValidationError} If the request payload is invalid.\n * @throws {PaymentProcessingError} If the provider fails.\n */\nasync function processPayment(\n  request: PaymentRequest\n): Promise {\n  // Implementation details...\n}\n```\n\n2. README files\n\n\nEnsure packages and significant components have README files explaining their purpose, usage, configuration, and how to run tests.\n\n```markdown\nPackage/Component Name\n\n\nOverview\n\nA brief description of what this package/component does.\n\nInstallation\n\n`pnpm add @lomi/package-name`\n\nUsage\n\nProvide clear code examples and instructions.\n\nConfiguration\n\nDetail any available configuration options.\n\nTesting\n\nExplain how to run tests for this specific package/component.\n`pnpm --filter @lomi/package-name test`\n```\n\nDeployment\n\n\nFollow standard procedures for deployment.\n\n1. CI/CD\n\n\nContinuous Integration and Continuous Deployment pipelines automate testing and deployment. Ensure your changes pass all checks.\n\n```yaml\nExample: .github/workflows/ci.yml (Simplified)\n\nname: CI Checks\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 8 # Specify pnpm version\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18' # Specify Node.js version\n          cache: 'pnpm'\n      - run: pnpm install\n      - run: pnpm lint\n      - run: pnpm test\n```\n\n2. Version control\n\n\nPackage versions are managed within their respective `package.json` files and updated according to our [Versioning](./versioning) guide.\n\n```json\n// Example: packages/api/package.json\n{\n  \"name\": \"@lomi/api\",\n  \"version\": \"1.2.3\",\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"main\": \"dist/index.js\"\n}\n```\n\nNext steps\n\n\n- [Code reviews](./code-reviews)\n- [Contributing guidelines](./contributing-guidelines)\n- [Getting support](../../docs/support/contact) ",
    "parentName": "docs",
    "path": "docs/contributing/best-practices"
  },
  "docs/contributing/branching-strategy": {
    "name": "branching-strategy",
    "content": "Branching Strategy\n\n\nWe follow a Git workflow inspired by GitFlow but simplified for continuous delivery and integration. This strategy ensures a stable production branch (`main`) while facilitating active development on the `develop` branch.\n\nMain branches\n\n\nThese are the long-lived core branches of the repository.\n\n`main` branch\n\n\n- Represents the **production-ready** code. Only fully tested and approved code resides here.\n- **Protected**: Direct pushes are disabled. Changes must come through reviewed Pull Requests from `release` or `hotfix` branches.\n- **Tagged**: Each merge into `main` corresponds to a release and should be tagged with a semantic version number (e.g., `v1.2.3`).\n- **Deployments**: Merges to `main` trigger automated deployments to the production environment.\n\n`develop` branch\n\n\n- Serves as the primary **integration branch** for ongoing development.\n- Contains the latest successfully built development code, including completed features and bug fixes awaiting release.\n- **Protected**: Requires status checks (CI tests) to pass before merging.\n- **Deployments**: Changes merged into `develop` are typically deployed automatically to a staging or pre-production environment for further testing.\n- **Source for Features**: All feature branches should be created from `develop`.\n\nFeature development\n\n\nShort-lived branches used for specific tasks.\n\nFeature branches (`feature/*`)\n\n\nUsed for developing new features.\n\n```bash\n1. Ensure your local develop is up-to-date\n\ngit checkout develop\ngit pull upstream develop\n\n2. Create your feature branch from develop\n\ngit checkout -b feature/payment-method-wave\n\n3. Work on your feature, commit changes regularly\n\n... make changes ...\n\ngit add .\ngit commit -m \"feat(payments): implement initial Wave structure\"\n\n4. Keep your branch updated with develop (optional but recommended)\n\ngit fetch upstream\ngit rebase upstream/develop\n\n5. Push your feature branch to your fork\n\ngit push origin feature/payment-method-wave\n```\n\nBug fix branches (`fix/*`)\n\n\nUsed for fixing non-critical bugs discovered during development.\n\n```bash\n1. Create bug fix branch from develop\n\ngit checkout develop\ngit pull upstream develop\ngit checkout -b fix/transaction-timeout-handling\n\n2. Fix the bug and commit\n\n... make changes ...\n\ngit add .\ngit commit -m \"fix(transactions): increase timeout and add retry logic\"\n\n3. Push the branch\n\ngit push origin fix/transaction-timeout-handling\n```\n\nRelease process\n\n\nManaged branches for preparing and executing releases.\n\nRelease branches (`release/*`)\n\n\nUsed to prepare a new production release. Allows for final testing, documentation updates, and minor bug fixes specific to the release.\n\n```bash\n1. Create release branch from develop\n\ngit checkout develop\ngit pull upstream develop\ngit checkout -b release/v1.2.0\n\n2. Perform release tasks (e.g., bump version, update changelog)\n\nnpm version minor -m \"chore(release): prepare release %s\"\n... final tests, documentation updates ...\n\n\n3. Push the release branch (allows CI to run tests)\n\ngit push origin release/v1.2.0\n\n4. Once ready, merge into main and develop, then tag main\n\n(See Merge Strategy below)\n\n```\n\nHotfix branches (`hotfix/*`)\n\n\nUsed for addressing critical bugs found in the production (`main`) branch. These require immediate attention.\n\n```bash\n1. Create hotfix branch directly from main\n\ngit checkout main\ngit pull upstream main\ngit checkout -b hotfix/critical-auth-issue-1.2.1\n\n2. Fix the critical bug\n\n... make changes ...\n\ngit add .\ngit commit -m \"fix(auth): resolve critical login vulnerability\"\n\n3. Bump the patch version\n\nnpm version patch -m \"chore(release): hotfix %s\"\n\n4. Push the hotfix branch\n\ngit push origin hotfix/critical-auth-issue-1.2.1\n\n5. Once fixed and tested, merge into main and develop, then tag main\n\n(See Merge Strategy below)\n\n```\n\nBranch protection rules\n\n\nConfigured in the GitHub repository settings to enforce the workflow.\n\n1.  **`main` Branch**\n    - Require Pull Request reviews before merging (at least 1 approval).\n    - Require status checks (CI tests, linting) to pass before merging.\n    - Require branches to be up to date before merging.\n    - **Disallow direct pushes.**\n    - Enforce linear history (prefer squash or rebase merging for PRs).\n\n2.  **`develop` Branch**\n    - Require status checks to pass before merging.\n    - Allow maintainers to merge without review (optional, based on team policy).\n    - Prefer squash or rebase merging for feature PRs to keep history clean.\n\nMerge strategy\n\n\nHow branches are merged back into the main lines.\n\n1.  **Feature/Fix branches to `develop`**\n    - Create a Pull Request from your `feature/*` or `fix/*` branch targeting the `develop` branch.\n    - Ensure CI checks pass and code review is complete (if required).\n    - **Use Squash and Merge or Rebase and Merge** via the GitHub PR interface to maintain a clean `develop` history.\n    - Delete the feature/fix branch after merging.\n\n2.  **`release/*` Branch to `main` and `develop`**\n    - Create a Pull Request from the `release/*` branch targeting `main`.\n    - Ensure all final checks and approvals are met.\n    - **Use Merge Commit (`--no-ff`)** to preserve the history of the release preparation.\n    - After merging to `main`, **tag the merge commit** on `main` with the version number (e.g., `git tag v1.2.0 `). Push the tag (`git push upstream --tags`).\n    - Create another Pull Request (or merge directly if permissions allow) from the `release/*` branch back into `develop` to incorporate any release-specific fixes made on the release branch.\n    - Delete the release branch after merging into both `main` and `develop`.\n\n3.  **`hotfix/*` Branch to `main` and `develop`**\n    - Similar to releases: Create a PR targeting `main`, merge using Merge Commit (`--no-ff`), tag the merge commit on `main`, push the tag.\n    - Create another PR (or merge directly) from the `hotfix/*` branch back into `develop` to ensure the fix is included in ongoing development.\n    - Delete the hotfix branch after merging into both `main` and `develop`.\n\nBest practices summary\n\n\n1.  **Branch naming conventions**\n    - `feature/`\n    - `fix/`\n    - `release/v`\n    - `hotfix/`\n    - Use kebab-case (hyphen-separated) descriptions.\n\n2.  **Commit messages**\n    - Follow the [Conventional Commits specification](\n    ```bash\n    # Format: (): \n    # Example: feat(payments): add Wave payment provider integration\n    ```\n    - Reference related issue numbers in the commit body or footer (e.g., `Closes #123`).\n\n3.  **Pull requests**\n    - Write clear, descriptive PR titles and descriptions.\n    - Link to the relevant issue(s).\n    - Keep PRs focused on a single logical change.\n    - Request reviews from relevant team members or code owners.\n\nNext steps\n\n\n- [Code reviews](./code-reviews)\n- [Versioning](./versioning)\n- [Contributing guidelines](./contributing-guidelines) ",
    "parentName": "docs",
    "path": "docs/contributing/branching-strategy"
  },
  "docs/contributing/code-of-conduct": {
    "name": "code-of-conduct",
    "content": "Code of conduct\n\n\nOur pledge\n\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\nOur standards\n\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n- Using welcoming and inclusive language.\n- Being respectful of differing viewpoints and experiences.\n- Gracefully accepting constructive criticism.\n- Focusing on what is best for the community.\n- Showing empathy towards other community members.\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and unwelcome sexual attention or advances.\n- Trolling, insulting or derogatory comments, and personal or political attacks.\n- Public or private harassment.\n- Publishing others' private information, such as a physical or email address, without their explicit permission.\n- Other conduct which could reasonably be considered inappropriate in a professional setting.\n\nEnforcement responsibilities\n\n\nCommunity leaders (e.g., project maintainers, moderators) are responsible for clarifying and enforcing our standards of acceptable behavior. They will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\nScope\n\n\nThis Code of Conduct applies within all community spaces (e.g., GitHub repositories, Slack/Discord, mailing lists) and also applies when an individual is officially representing the community in public spaces (e.g., using an official email address, posting via an official social media account, acting as an appointed representative at an event).\n\nEnforcement process\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement.\n\nAll complaints will be reviewed and investigated promptly and fairly.\n\nCommunity leaders are obligated to respect the privacy and security of the reporter of any incident.\n\nEnforcement actions\n\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n1.  **Correction**\n    - **Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n    - **Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n    ```bash\n    # Example private message format\n    \"Your recent comment [link/context] was considered inappropriate under our Code of Conduct because [reason]. Please review the CoC and adjust your communication accordingly.\"\n    ```\n\n2.  **Warning**\n    - **Community Impact**: A violation through a single incident or series of actions.\n    - **Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n    ```bash\n    # Example warning format\n    \"This is a formal warning regarding your behavior [link/context]. Further violations of the Code of Conduct may result in temporary or permanent restrictions from the community.\"\n    ```\n\n3.  **Permanent ban**\n    - **Community impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n    - **Consequence**: A permanent ban from any sort of public interaction within the community.\n    ```bash\n    # Example ban notification\n    \"Due to repeated or severe violations of our Code of Conduct, your access to the lomi. community spaces has been permanently revoked.\"\n    ```\n\nReporting guidelines\n\n\nIf you are subject to or witness unacceptable behavior, or have any other concerns, please notify the community leaders as soon as possible.\n\n1. Contact information\n\n\nReports can be made via:\n\n- **Email**: [conduct@lomi.africa](mailto:conduct@lomi.africa) (This address reaches designated moderators).\n- **GitHub**: If comfortable, open a confidential issue in a private repository (details provided upon request to the email above) or directly message a maintainer.\nPlease **do not** report CoC violations via public GitHub issues.\n- **Discord**: Send a direct message to users with the `@Moderator` role in our [Discord server](\n\n2. Report content\n\n\nTo help us address the issue effectively, please include as much detail as possible:\n\n```markdown\nCode of conduct incident report\n\n\n- **Your contact info (optional but helpful):** [Your name/email]\n- **Date/time of incident:** [Approximate time and timezone]\n- **Location of incident:** [e.g., GitHub issue link, Discord channel name, etc.]\n- **Description of behavior:** [Detailed account of what happened]\n- **Individuals involved:** [Names/usernames of people involved, including witnesses if any]\n- **Supporting evidence:** [Links, screenshots, logs, etc.]\n- **Desired outcome (optional):** [What resolution are you hoping for?]\n```\n\n3. Confidentiality and response\n\n\nWe will maintain confidentiality to the extent possible while investigating. Retaliation against reporters is a violation of this Code of Conduct.\n\n- **Acknowledgment**: We aim to acknowledge receipt of reports within 24-48 business hours.\n- **Investigation**: The duration will depend on the complexity, but we strive to conclude investigations within 1-2 weeks.\n- **Resolution**: We will communicate the outcome and any actions taken to the reporter, where appropriate.\n\nAttribution\n\n\nThis Code of Conduct is adapted from the [Contributor Covenant]( version 2.1, available at [\n\nFor answers to common questions about this code of conduct, see the FAQ at [\n\nNext steps\n\n\n- [Contributing guidelines](./contributing-guidelines)\n- [Best practices](./best-practices)\n- [Getting support](../../support/contact) ",
    "parentName": "docs",
    "path": "docs/contributing/code-of-conduct"
  },
  "docs/contributing/code-reviews": {
    "name": "code-reviews",
    "content": "Code reviews\n\n\nOur code review process ensures code quality, knowledge sharing, and maintainability.\n\nPull request guidelines\n\n\n1. Title format\n\n```bash\nFormat\n\n(): \n\nExamples\n\nfeat(payments): implement Wave payment provider\nfix(webhooks): handle timeout errors\ndocs(api): update authentication guide\n```\n\n2. Description template\n\n```markdown\nChanges\n\n- Added Wave payment provider integration\n- Implemented webhook signature verification\n- Updated API documentation\n\nTesting\n\n- Unit tests added for payment processing\n- Integration tests for webhook handling\n- Manual testing with test credentials\n\nScreenshots\n\n[If applicable]\n\nRelated issues\n\nCloses #123\n```\n\nReview process\n\n\n1. Self review\n\n```bash\nRun tests\n\nnpm test\n\nCheck linting\n\nnpm run lint\n\nBuild documentation\n\nnpm run docs:build\n```\n\n2. Code review\n\n- Request reviews from relevant team members\n- Address feedback promptly\n- Re-request review after changes\n\n3. CI checks\n\n- All tests must pass\n- Code coverage requirements met\n- No security vulnerabilities\n- Documentation updated\n\nReview checklist\n\n\n1. Code quality\n\n- [ ] Follows coding standards\n- [ ] No duplicate code\n- [ ] Proper error handling\n- [ ] Efficient implementation\n\n2. Testing\n\n- [ ] Unit tests added/updated\n- [ ] Integration tests if needed\n- [ ] Edge cases covered\n- [ ] Test coverage maintained\n\n3. Security\n\n- [ ] Input validation\n- [ ] Authentication/Authorization\n- [ ] Sensitive data handling\n- [ ] Security best practices\n\n4. Documentation\n\n- [ ] Code comments\n- [ ] API documentation\n- [ ] README updates\n- [ ] Changelog entry\n\nBest practices\n\n\n1. As a submitter\n\n```typescript\n// DO: Small, focused changes\nfunction validatePayment(amount: number): boolean {\n  return amount > 0 && amount  0;\n}\n\n// Unhelpful feedback\n// This is wrong\n```\n\n3. Code examples\n\n```typescript\n// Before\nfunction process(data) {\n  if (data) {\n    return data.value;\n  }\n}\n\n// After\nfunction process(data: InputData): OutputData {\n  if (!data) {\n    throw new Error('Data is required');\n  }\n  return data.value;\n}\n```\n\nReview comments\n\n\n1. Constructive feedback\n\n```typescript\n// Instead of:\n// This is messy\n\n// Better:\n// Consider extracting this logic into a separate function\n// for better reusability and testing:\nfunction validateWebhookSignature(\n  payload: string,\n  signature: string\n): boolean {\n  // Implementation\n}\n```\n\n2. Suggestions\n\n```typescript\n// Instead of:\n// Use better names\n\n// Better:\n// Consider more descriptive names:\n// - `processPayment` -> `validateAndProcessPayment`\n// - `data` -> `paymentData`\n```\n\nAfter review\n\n\n1. Addressing feedback\n\n```bash\nUpdate branch\n\ngit fetch origin\ngit rebase origin/develop\n\nMake changes\n\ngit add .\ngit commit -m \"fix: address review feedback\"\n\nForce push if needed\n\ngit push --force-with-lease\n```\n\n2. Merging\n\n```bash\nSquash and merge\n\ngit checkout develop\ngit merge --squash feature/payment-method\n\nOr rebase and merge\n\ngit checkout develop\ngit rebase feature/payment-method\n```\n\nNext steps\n\n\n- [Contributing guidelines](./contributing-guidelines)\n- [Branching strategy](./branching-strategy)\n- [Best practices](./best-practices) ",
    "parentName": "docs",
    "path": "docs/contributing/code-reviews"
  },
  "docs/contributing/overview": {
    "name": "overview",
    "content": "**Contributing**\n\n\nWe're thrilled you're interested in helping improve lomi. Whether you're fixing bugs, adding new features, improving the documentation, or reporting issues, your contributions are valuable and we are grateful for your help.\n\nThis section provides guidelines and best practices to help you get started with contributing to the lomi. project.\n\n**How to contribute**\n\n\nThere are many ways to contribute:\n\n- **Reporting bugs**: If you find a bug, please report it on [GitHub Issues](\n- **Suggesting enhancements**: Have an idea for a new feature or improvement? Share it via [GitHub Issues](\n- **Writing code**: Contribute directly to the codebase by fixing bugs or implementing new features. See the [Getting Started](./getting-started) guide.\n- **Improving the docs**: Help us make our documentation clearer and more comprehensive.\n- **Community support**: Answer questions and help other users in the [Discord community](\n\nLinks\n\n\nBefore you start, please familiarize yourself with these important documents:\n\n- **[Code of Conduct](./code-of-conduct)**: Our expectations for behavior within the community.\n- **[Contributing guidelines](./contributing-guidelines)**: Detailed steps for contributing code and documentation.\n- **[Branching strategy](./branching-strategy)**: How we manage branches for development and releases.\n\nWe appreciate your interest and look forward to hearing from you!",
    "parentName": "docs",
    "path": "docs/contributing/overview"
  },
  "docs/contributing/using-cli": {
    "name": "using-cli",
    "content": "Using git CLI for collaboration\n\n\nWhen collaborating on your lomi. integration using Git, you can use the command-line interface (CLI) to perform various Git operations. This allows you to manage your integration code and configurations effectively.\n\nInitializing a Git repository\n\n\nTo get started, initialize a Git repository in the directory where your integration code and configuration files are stored:\n\n```bash\ngit init\n```\n\nStaging and committing changes\n\n\nAfter making changes to your integration code or configurations, stage the changes using the `git add` command:\n\n```bash\ngit add .\n```\n\nThen, commit the changes with a descriptive message:\n\n```bash\ngit commit -m \"Update payment provider configuration\"\n```\n\nPushing changes to a remote repository\n\n\nTo collaborate with your team, push your changes to a remote repository:\n\n```bash\ngit push origin main\n```\n\nReplace `main` with the appropriate branch name if you're using a different branching strategy.\n\nPulling changes from a remote repository\n\n\nTo get the latest changes made by your team members, pull the changes from the remote repository:\n\n```bash\ngit pull origin main\n```\n\nAgain, replace `main` with the appropriate branch name if necessary.\n\nResolving merge conflicts\n\n\nIf you encounter merge conflicts when pulling changes, you'll need to resolve them manually. Open the conflicting files, make the necessary changes, and then stage and commit the resolved files:\n\n```bash\ngit add resolved_file.js\ngit commit -m \"Resolve merge conflicts\"\n```\n\nBest practices\n\n\n- Commit frequently with descriptive messages\n- Use branches for developing new features or configurations\n- Regularly pull changes from the remote repository to stay up-to-date\n- Resolve merge conflicts carefully and communicate with your team\n\nBy using the Git CLI effectively and following best practices, you can collaborate smoothly with your team on your lomi. integration.",
    "parentName": "docs",
    "path": "docs/contributing/using-cli"
  },
  "docs/contributing/versioning": {
    "name": "versioning",
    "content": "Versioning\n\n\nWe follow Semantic Versioning (SemVer) for all our packages and APIs.\n\nVersion format\n\n\n```bash\nMAJOR.MINOR.PATCH\nExample: 1.2.3\n\n```\n\n- **MAJOR**: Breaking changes\n- **MINOR**: New features (backward compatible)\n- **PATCH**: Bug fixes (backward compatible)\n\nVersion management\n\n\nNPM version\n\n\n```bash\nPatch release\n\nnpm version patch\n1.2.3 -> 1.2.4\n\n\nMinor release\n\nnpm version minor\n1.2.3 -> 1.3.0\n\n\nMajor release\n\nnpm version major\n1.2.3 -> 2.0.0\n\n```\n\nGit tags\n\n\n```bash\nCreate annotated tag\n\ngit tag -a v1.2.3 -m \"Version 1.2.3\"\n\nPush tags\n\ngit push origin --tags\n```\n\nRelease process\n\n\n1. **Update version**\n   ```bash\n   # Update package.json\n   npm version minor\n\n   # Update changelog\n   git cliff -o CHANGELOG.md\n   \n   # Commit changes\n   git add CHANGELOG.md\n   git commit -m \"chore: update changelog\"\n   ```\n\n2. **Create release**\n   ```bash\n   # Create GitHub release\n   gh release create v1.2.3 \\\n     --title \"Version 1.2.3\" \\\n     --notes-file CHANGELOG.md\n   ```\n\nAPI versioning\n\n\nURL versioning\n\n\n```bash\nCurrent version\n\n\n\nFuture version\n\n\n```\n\nVersion lifecycle\n\n\n1. **Active**\n   - Latest version\n   - Full support\n   - Regular updates\n\n2. **Maintained**\n   - Previous version\n   - Security updates\n   - Bug fixes only\n\n3. **Deprecated**\n   - Old version\n   - Limited support\n   - Migration required\n\nBreaking changes\n\n\n1. **Notification**\n   - Advance notice (minimum 6 months)\n   - Migration guide\n   - Deprecation warnings\n\n2. **Documentation**\n   - Version comparison\n   - Migration steps\n   - Code examples\n\n3. **Support**\n   - Migration assistance\n   - Legacy version support\n   - Transition period\n\nVersion control\n\n\nPackage files\n\n\n```json\n{\n  \"name\": \"@lomi/sdk\",\n  \"version\": \"1.2.3\",\n  \"engines\": {\n    \"node\": \">=14\"\n  }\n}\n```\n\nLock files\n\n\n```bash\nNPM\n\npackage-lock.json\n\nYarn\n\nyarn.lock\n```\n\nBest practices\n\n\n1. **Version numbers**\n   - Use semantic versioning\n   - Document changes\n   - Keep changelog updated\n\n2. **Dependencies**\n   - Pin exact versions\n   - Regular updates\n   - Security audits\n\n3. **Release notes**\n   - Clear descriptions\n   - Breaking changes\n   - Upgrade guide\n\nNext steps\n\n\n- [Contributing guidelines](./contributing-guidelines)\n- [API reference](/api-reference)\n- [Changelog]( ",
    "parentName": "docs",
    "path": "docs/contributing/versioning"
  },
  "docs/freedom/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"open-source\": \"Freedom of choice\",\n  \"codebase\": \"Codebase\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/freedom/_meta"
  },
  "docs/freedom/codebase": {
    "name": "codebase",
    "content": "**Codebase**\n\n\nThis page provides an overview of the directory structures for both the main lomi monorepo and the individual merchant application.\n\n**Roadmap**\n\n\nWe are progressively open-sourcing the entire lomi. project:\n\n-   **Currently Open Source**:\n    -   Merchant dashboard\n    -   Documentation website: **[apps/developers](\n    -   Boilerplate Next.js + Medusa: **[apps/store](\n    -   Boilerplate Next.js + Sanity: **[apps/events](\n    -   Boilerplate Vite + Medusa: **[apps/commerce](\n\n-   **Opening Soon**:\n    -   API service: **[apps/api](\n    -   Shopify extension: **[apps/shopify](\n    -   CLI tool: **[apps/cli](\n    -   Jumbo (Online IDE): **[apps/jumbo](\n\nEverything will be made available in the coming weeks and all separate repositories will be merged in the monorepo.\n\n**Monorepo** : `lomiafrica/lomi./`\n\n\nThis is the main repository containing all the different applications and shared packages.\n\n```text\n└── lomi./\n    ├── README.md\n    ├── CODE_OF_CONDUCT.md\n    ├── CONTRIBUTING.md\n    ├── LICENSE\n    ├── SECURITY.md\n    └── apps/\n        ├── admin/         # Admin dashboard/portal\n        ├── api/           # Backend API\n        ├── cli/           # Command-line interface tools\n        ├── commerce/      # E-commerce boilerplate\n        ├── developers/    # Developer documentation website (this app)\n        ├── shopify/       # Shopify extension app\n        ├── store/         # E-commerce boilerplate\n        ├── events/        # E-commerce boilerplate\n        ├── jumbo/         # AI-powered online IDE\n        └── website/       # Website and merchant dashboard\n```\n\n**Merchant dashboard** : `lomi./website`\n\n\nThis represents the structure of the core application that merchants interact with or might self-host.\n\n```text\n└── lomi./website/                         # Root directory for the merchant website/\n    ├── README.md                          # Project documentation\n    ├── bunfig.toml                        # Bun configuration file\n    ├── components.json                    # UI component library configuration (e.g., shadcn/ui)\n    ├── index.html                         # Main HTML entry point for Vite\n    ├── package.json                       # Project dependencies and scripts\n    ├── postcss.config.js                  # PostCSS configuration\n    ├── tailwind.config.js                 # Tailwind CSS configuration\n    ├── tsconfig.json                      # TypeScript configuration for the project\n    ├── tsconfig.node.json                 # TypeScript configuration for Node.js specific parts (e.g., Vite config)\n    ├── vercel.json                        # Vercel deployment configuration\n    ├── vite.config.d.ts                   # Vite TypeScript declaration file\n    ├── vite.config.ts                     # Vite build tool configuration\n    ├── .env.example                       # Example environment variables file\n    ├── .eslintrc.cjs                      # ESLint configuration file\n    ├── api/                               # Serverless functions/webhook handlers \n        ....\n    ├── public/                            # Static assets served directly\n    │   ├── manifest.json                  # Web application manifest\n    │   ├── robots.txt                     # Instructions for web crawlers\n    │   ├── sitemap.xml                    # Sitemap for SEO\n    │   ├── assets/                        # General static assets\n    │   │   └── lomi.brand.zip             # Brand assets archive\n    │   ├── company/                       # Company-related images/assets\n            ....\n    │   ├── crypto/                        # Cryptocurrency icons/assets\n            ....\n    │   ├── customers/                     # Customer logos/assets\n            ....\n    │   ├── integrations/                  # Integration partner logos/assets\n            ....\n    │   ├── okra/                          # Okra integration assets (if any)\n    │   ├── payment_channels/              # Payment channel icons/assets\n            ....\n    │   ├── random/                        # Miscellaneous images/assets\n            ....\n    │   └── regulatory/                    # Regulatory compliance logos/assets\n            ....\n    ├── src/                               # Main application source code\n    │   ├── App.tsx                        # Root React application component\n    │   ├── env.d.ts                       # Environment variable type definitions\n    │   ├── i18n.ts                        # Internationalization setup (i18next)\n    │   ├── index.css                      # Global CSS styles or Tailwind base/imports\n    │   ├── main.tsx                       # Main entry point for the React app (renders App.tsx)\n    │   ├── router.tsx                     # Application routing setup (e.g., React Router)\n    │   ├── vite-env.d.ts                  # Vite environment type definitions\n    │   ├── api/                           # Server-side API logic (if running a backend server alongside frontend)\n    │   │   ├── server.js                  # Main server file (if applicable)\n    │   │   ├── ai/                        # AI-related API endpoints/logic\n                ....\n    │   │   └── checkout/                  # Checkout process API logic and associated components\n                ....\n    │   ├── components/                    # Reusable UI components\n    │   │   ├── aceternity/                # Specific UI library components (Aceternity UI)\n                ....\n    │   │   ├── auth/                      # Authentication-related UI components\n                ....\n    │   │   ├── blog/                      # Blog-specific UI components\n                ....\n    │   │   ├── charts/                    # Charting components\n                ....\n    │   │   ├── custom/                    # Custom, non-library base components\n                ....\n    │   │   ├── design/                    # Design system elements, layout, branding\n                ....\n    │   │   ├── icons/                     # Custom icon components\n                ....\n    │   │   ├── landing/                   # Components for the public landing pages\n                ....\n    │   │   ├── metrics/                   # Components for displaying metrics/stats\n                ....\n    │   │   ├── mfa/                       # Multi-Factor Authentication components\n                ....\n    │   │   ├── portal/                    # Components specific to the merchant portal/dashboard\n                ....\n    │   │   │   ├── balance/               # Components for managing balance/payouts\n                    ....\n    │   │   │   ├── customers/             # Components for managing customers\n                    ....\n    │   │   │   ├── logs/                  # Components for viewing logs (API, webhooks, etc.)\n                    ....\n    │   │   │   ├── payment-links/         # Components for managing payment links\n                    ....\n    │   │   │   ├── product/               # Components for managing products/services\n                    ....\n    │   │   │   ├── reporting/             # Components for viewing reports and analytics\n                        ....\n    │   │   │   ├── storefront/            # Components for customizing the hosted storefront/checkout\n                    ....\n    │   │   │   ├── subscription/          # Components for managing subscriptions\n                    ....\n    │   │   │   ├── transactions/          # Components for viewing transactions\n                    ....\n    │   │   │   └── webhooks/              # Components for managing webhook endpoints\n                    ....\n    │   │   ├── tables/                    # Reusable table components & configurations\n                    ....\n    │   │   └── ui/                        # Base UI elements (e.g., shadcn/ui library components)\n                ....\n    │   ├── lib/                           # Utility functions, contexts, hooks, shared logic\n    │   │   ├── formatter.ts               # Formatting utilities (dates, currency, etc.)\n    │   │   ├── actions/                   # Reusable functions (client/server actions, utils)\n                ....\n    │   │   ├── contexts/                  # React context providers/consumers\n                ....\n    │   │   ├── data/                      # Static data, constants, enums\n                ....\n    │   │   ├── hooks/                     # Custom React hooks\n                ....\n    │   │   ├── i18n/                      # Internationalization configuration files\n                ....\n    │   │   ├── locales/                   # Language translation files (JSON)\n                ....\n    │   │   ├── routes/                    # Route definitions or route-related utilities\n                ....\n    │   │   ├── sanity/                    # Sanity CMS integration utilities\n                ....\n    │   │   ├── services/                  # Service integrations or API wrappers\n                ....\n    │   │   ├── tools/                     # Developer tools or specific complex utilities\n                ....\n    │   │   └── types/                     # TypeScript type definitions\n                ....\n    │   ├── pages/                         # Application pages/routes (likely file-based routing)\n    │   │   ├── auth/                      # Authentication flow pages (login, signup, reset)\n                ....\n    │   │   ├── blog/                      # Blog pages\n                ....\n    │   │   ├── checkout/                  # Hosted checkout flow pages\n                ....\n    │   │   ├── errors/                    # Error pages (404, 500, etc.)\n                ....\n    │   │   ├── landing/                   # Public marketing/landing pages\n                ....\n    │   │   └── portal/                    # Merchant portal pages/dashboard sections\n                ....\n    │   │       ├── settings/              # Settings pages within the portal\n                ....\n    │   └── utils/                         # Specific utility integrations (SDKs, clients)\n    │       ├── infobip/                   # Infobip SMS/WhatsApp integration\n            ....\n    │       ├── mixpanel/                  # Mixpanel analytics integration\n            ....\n    │       ├── np/\n            ....\n    │       ├── orange/                    # Orange Money integration\n            ....\n    │       ├── redis/                     # Redis client/utility\n            ....\n    │       ├── resend/                    # Resend email integration\n            ....\n    │       ├── supabase/                  # Supabase client utilities\n            ....\n    │       └── wave/                      # Wave Mobile Money integration\n            ....\n    ├── supabase/                          # Supabase configuration and database migrations\n    │   ├── config.toml                    # Supabase CLI configuration\n    │   ├── seed.sql                       # Database seeding script (optional)\n    │   ├── .gitignore                     # Supabase specific gitignore rules\n    │   └── migrations/                    # Database schema migration files (SQL)\n            ....\n    └── .github/                           # GitHub specific configurations\n        └── workflows/                     # GitHub Actions CI/CD workflows\n            ....\n```\n\n**Contributing**\n\n\nWe welcome contributions to improve lomi. and its features. If you find any issues or have suggestions, please open an issue or submit a pull request on our [GitHub repository](\n\nBefore contributing, please:\n\n1.  Read our [Code of Conduct](\n2.  Review our [Security Policy](\n3.  Ensure your contribution doesn't modify files marked with `/* @proprietary license */`\n\nFor detailed contribution guidelines, please see the main [CONTRIBUTING.md]( in the monorepo.\n\nIf you're not sure how you can contribute, just send us an email!\n\n**Useful links**\n\n\n-   **Discord**: Join our [Discord community]( for discussions and help\n-   **Twitter**: Follow [@lomiafrica]( for updates\n-   **GitHub**: Submit [issues]( for bug reports and feature requests\n-   **PRs**: Submit [pull requests](\n-   **Email**: Contact [hello@lomi.africa](mailto:hello@lomi.africa) for direct support",
    "parentName": "docs",
    "path": "docs/freedom/codebase"
  },
  "docs/freedom/open-source": {
    "name": "open-source",
    "content": "import InfoBox from '@/components/ui/info-box'\n\n**Open Source**\n\n\n**lomi.** is committed to enabling fast, adapted, and accessible payments for everyone. As part of this commitment, our technology is entirely public and available online.\n\nWe offer both an open-source solution and a hosted platform to cater to the diverse needs of our merchants. In line with our vision of transparency and community collaboration, we follow a **dual-license approach**.\n\nOur project is primarily licensed under the **GNU Affero General Public License (AGPL)**, allowing the open-source community to freely use, modify, and redistribute our software. However, the AGPL requires that anyone using the software — especially when providing it as a service — **must also make the source code available to the public**. Therefore, if you wish to use **lomi.** without sharing your modifications, i.e incorporating it into closed-source products, or use it commercially to offer similar products or services, **a commercial license is required**.\n\nCertain components of our system are covered exclusively by our second license, referred to as the **commercial license**, designed to meet the needs of businesses requiring additional features or usage flexibility. This **dual-licensing model** ensures we serve both the open-source community and enterprise partners.\n\nThis section provides an overview of the deployment options available and how to get started.\n\n&nbsp;\n\n\n    *See the monorepo [LICENSE]( file for the complete terms of both licenses.*\n\n\n**Self-hosting**\n\n\nIf you would like to host the platform yourself and never pay our technology fees, you can easily get started by cloning our main repository on GitHub. You'll get access to the latest version of our solution and be able to customize it to your needs. However, you'll have to get commercial agreements and API keys directly from payment providers to fully leverage our products in self-service.\n\nFor details on the codebase layout, see the [Codebase Structure](./codebase-structure) page.\n\nMerchants looking for an easy way to accept payments do not need to worry about this — anyone can simply start using lomi. on our website without any restrictions and/or additional setup. While self-hosting is possible, it is not something we recommend for most merchants, as you'll lose the benefits of having a dedicated Merchant of Record and the speed and ease of use lomi. can provide to your business.\n\nDocumentation and Self-hosting\n\n\nFor comprehensive documentation and more information on how to self-host lomi., visit [developers.lomi.africa](\n\n**Quick start**\n\n\n```bash copy\nClone the repository\n\ngit clone \ncd lomi.\n\nInstall dependencies\n\nbun install\n\nSet up environment\n\ncp .env.example .env\n\nSet up database\n\nsupabase link\n\nApply database migrations\n\nsupabase db push\n\nStart development server\n\nbun run dev\n```\n\n**Hosted platform**\n\n\nFor businesses that prefer a fully managed solution, we offer a hosted platform on our website. The hosted platform provides additional features, dedicated support, and benefits tailored to the needs of growing businesses.\n\nTo get started with the hosted platform, simply create an account on [lomi.africa]( and follow the setup instructions. Our team will be available to assist you throughout the process and provide guidance on optimizing your payment orchestration setup.\n\n**Quick comparison**\n\n\n| Feature                   | Open Source | Hosted Platform |\n| :------------------------ | :---------: | :-------------: |\n| Core Payment Processing   |      ✓      |        ✓        |\n| Built-in Payment Channels |      -      |        ✓        |\n| Advanced Analytics        |      ✓      |        ✓        |\n| Self-hosting              |      ✓      |        -        |\n| Custom Deployment         |      ✓      |        -        |\n| Automatic Updates         |      -      |        ✓        |\n| Dedicated Support         |      -      |        ✓        |\n\n**Support options**\n\n\nThe hosted platform includes:\n- 24/7 technical support\n- Priority issue resolution\n- Implementation assistance\n\n**Resources**\n\n- [Monorepo and main GitHub repository](\n- [Status page](\n\n**Need help deciding?**\n\n\nIf you have any questions about the differences between the open-source and hosted versions of lomi., or if you need help deciding which option is best suited for your needs, please don't hesitate to reach out to our team at [hello@lomi.africa](mailto:hello@lomi.africa).\n\nTo learn more about our vision and why lomi. is open-source, please visit our [blog]( to learn more about us.\n\nYou can also:\n- Schedule a demo and chat with our team: [Book a call](\n- Interact with our [pricing tool](",
    "parentName": "docs",
    "path": "docs/freedom/open-source"
  },
  "docs/get-started/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"create-merchant-account\": \"Create a merchant account\",\n  \"setup-payment-methods\": \"Select your payment methods\",\n  \"api-keys\": \"Getting your keys\",\n  \"transactions\": \"Process transactions\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/get-started/_meta"
  },
  "docs/get-started/api-keys": {
    "name": "api-keys",
    "content": "**Environment variables**\n\n\nSecurely managing your API keys and environment variables is essential for interacting with the lomi. API. This guide covers the basics you need to get started.\n\n**API keys: Test v. Live**\n\n\nlomi. provides two types of API keys, identifiable by their prefixes:\n\n*   **Test Keys (`lomi_sk_test_...`):** Use these exclusively for development and testing purposes in the sandbox environment. They allow you to simulate API calls without affecting live data or processing real payments.\n*   **Live Keys (`lomi_sk_live_...`):** Use these only in your production environment to process real customer transactions. Live keys require your account to be fully verified and activated.\n\n**Never** hardcode your API keys directly in your source code. \n**Never** commit them to version control systems like Git.\n\n**Managing environment variables**\n\n\nThe recommended way to handle your API keys and other configuration details is through environment variables.\n\n**Required variables:**\n\n*   `LOMI_API_KEY`: Your lomi. API secret key (either Test or Live).\n    ```bash\n    export LOMI_API_KEY=lomi_sk_test_... # For testing\n    # or\n    export LOMI_API_KEY=lomi_sk_live_... # For production\n    ```\n*   `LOMI_WEBHOOK_SECRET`: Your unique webhook signing secret, used to verify incoming webhook requests. You obtain this from the lomi. Dashboard.\n    ```bash\n    export LOMI_WEBHOOK_SECRET=whsec_...\n    ```\n\n**Optional variables:**\n\n*   `LOMI_API_URL`: Specifies the API base URL. If not set, the SDK might default based on the key type, but explicitly setting it is safer.\n    ```bash\n    # Sandbox for testing\n    export LOMI_API_URL= \n    # Production for live transactions\n    export LOMI_API_URL= \n    ```\n*   `LOMI_TIMEOUT`: API request timeout in milliseconds (e.g., `30000` for 30 seconds).\n\n**Using variables in your Code**\n\n\nNode.js SDK Initialization\n\n\nAccess your environment variables when initializing the SDK:\n\n```typescript\nimport { LomiSDK } from 'lomi.cli';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY,\n  baseUrl: process.env.LOMI_API_URL, // Explicitly set the base URL\n  timeout: process.env.LOMI_TIMEOUT ? parseInt(process.env.LOMI_TIMEOUT) : undefined\n});\n\n// Now you can use the 'lomi' instance to make API calls\n// e.g., await lomi.merchants.get('your_merchant_id');\n```\n\nWebhook signature verification\n\n\nUse your webhook secret to verify the authenticity of incoming webhooks:\n\n```typescript\n// Inside your webhook handler (e.g., using Express)\n// req.rawBody contains the raw request body buffer\n// req.headers['x-lomi-signature'] contains the signature header\n\ntry {\n  const isValid = lomi.webhooks.verifySignature(\n    req.rawBody, \n    req.headers['x-lomi-signature'] as string,\n    process.env.LOMI_WEBHOOK_SECRET\n  );\n\n  if (isValid) {\n    // Process the verified webhook event (req.body)\n  } else {\n    // Signature is invalid, reject the request\n    res.status(400).send('Invalid signature.');\n  }\n} catch (error) {\n  console.error('Webhook verification error:', error);\n  res.status(500).send('Webhook verification failed.');\n}\n```\n\n**Best practices**\n\n\n*   **Secure storage:** Use environment variables or a dedicated secrets management service. Never commit keys to Git.\n*   **Access control:** Limit who can access API keys. Use different keys for different applications if necessary.\n*   **Environment separation:** Strictly use Test keys for development/testing and Live keys for production.\n*   **Rotation:** Consider rotating your API keys periodically for enhanced security (available in the Dashboard).",
    "parentName": "docs",
    "path": "docs/get-started/api-keys"
  },
  "docs/get-started/create-merchant-account": {
    "name": "create-merchant-account",
    "content": "**Getting started**\n\n\n**Prerequisites**\n\n\nYou'll need to provide the following business details:\n- Valid business registration from any country of the world\n- Legal business name\n- Tax ID\n- Main country of operation\n- Legal representative contact information\n- Legal representative ID\n\nand meet a few technical requirements:\n  - Node.js 18+ for SDK usage\n  - An HTTPS endpoint accessible from the internet for receiving webhooks\n\n**Quick start**\n\n\nFollow these steps to set up your lomi. integration and make your first API call.\n\nCreate your account and get your API keys\n\n\nFirst, you need to create your lomi. merchant account. During the sign-up process, you will provide your business details as listed in the prerequisites. Once your account application is submitted and approved, you'll be able to connect payment channels and process live transactions.\n\nOnce your account is approved, navigate to the API Keys section to find your unique keys. lomi. provides separate keys for the **Test** and **Live** environments, allowing you to build and test your integration safely.\n\n**For development and testing, always use your Test API keys.** Your Test secret key will have a prefix like `lomi_sk_test_...`.\n\nSet environment variables\n\n\nSet your Test API key and the API base URL for the sandbox environment as environment variables in your terminal. This is the recommended way to handle credentials.\n\n```bash\nReplace with your actual Test Secret Key from the lomi. dashboard\n\nexport LOMI_API_KEY=lomi_sk_test_xxxxxxxxxxxxxxxxxxxxxx\nor\n\nSet the API Key directly for production.\n\nexport LOMI_API_KEY=lomi_sk_live_xxxxxxxxxxxxxxxxxxxxxx\n```\n\nOptionally, set the API base URL for the sandbox environment (though the SDK might default correctly if only a test key is provided):\n\n```bash\nexport LOMI_API_URL=\nor\n\nexport LOMI_API_URL=\n```\n\nInstall lomi. with your CLI\n\n\nThe lomi. CLI tool provides convenient commands for interacting with the API, managing resources, and testing webhooks. More information on how to use the CLI is available on its dedicated page: [lomi. CLI Documentation](/docs/lomi-cli/overview).\n\n```bash\nbun install lomi.cli\nor\n\nnpm install lomi.cli\n```\n\nMake your first API call\n\n\nNow, let's retrieve your merchant details using the Node.js SDK. This example assumes you have set the `LOMI_API_KEY` and `LOMI_API_URL` environment variables as shown in Step 2.\n\n```typescript\nimport { LomiSDK } from 'lomi.cli';\n\n// Initialize the SDK using environment variables\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY,\n  baseUrl: process.env.LOMI_API_URL // Uses the sandbox URL from env var\n});\n\nasync function getMerchantDetails(merchantId: string) {\n  if (!process.env.LOMI_API_KEY || !process.env.LOMI_API_URL) {\n    console.error('Error: LOMI_API_KEY and LOMI_API_URL environment variables must be set.');\n    return;\n  }\n  if (!merchantId || merchantId === 'YOUR_MERCHANT_ID') {\n     console.error('Error: Please replace \"YOUR_MERCHANT_ID\" with your actual Merchant ID from the lomi. dashboard.');\n     return;\n  }\n\n  try {\n    console.log(`Retrieving details for merchant: ${merchantId}...`);\n    const merchant = await lomi.merchants.get(merchantId);\n    console.log('Successfully retrieved merchant details:');\n    console.log(JSON.stringify(merchant, null, 2)); // Pretty print the JSON response\n\n    /* Expected Output Structure:\n    {\n      \"data\": {\n        \"merchant_id\": \"d463e162-c632-4428-a39f-22bf76793340\", // Example value, will return actual merchant id\n        \"name\": \"The African Ledger\",\n        \"email\": \"paul@africanledger.com,\n        \"phone_number\": \"+2250160223401,\n        \"country\": \"CI\", // e.g., Côte d'Ivoire\n        \"mrr\": 0, // Example value, will reflect actual MRR\n        \"arr\": 0, // Example value, will reflect actual ARR\n        \"metadata\": {\n          // Any metadata associated with the merchant\n        },\n        \"created_at\": \"2023-10-26T10:00:00Z\", // Example timestamp\n        \"updated_at\": \"2023-10-26T10:00:00Z\" // Example timestamp\n      }\n    }\n    */\n\n  } catch (error) {\n    console.error('Failed to retrieve merchant details:', error);\n  }\n}\n\n// --- How to run this example ---\n// 1. Save the code above as a .ts file (e.g., getMerchant.ts).\n// 2. Make sure you have Node.js and ts-node installed (`npm install -g typescript ts-node`).\n// 3. Set your environment variables (LOMI_API_KEY, LOMI_API_URL) as shown in Step 2.\n// 4. Get your Merchant ID from the lomi. dashboard.\n// 5. Run the script: ts-node getMerchant.ts YOUR_MERCHANT_ID\n// Example: ts-node getMerchant.ts d463e263-c612-4428-a39f-22bf76793340\n\n// Example usage (replace with your actual Merchant ID):\ngetMerchantDetails('YOUR_MERCHANT_ID');\n```\n\n**Alternatively, using `curl`:**\n\nYou can also verify your API key and retrieve merchant details directly using `curl` in your terminal. This requires the `LOMI_API_KEY` and `LOMI_API_URL` environment variables to be set (Step 2) and assumes you have `jq` installed for pretty-printing the JSON output.\n\n```bash\nMake sure env vars are set:\n\nexport LOMI_API_KEY=lomi_sk_test_...\n\nexport LOMI_API_URL=\n\n\nReplace YOUR_MERCHANT_ID with your actual Merchant ID\n\nexport MERCHANT_ID=YOUR_MERCHANT_ID\n\nCheck if MERCHANT_ID is set and not the placeholder\n\nif [ -z \"$MERCHANT_ID\" ] || [ \"$MERCHANT_ID\" = \"YOUR_MERCHANT_ID\" ]; then\n  echo \"Error: Please set the MERCHANT_ID environment variable with your actual Merchant ID.\"\nelse\n  echo \"Attempting to retrieve details for merchant: $MERCHANT_ID using $LOMI_API_URL ...\"\n  curl -X GET \"${LOMI_API_URL}/merchants/${MERCHANT_ID}\" \\\n    -H \"X-API-Key: ${LOMI_API_KEY}\" | jq .\nfi\n\n```\nThis `curl` command sends a GET request to the merchants endpoint using your test API key and the sandbox URL.\n\nSet up webhooks\n\n\nWebhooks are essential for receiving real-time notifications about events happening in your lomi. account, such as successful payments, completed checkouts, or failed payments.\n\nHere's a basic example using Express.js to create an endpoint that listens for lomi. webhooks:\n\n```typescript\nimport express from 'express';\nimport { LomiSDK } from 'lomi.cli'; // Assuming LomiSDK is correctly imported\n\nconst app = express();\n\n// Use JSON middleware, but ensure raw body is captured for signature verification\n// lomi. sends webhooks as POST requests with a JSON payload.\napp.use(express.json({\n  verify: (req: any, res, buf) => { // Add type 'any' or define interface for req\n    req.rawBody = buf; // Store the raw buffer for signature verification\n  }\n}));\n\n// Initialize lomi. SDK (only needed for signature verification here)\n// Ensure API Key is set if verifySignature needs it, otherwise it might just need the secret.\n// Double-check if LomiSDK instance is needed or if verifySignature is static/standalone.\n// Assuming verifySignature is available on an instance or statically:\nconst lomi = new LomiSDK({ apiKey: process.env.LOMI_API_KEY }); // May not be needed if secret is passed directly\n\napp.post('/webhook', (req: any, res) => { // Add type 'any' or define interface for req\n  const signature = req.headers['x-lomi-signature'] as string; // Get signature from header\n  const secret = process.env.LOMI_WEBHOOK_SECRET; // Get your webhook secret from env var\n\n  if (!secret) {\n    console.error('Webhook secret is not configured in environment variables (LOMI_WEBHOOK_SECRET).');\n    return res.status(500).send('Webhook secret not configured.');\n  }\n  if (!signature) {\n    console.warn('Webhook request received without x-lomi-signature header.');\n    return res.status(400).send('Missing signature.');\n  }\n  if (!req.rawBody) {\n     console.error('Raw body buffer not available for signature verification.');\n     return res.status(500).send('Internal server error during webhook processing.');\n  }\n\n  let isValid = false;\n  try {\n    // Verify the signature using the raw body buffer, the received signature, and your secret\n    isValid = lomi.webhooks.verifySignature(\n      req.rawBody,\n      signature,\n      secret\n    );\n  } catch (error) {\n      console.error('Error during webhook signature verification:', error);\n      return res.status(500).send('Error verifying webhook signature.');\n  }\n\n\n  if (!isValid) {\n    console.error('Invalid webhook signature received.');\n    return res.status(400).send('Invalid signature.');\n  }\n\n  // Signature is valid, proceed to handle the event\n  const event = req.body; // Use the parsed JSON body\n  console.log(`Webhook received and verified: ${event.type}`);\n\n  // Handle different event types\n  switch (event.type) {\n    // See Webhooks API docs for a full list of event types\n    case 'PAYMENT_SUCCEEDED':\n      console.log('Payment succeeded!', event.data);\n      // TODO: Implement logic for successful payment (e.g., update order status, grant access)\n      break;\n    case 'CHECKOUT_COMPLETED':\n      console.log('Checkout completed!', event.data);\n      // TODO: Implement logic for completed checkout\n      break;\n    case 'SUBSCRIPTION_RENEWED':\n      console.log('Subscription renewed!', event.data);\n      // TODO: Implement logic for subscription renewal\n      break;\n    case 'PAYMENT_FAILED':\n      console.log('Payment failed.', event.data);\n      // TODO: Implement logic for failed payment (e.g., notify customer)\n      break;\n    // Add cases for other relevant events like:\n    // case 'CUSTOMER_CREATED':\n    // case 'SUBSCRIPTION_CANCELED':\n    // etc.\n    default:\n      console.log(`Unhandled event type: ${event.type}`);\n  }\n\n  // Acknowledge receipt of the webhook\n  res.status(200).json({ received: true });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`Webhook listener running on port ${PORT}`));\n\n```\n**Remember to:**\n- Set your `LOMI_WEBHOOK_SECRET` environment variable.\n- Expose your local endpoint to the internet using a tool like `ngrok` during development.\n- Register the public URL (e.g., the `ngrok` URL) in your lomi. dashboard's webhook settings.\n\n**Testing**\n\n\nIt's crucial to test your integration thoroughly in your Test znvironment before processing live transactions.\n\n1.  **Use the test environment:** Ensure all your test API calls and SDK initializations use:\n    *   Your **Test API key** (starting with `lomi_sk_test_...`).\n    *   The **Test Base URL** (`\n    These should be correctly set using the environment variables shown in **Step 2**.\n\n2.  **Simulated data:** The Test Environment mimics the live API but uses simulated data. No real money is moved.\n\n3.  **Test your API calls:** Run the code examples (Node.js or `curl`) from **Step 5** using your Test API Key and the sandbox URL. Verify you receive a successful response containing your test merchant data.\n\n4.  **Test webhooks:**\n    *   Start your local webhook listener endpoint (from **Step 6**).\n    *   Use a tool like `ngrok` (`ngrok http 3000`) to expose your local server (running on port 3000 in the example) to the internet and get a public URL.\n    *   Configure this public URL (e.g., ` in your lomi. dashboard's Test Environment webhook settings. Make sure to add your `LOMI_WEBHOOK_SECRET` for the test environment there as well.\n    *   Trigger test events from the lomi. dashboard (using the \"Send Test Webhook\" button for specific event types) or by performing actions in the test environment (like creating a test checkout session and simulating a payment).\n    *   Verify that your local endpoint receives the event, logs indicate the signature (`x-lomi-signature`) was successfully validated using your Test Webhook Secret, and the correct event handler logic is triggered.\n\n5.  **Explore further:** For more specific testing scenarios and example `curl` commands for different API endpoints (like creating test checkout sessions, products, etc.), refer to the testing files within the `developers-reference/` directory in the documentation repository.\n\n6.  **Learn more:** Read the [API Environments guide](/docs/api-reference/api-environment) for a detailed comparison of Test vs. Live environments.\n\n**Next steps**\n\n\n- [Get your keys](/docs/get-started/api-keys)\n- [Process transactions](/docs/get-started/transactions)\n\n\n**Support**\n\n\n- Technical support: [hello@lomi.africa](mailto:hello@lomi.africa)\n- API status: [status.lomi.africa](\n- Schedule call if you need assistance: [Book Demo](",
    "parentName": "docs",
    "path": "docs/get-started/create-merchant-account"
  },
  "docs/get-started/setup-payment-methods": {
    "name": "setup-payment-methods",
    "content": "**Setup payment methods**\n\n\nlomi. allows you to accept payments through various providers like mobile money operators and cryptocurrency processors. This guide explains how to check which providers are available and active for your account via the API.\n\n**Connecting providers**\n\n\nBefore using a payment provider via the API, you must first connect and enable it for your merchant account via the lomi. Dashboard. The Dashboard is where you manage your provider credentials and configurations.\n\n**Listing available providers via API**\n\n\nOnce providers are configured in the Dashboard, you can use the API to fetch a list of all providers associated with your account and check their connection status.\n\n```typescript\nimport { LomiSDK } from 'lomi.cli';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY, \n  baseUrl: process.env.LOMI_API_URL // Ensure this points to the correct environment\n});\n\nasync function checkAvailableProviders() {\n  try {\n    const response = await lomi.providers.list();\n    console.log('Available Providers:', JSON.stringify(response.data, null, 2));\n\n    // Filter for providers actually connected and ready to use\n    const connectedProviders = response.data.filter(provider => provider.is_connected);\n    console.log('\\nConnected Providers:', connectedProviders);\n    \n    // You can use connectedProviders to populate your checkout UI\n\n  } catch (error) {\n    console.error('Failed to list providers:', error);\n  }\n}\n\ncheckAvailableProviders();\n```\n\n**Example API Response (`response.data`):**\n\nBased on `GET /providers` from the API reference:\n\n```json\n[\n  {\n    \"code\": \"ORANGE\",\n    \"name\": \"Orange Money\",\n    \"description\": \"Mobile money provider\",\n    \"payment_methods\": [\"MOBILE_MONEY\"],\n    \"is_connected\": true\n  },\n  {\n    \"code\": \"WAVE\",\n    \"name\": \"Wave\",\n    \"description\": \"eWallet provider\",\n    \"payment_methods\": [\"E_WALLET\"],\n    \"is_connected\": true\n  },\n  {\n    \"code\": \"MTN\",\n    \"name\": \"MTN\",\n    \"description\": \"MOBILE_MONEY\",\n    \"payment_methods\": [\"MOBILE_MONEY\"],\n    \"is_connected\": false\n  }\n  // ... other potential providers\n]\n```\n\n**Key fields:**\n\n*   `code`: The unique identifier (e.g., `ORANGE`, `WAVE`) used in API calls.\n*   `name`: The display name for the provider.\n*   `description`: A brief description.\n*   `payment_methods`: The type of payment (e.g., `mobile_money`, `crypto`).\n*   `is_connected`: **Crucial.** Indicates if the provider is properly configured and active for your merchant account (`true`) or not (`false`).\n\n**Important:** Only providers where `is_connected` is `true` can be successfully used to process payments. You should typically only display these connected providers as options to your customers.\n\n**Using providers in checkout/payment links**\n\n\nWhen creating a Checkout Session or a Payment Link, you specify which payment providers the customer can use via the `allowed_providers` array, using the `code` values retrieved from the list endpoint.\n\n```typescript\n// Example for creating a Checkout Session\nconst session = await lomi.checkoutSessions.create({\n  // Only include codes for providers where is_connected was true\n  allowed_providers: ['ORANGE', 'WAVE'], \n  amount: 10000, // 100.00 XOF\n  currency_code: 'XOF',\n  success_url: '\n  cancel_url: '\n  // ... other parameters\n});\n```\n\nBy fetching the provider list and filtering by `is_connected`, you ensure you only offer valid payment methods to your users.",
    "parentName": "docs",
    "path": "docs/get-started/setup-payment-methods"
  },
  "docs/get-started/transactions": {
    "name": "transactions",
    "content": "**Processing transactions**\n\n\nlomi. offers two primary ways to process transactions and accept payments via its API:\n\n1.  **Checkout sessions:** Ideal for single-use transactions where you dynamically generate a secure, hosted payment page for a specific customer order. Checkout Sessions expire after 60 minutes by default (you can adjust this setting, though we recommend keeping it at 60 minutes for enhanced security).\n\n2.  **Payment links:** Best for creating reusable links tied to specific products, subscription plans, or for collecting instant, fixed-amount payments. These links can be shared easily and can be configured to expire at a specific date in the future.\n\nThis section guides you through the basics of both methods. For detailed API specifications, please refer to the [API Reference section](/api-reference).\n\n**Creating a checkout session**\n\n\nTo initiate a single payment for a dynamic product or service (like a specific shopping cart), create a Checkout Session. This generates a time-sensitive, secure, hosted payment page pre-filled with the details you provide.\n\n```typescript\nimport { LomiSDK } from 'lomi.cli';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY, // Ensure LOMI_API_KEY is set\n  baseUrl: process.env.LOMI_API_URL // Use sandbox URL for testing\n});\n\nasync function createOneTimeCheckout() {\n  try {\n    const session = await lomi.checkoutSessions.create({\n      success_url: ' // Recommended: Include session ID\n      cancel_url: '\n      allowed_providers: ['WAVE', 'ORANGE'], // Example providers for Côte d'Ivoire\n      amount: 10000, // e.g., 10.O00 XOF (15$)\n      currency_code: 'XOF',\n      title: 'Your Order - #ORD-12345', // Displayed on checkout page\n      public_description: 'Payment for the items in your cart.', // Displayed on checkout page\n      customer_email: 'customer@email.com', // Pre-fills email field if needed while this can be entered during checkout (optional)\n      customer_name: 'John Doe', // Pre-fills name field (optional)\n      customer_phone: '+2250102030405', // Pre-fills phone field (optional)\n      metadata: { \n        cart_id: 'cart_abc123', \n        internal_user_id: 'user_xyz789' (optional)\n      } // Store your internal identifiers\n    });\n\n    console.log('Checkout Session created successfully:');\n    console.log('ID:', session.data.checkout_session_id);\n    console.log('URL:', session.data.url);\n    console.log('Expires At:', session.data.expires_at);\n    \n    // In a web server context, you would redirect the user:\n    // res.redirect(303, session.data.url);\n\n  } catch (error) {\n    console.error('Failed to create checkout session:', error);\n    // Handle the error appropriately (e.g., show error message to user)\n  }\n}\n\ncreateOneTimeCheckout();\n```\n\nAfter creating the session, redirect your customer to the `url` provided in the response object (`session.data.url`). lomi. handles the payment process securely on that page.\n\n> **Why provide optional customer details?**\n> \n> *   **Customer Convenience:** If the customer is logged into your website or app, you likely already have their name, email, and maybe phone number. Passing this information pre-fills these fields on the checkout page, saving the customer time and reducing friction.\n> *   **Optionality:** These fields (`customer_email`, `customer_name`, `customer_phone`) are optional. If you don't have the information or it doesn't fit your flow (e.g., a quick payment for an anonymous user), simply omit them. The lomi. checkout page will then require the customer to enter all necessary details.\n> \n> Note that even if pre-filled, the customer will typically need to confirm or enter their **phone number** on the checkout page as a double check measure.\n\n**Creating a payment link**\n\n\nPayment Links are ideal for scenarios where you need a reusable link for a fixed offering, like a specific product, a subscription plan, or a standard service fee.\n\nHere's an example of creating a Payment Link for a specific product:\n\n```typescript\nimport { LomiSDK } from 'lomi.cli';\n\nconst lomi = new LomiSDK({\n  apiKey: process.env.LOMI_API_KEY, // Ensure LOMI_API_KEY is set\n  baseUrl: process.env.LOMI_API_URL // Use sandbox URL for testing\n});\n\n// Assume you have a Product ID created via the API or dashboard\nconst YOUR_PRODUCT_ID = 'prod_xxxxxxxxxxxxxxxxxxxx'; \n\nasync function createProductPaymentLink() {\n  if (!YOUR_PRODUCT_ID || YOUR_PRODUCT_ID === 'prod_xxxxxxxxxxxxxxxxxxxx') {\n    console.error(\"Error: Please replace YOUR_PRODUCT_ID with an actual Product ID.\");\n    return;\n  }\n\n  try {\n    const link = await lomi.paymentLinks.create({\n      link_type: 'product',\n      product_id: YOUR_PRODUCT_ID, \n      // title and currency_code are inferred from the product,\n      // Optional parameters for customization:\n      public_description: 'Get our premium widget at a special price through this link.',\n      allowed_providers: ['WAVE', 'ORANGE'], \n      allow_coupon_code: true,\n      success_url: '\n      // expires_at: '2024-12-31T23:59:59Z', // Optionally set an expiration date\n      metadata: { campaign: 'q4_special_offer' }\n    });\n\n    console.log('Payment Link created successfully:');\n    console.log('ID:', link.data.link_id);\n    console.log('URL:', link.data.url); \n    // Share this URL with customers\n\n  } catch (error) {\n    console.error('Failed to create payment link:', error);\n    // Handle error\n  }\n}\n\ncreateProductPaymentLink();\n```\n\nOnce created, you can share the `url` from the response (`link.data.url`) with your customers via email, social media, or embed it on your website.\n\n**Important Note on Fees:** Currently, the ability to automatically include additional fees (like specific organizational or processing fees configured in your lomi. account) is primarily supported for **product-based payment links**. Checkout Sessions do not automatically apply these types of pre-configured additional fees as they are tied to specific products; the `amount` you specify in a Checkout Session is the total amount presented and paid by the customer.\n\nFor detailed information on all parameters and options for both methods, see the [Checkout Sessions API Docs](/api-reference/checkout-sessions) and [Payment Links API Docs](/api-reference/payment-links).",
    "parentName": "docs",
    "path": "docs/get-started/transactions"
  },
  "docs/introduction/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"what-is-lomi\": \"What is lomi.?\",\n  \"manifesto\": \"Manifesto\",\n  \"jumbo\": \"Jumbo\",\n  \"feedback-community\": \"Community\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/introduction/_meta"
  },
  "docs/introduction/feedback-community": {
    "name": "feedback-community",
    "content": "**Community**\n\n\n**Feedbacks**\n\n\nAt lomi., we believe that the best products are built together with users' and contributors' input. In our case, our growth and evolution are essentially driven by real merchant performance and needs.\n\n**Help us build West Africa's most comprehensive and merchant-friendly payment orchestration platform!**\n\n**Share your experience**\n\n- Report bugs and suggest features on [GitHub](\n- Support us and share your [integration process](\n- Help improve our [documentation](\n- Star our project on [GitHub]( to help us reach more developers and chat with us on [socials](\n\n**Build with us**\n\n- Contribute to our [open source platform](\n- Create and share plugins/extensions/features/designs/logic, anything\n- Help other developers in the community\n- Submit pull requests\n\n**Stay connected**\n\n- Read our [Blog]( for updates and to learn more about us\n- Attend our community events (stay tuned!)\n- Follow us on [LinkedIn](\n- Build with our [IDE: Jumbo](\n\n**Support channels**\n\n\n**For developers**\n\n- Access developer support information: [Support](/docs/support/contact)\n- Need integration assistance? You can contact us directly at: [hello@lomi.africa](mailto:hello@lomi.africa)\n\n**For business**\n\n- For pre-sales questions, partnership inquiries, or other information before using lomi., contact us at: [hello@lomi.africa](mailto:hello@lomi.africa)\n\nYou can also learn more about how our fees apply [here](/docs/introduction/pricing) or interact with [our pricing tool](",
    "parentName": "docs",
    "path": "docs/introduction/feedback-community"
  },
  "docs/introduction/jumbo": {
    "name": "jumbo",
    "content": "**Jumbo**\n\n\n**Build, test and deploy** — Jumbo is a powerful AI-powered online IDE built on top of Bolt to help merchants and lomi.'s developers **build applications faster** and integrate our stack **in minutes**. Whether you're looking to build custom workflows, designing, or launching a new app, Jumbo provides everything you need to go from idea to execution  —**without ever leaving your browser**.  \n\n**Why use Jumbo?** 🚀 \n\n- **Faster development** – No setup required, just start coding.  \n- **Seamless lomi. integration** – Pre-built SDKs and APIs make integration effortless with custom UI logic to integrate lomi. easily.\n- **Cloud-based** – Access your projects anytime, anywhere, and import your code from Github to build specific features if needed.\n- **Deployment made easy** \n- **AI native** — Jumbo is powered by the most powerful AI models in the world including the latest upgrades of Gemini, Deepseek and Claude Sonnet.\n- **Secure** – Enterprise-grade security and performance.\n- **Code saved locally or on-premise** — We do not store your code at any moment, and secure credentials are encrypted and stored locally. \n\n**Get started in minutes**\n\n\n1. **Sign in with your lomi.'s account ** and start prototyping in seconds. \n2. **Write and test your code** directly in the online IDE with preview and terminal integrated.\n3. **Integrate lomi. API and Supabase PostGres backend** with just a few clicks.\n4. **Deploy instantly on Netlify** and start talking about your app straight away. \n\n**Who is Jumbo for?**\n\n\n- **Merchants** looking for a quick way of integrating lomi. payment in their application.\n- **Developers** looking to build prototype of their new products or features.\n- **Designers** looking to \n\n**Pricing**\n\n\nJumbo operates on a **flexible pricing model**:  \n- **Subscription-based access**: Get full IDE functionality with a monthly or annual plan.  \n- **Token-based usage**: Pay-as-you-go for more tokens.\n\nWhether you're an indie or a developer in a large-scale enterprise, Jumbo adapts to your needs. [Try it now]( ",
    "parentName": "docs",
    "path": "docs/introduction/jumbo"
  },
  "docs/introduction/manifesto": {
    "name": "manifesto",
    "content": "**Manifesto**\n\n\nThe time has come to open-source payment processing (and software in general) across West Africa.\n\nWe believe that accepting payments shouldn't be complex, regardless of where you operate or what payment methods your customers prefer. The fragmented payment landscape of our region creates unnecessary barriers and friction for businesses trying to grow beyond country borders, and we aim to address these challenges with a new approach to payment orchestration.\n\nWe believe that:\n- Every business, regardless of its size, should easily be able to sell online with a few lines of code and zero technical and administrative burden.\n- Merchants should focus on growing their business, not wrestling with payment.\n- Innovation in financial services must be accessible to all.\n- Payment solutions must be built by and for local ecosystems.\n\n**Our principles**\n\n\nTo achieve this vision, we've built lomi. on these three foundational principles:\n\n**Merchant first**\n\n- Your success is our success.\n- Every feature we build solves one of your needs.\n- Pricing is transparent, fair, and we are cheaper than the competition.\n- Your feedback drives our roadmap.\n\n**Local context matters**\n\n- We build specifically for West African markets, starting with Côte d'Ivoire and Sénégal.\n- We strive to listen, to deeply understand local payment behaviors, and adapt to local realities.\n- We respect the partners who trust us and operate with a high level of execution and integrity.\n\n**Community matters**\n\n- Open source is more than just code sharing; it is a mindset, and it is in our blood.\n- Community contributions are welcome, valued, and recognized.\n- Knowledge sharing is essential.\n\nBy making our platform open source, we aim to:\n\n- Foster transparency and trust with our merchants and partners.\n- Encourage your contributions to continuously enhance the platform for everyone.\n- Enable developers to extend and customize lomi. to suit their unique needs.\n- Enable anyone to self-host lomi. for their unique use case.\n\nJoin us in our mission to simplify payment processing and to be the foundational open source platform powering seamless payments for ventures across West Africa by 2030.",
    "parentName": "docs",
    "path": "docs/introduction/manifesto"
  },
  "docs/introduction/what-is-lomi": {
    "name": "what-is-lomi",
    "content": "**What is lomi.?**\n\n\nlomi. is an open-source payment orchestration platform built specifically for West African businesses. We seamlessly integrate the most popular payment methods while providing a comprehensive set of localized e-commerce products.\n\nOur platform empowers ventures and entrepreneurs to focus on growth without worrying about the challenges of payment processing and billing. We aim to solve two core challenges:\n\n**Payment complexity**\n\n\nThe West African payment landscape is very fragmented, with numerous payment providers. This complexity often forces merchants to manage integrations themselves or rely on closed-source payment providers, leading to increased development time, high transaction costs, maintenance overhead, and technical debt.\n\nlomi. solves this by providing:\n\n- **One API, one dashboard**: One integration for all your payment needs, allowing you to accept credit card payments, MTN 'Momo', Wave Mobile Money, Orange Money, and more (we enable merchants accept cryptocurrency payments as well and are continuously expanding our set of integrations to help you reach an ever-growing set of consumers in Africa and beyond).\n- **Customizable Checkout**: Highly customizable, seamless checkout experiences to boost conversion.\n- **Enterprise-grade Analytics**: Gain valuable insights into your customer demographics and behaviors through detailed transaction and customer reporting.\n- **Maximum control**: Streamlined transaction reconciliation, fast payouts to bank accounts or mobile money wallets, and instant reconciliation and refund processes.\n- **Powerful Dashboard**: Comprehensive dashboard for business management to help you sell goods, services, subscriptions, and more.\n\n> ***Get started touching West Africa today by [creating an account](\n\n**Lack of transparency**\n\n\nThe financial technology landscape in West Africa has historically suffered from opacity in operations, high and hidden fees, and limited visibility into transaction processing. Merchants often struggle with black-box payment processors that provide little insight into how their money moves.\n\nlomi. addresses this through:\n\n- **Robust logic and security**: Full transparency into transaction flows, fee structures, and transaction/payout processing.\n- **Open Source architecture**: Our entire codebase is public, allowing anyone to review, audit, and contribute to our software — [see our codebase structure](/docs/freedom/codebase).\n- **Community governance**: Transparent roadmap and decision-making process with merchant input via PRs and feature requests as GitHub issues.\n- **Built-in compliance**:\n  - Licensed payment service provider from the BCEAO (Banque Centrale des États de l'Afrique de l'Ouest)\n  - Regular security updates and compliance monitoring\n  - PCI DSS level 4 compliant\n  - GDPR AND MACP compliant with 100% of our data flows transiting through Cape Town in South Africa and Dublin in Ireland.\n\nOur platform is designed with security-first principles, ensuring that both merchants and their customers can transact with confidence.\n\n**How we deliver**\n\n\nTo ensure merchants can easily leverage our products to address these two core challenges, we provide:\n\n**Developer-first approach**\n- Well-documented APIs with comprehensive examples and robust error handling.\n- SDKs in popular languages (cURL, Node.js/TypeScript available now, with Python and PHP coming soon).\n- Extensive integration guides and ready-to-use boilerplates for multiple use cases built on top of modern and popular technologies such as Vite, Next.js, Medusa, Sanity, and more.\n- AI-powered online IDE complementary to our payment stack to help you get started fast and build prototypes in minutes.\n- 24/7 dedicated customer support with technical assistance.\n\n> **Build your first checkout with [lomi.](/reference/core/overview)**\n\n**Our commitments**\n- Maintaining our applications public.\n- Performing regular security audits and enhancing application extensibility.\n- Building a secure, compliant, and sustainable payment infrastructure.\n- Giving back to the local tech ecosystem.\n- Growing alongside our merchants.\n- Driving continuous innovation and improvement.\n\nJoin our open-source community on [GitHub]( give us a star and help us shape the future of payments in the region and of open source in Africa!",
    "parentName": "docs",
    "path": "docs/introduction/what-is-lomi"
  },
  "docs/lomi-cli/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"configuration\": \"Configuration\",\n  \"webhook-development\": \"Webhook Development\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/lomi-cli/_meta"
  },
  "docs/lomi-cli/configuration": {
    "name": "configuration",
    "content": "CLI Configuration\n\n\nThe lomi. CLI can be configured through various methods to suit your development workflow.\n\nConfiguration File\n\n\nCreate a `lomi.config.json` in your project root:\n\n```json copy\n{\n  \"environment\": \"development\",\n  \"webhook\": {\n    \"url\": \"\n    \"secret\": \"your_webhook_secret\",\n    \"events\": [\"payment.success\", \"payment.failed\"]\n  },\n  \"dev\": {\n    \"port\": 3000,\n    \"cors\": true,\n    \"webhook_url\": \"\n  }\n}\n```\n\nEnvironment Variables\n\n\nThe CLI respects the following environment variables:\n\n```bash copy\nAuthentication\n\nLOMI_API_KEY=your_api_key\n\nEnvironment\n\nLOMI_ENV=development|staging|production\n\nDevelopment\n\nLOMI_DEV_PORT=3000\nLOMI_WEBHOOK_URL=\nLOMI_WEBHOOK_SECRET=your_webhook_secret\n```\n\nProject-Level Configuration\n\n\nFor team settings, create a `.lomi` directory in your project:\n\n```bash\n.lomi/\n  ├── config.json     # Project configuration\n  ├── credentials     # API keys and secrets\n  └── webhooks/       # Webhook event samples\n```\n\nConfiguration Precedence\n\n\nSettings are loaded in the following order (later sources override earlier ones):\n\n1. Default configuration\n2. Project config file (`lomi.config.json`)\n3. Environment variables\n4. Command line arguments\n\nEnvironment-Specific Configuration\n\n\nCreate environment-specific configurations:\n\n```json copy\n// lomi.config.development.json\n{\n  \"webhook\": {\n    \"url\": \"\n  }\n}\n\n// lomi.config.production.json\n{\n  \"webhook\": {\n    \"url\": \"\n  }\n}\n```\n\nSecure Credentials\n\n\nThe CLI automatically encrypts sensitive information:\n\n```bash copy\nStore a secure value\n\nlomi config set webhook.secret your_secret\n\nUse in your application\n\nlomi config get webhook.secret\n```\n\nTeam Configuration\n\n\nShare non-sensitive configuration with your team:\n\n```bash copy\nExport shareable configuration\n\nlomi config export --safe > lomi.config.team.json\n\nImport team configuration\n\nlomi config import lomi.config.team.json\n```\n\nNext Steps\n\n\n- Learn about [Webhook Development](./webhook-development)\n- Explore our [Testing Guide](./testing)\n- Set up [CI/CD Integration](./ci-cd) ",
    "parentName": "docs",
    "path": "docs/lomi-cli/configuration"
  },
  "docs/lomi-cli/overview": {
    "name": "overview",
    "content": "lomi. CLI\n\n\nThe lomi. CLI helps you integrate lomi.'s payment services into your applications. It provides tools for:\n\n- Project initialization and configuration\n- Payment operations management\n- Webhook endpoint configuration\n- API key management\n- Integration status monitoring\n\nInstallation\n\n\nInstall the lomi. CLI using npm:\n\n```bash copy\nnpm install lomi.cli\n```\n\nAuthentication\n\n\nThe CLI requires authentication to interact with the lomi. API. You can authenticate using:\n\n1. **Environment Variable**:\n```bash copy\nexport LOMI_API_KEY=your_api_key_here\n```\n\n2. **Interactive Login**:\n```bash copy\nlomi login\n```\n\nCore Commands\n\n\n`lomi init`\n\n\nInitializes a new lomi. project in your current directory:\n\n```bash copy\nlomi init\n```\n\nThis command:\n- Creates a `lib/lomi.ts` file with client configuration\n- Sets up environment variables in `.env`\n- Installs the lomi. client package\n- Configures your API key\n\n`lomi dev`\n\n\nStarts the development environment:\n\n```bash copy\nlomi dev\n```\n\nFeatures:\n- Local development server\n- Integration testing support\n- Environment configuration\n\n`lomi status`\n\n\nDisplays your integration status:\n\n```bash copy\nlomi status\n```\n\nShows:\n- API connectivity status\n- Account information\n- Integration health\n\n`lomi payments`\n\n\nManage payment operations:\n\n```bash copy\nList payments\n\nlomi payments list\n\nGet payment details\n\nlomi payments get \n```\n\n`lomi webhook`\n\n\nManage webhook endpoints:\n\n```bash copy\nRegister new webhook\n\nlomi webhook register\n\nList webhooks\n\nlomi webhook list --merchant-id \n```\n\n`lomi api-key`\n\n\nManage API keys:\n\n```bash copy\nList keys\n\nlomi api-key list\n\nCreate key\n\nlomi api-key create\n```\n\nGlobal Options\n\n\n- `--api-key`: Set API key\n- `--env`: Set environment (default: 'production')\n- `--json`: JSON output format\n\nNext Steps\n\n\n- [Configuration](./configuration) - Configure the CLI\n- [Webhook Development](./webhook-development) - Set up webhooks\n\nFor command details, use `lomi help [command]`. For support, contact [hello@lomi.africa](mailto:hello@lomi.africa).",
    "parentName": "docs",
    "path": "docs/lomi-cli/overview"
  },
  "docs/lomi-cli/webhook-development": {
    "name": "webhook-development",
    "content": "Webhook Development\n\n\nThe lomi. CLI provides tools to help you manage webhook endpoints for your integration.\n\nRegistering Webhooks\n\n\nUse the `webhook register` command to set up a new webhook endpoint:\n\n```bash copy\nlomi webhook register\n```\n\nThe command will prompt you for:\n- Your merchant ID\n- The webhook URL\n- Events to subscribe to\n\nExample events include:\n- `payment.success`\n- `payment.failed`\n- `payment.pending`\n- `refund.success`\n- `refund.failed`\n\nManaging Webhooks\n\n\nList your registered webhook endpoints:\n\n```bash copy\nlomi webhook list --merchant-id your_merchant_id\n```\n\nThis shows:\n- Webhook ID\n- URL\n- Subscribed events\n- Active status\n- Last triggered timestamp\n\nSecurity\n\n\nWhen a webhook is registered, you'll receive a verification token. Store this securely - you'll need it to verify webhook signatures.\n\nLocal Development\n\n\nThe CLI includes a development server for testing webhooks locally:\n\n```bash copy\nlomi dev --port 3000\n```\n\nThis starts a server that:\n- Listens for incoming webhook events\n- Displays webhook headers and payload\n- Shows verification tokens\n- Logs all requests for debugging\n\nThe server will print detailed information about each received webhook, making it easy to debug your integration.\n\nDevelopment Setup\n\n\n1. Create a webhook endpoint in your application that can receive POST requests\n\n2. Register the webhook using the CLI:\n```bash copy\nlomi webhook register\n```\n\n3. Use the verification token to validate incoming webhooks:\n```typescript\nimport crypto from 'crypto';\n\nfunction verifyWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string\n): boolean {\n  const hmac = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n  return hmac === signature;\n}\n```\n\nBest Practices\n\n\n1. **Always verify signatures**\n   - Use the verification token to validate webhook authenticity\n   - Reject requests with invalid signatures\n\n2. **Handle retries**\n   - Implement idempotency using the event ID\n   - Return 2xx status for successful processing\n   - Return 5xx status for retryable errors\n\n3. **Monitor webhook health**\n   - Track successful and failed deliveries\n   - Set up alerts for repeated failures\n\nNext Steps\n\n\n- [Configuration](./configuration) - Advanced webhook settings\n```",
    "parentName": "docs",
    "path": "docs/lomi-cli/webhook-development"
  },
  "docs/merchant-of-record/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"acceptable-use\": \"Acceptable use\",\n  \"account-reviews\": \"Account reviews\",\n  \"pricing\": \"Pricing\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/merchant-of-record/_meta"
  },
  "docs/merchant-of-record/acceptable-use": {
    "name": "acceptable-use",
    "content": "**Acceptable use**\n\n\nAs a **Merchant of Record**, we are the reseller of all goods and services. Therefore, we do not accept the sale of anything illegal, harmful, abusive, deceptive, or sketchy. For complete details on our policies, please refer to our [Terms and Conditions](\n\n**Prohibited & restricted businesses**\n\n\n*This is not an exhaustive list*\n\n- Gambling & betting services\n- Illegal or age-restricted services or products (e.g., drugs, alcohol, sex, tobacco, vaping products, or any other related items)\n- Adult services or content – including AI-generated, e.g., AI Girlfriend/Boyfriend services\n- Regulated services or products without proper licensing\n- Counterfeit goods\n- IPTV services\n- Virus & Spyware\n- Deceptive products: Fake testimonials or branding designed to associate the product with another service/brand to deceive consumers\n- Products you don't own the IP for or have the required licenses to resell\n- Advertising services\n- Trademark violations\n- Services prohibited by our payment providers\n\nWe reserve the right to add to this list at any time, place your account under further review, or suspend it without notice if we consider the usage deceptive, fraudulent, or high-risk.\n\nFor questions about acceptable use or to verify if your business qualifies, please contact our [compliance team](mailto:hello@lomi.africa).",
    "parentName": "docs",
    "path": "docs/merchant-of-record/acceptable-use"
  },
  "docs/merchant-of-record/account-reviews": {
    "name": "account-reviews",
    "content": "import InfoBox from '@/components/ui/info-box'\n\n**Account reviews**\n\n\nAs a **Merchant of Record**, we are the reseller of all goods and services. Therefore, we need to make sure that entrepreneurs and businesses using lomi. comply with our acceptable products & use policies. We perform continuous monitoring, reviews, and preventive actions to prevent fraud.\n\nWe strive to identify unacceptable use and take decisive actions to protect our infrastructure and merchants from incidents.\n\n**Activation process**\n\n\nEvery lomi. merchant will need to go through a **KYC/KYB process** ahead of using our platform. We'll process this request within 12 hours (often faster).\n\nDuring this time, we'll perform the following checks:\n\n- A quick survey about your business, products, and intended use case with our technology.\n- Identity verification (KYC) using passport (or driver's license), business registration documents, and company/entrepreneur tax ID.\n\nWe need to perform this review directly after sign-up to ensure compliance with our acceptable products & use policy and meet our own **KYC/AML requirements** as a payment platform operating in West Africa in accordance with our partnerships with payment providers, the regulations defined by the BCEAO and the laws of the Republic of Côte d'Ivoire.\n\n**Submit upfront and never worry again**\n\n\nWe'll ask our merchants to submit this information upfront to speed up the set-up of lomi. and enable them to enjoy all our products and services without concern about any issues or future delays.\n\n&nbsp;\n\n  Note: To use Jumbo, this KYC process is not needed as it doesn't require any information from you except basic authentication data.\n\n\n**Continuous reviews (async)**\n\n\nWe continuously monitor all operations and logs across our platform to proactively prevent fraud, in addition to performing asynchronous reviews of accounts at certain sales thresholds. These reviews are often completed within hours and without any additional information required from you.\n\nYou'll get notified over email if a review is taking place on your account. Payouts might be paused during this time, but this pause has no impact on your customers' experience or ability to purchase, subscribe, or checkout at any time.\n\nWe look at:\n- Internal risk scores across historic transactions\n- Refund and chargeback ratio\n- The appropriate sales threshold for the next review, based on the above factors\n\n**High chargeback ratios**\n\n\nCredit card networks consider 0.7% of sales in chargebacks excessive. Exceeding this threshold can lead to monitoring programs with high costs, penalties, and ultimately termination. (Note: Mobile money typically has almost 0% chargebacks, making it far less risky.)\n\nTherefore, we reach out proactively to collaborate on maintaining a low chargeback ratio and reducing it before getting close to this ratio.\n\n**Supported countries**\n\n\n**Payments**\n\n\nAs your Merchant of Record, we take on the liability for local and international sales taxes and regulatory compliance so you'll never have to worry about this.\n\nWe enable businesses to accept local payments across West Africa but also international card payments from around the world without hidden fees therefore you can accept payments from all around the world with lomi. However some restrictions might happen, especially on certain mobile providers — in those situations we work on ensuring that your customers are informed thanks to error handling during transaction and yourself via email.\n\n**Payouts**\n\n\nlomi. is built on multiple West African payment providers and currently supports low-cost mobile money and free bank payouts to businesses established in the UEMOA (West African Economic and Monetary Union). These are the countries that we consider \"local\":\n\n- Sénégal\n- Côte d'Ivoire\n- Mali\n- Burkina Faso\n- Guinea-Bissau\n- Niger\n- Ghana\n- Rwanda\n- More countries are being added regularly.\n\nFor countries not listed above, we also offer international bank payouts, but this option comes with a fee. See our pricing section for more information about this in the following section.",
    "parentName": "docs",
    "path": "docs/merchant-of-record/account-reviews"
  },
  "docs/merchant-of-record/pricing": {
    "name": "pricing",
    "content": "import InfoBox from '@/components/ui/info-box'\n\n**Pricing**\n\n\n**Transparent fees at a 20% discount vs. competition**\n\n\nAll transactions on lomi. come with a flat fee of **3.2% + 200 XOF | 3.2% + $0.3** applied to the entire transaction amount. There are no other transaction fees — no subscription charges, no premium fees for WhatsApp communication or emails, and no extra charges for regular payouts.\n\nlomi. is built on top of multiple providers and banks, and our rates are made to cover their fees and finance our operations. However, they impose a few additional charges for certain transactions, which we must pass on.\n\n**Additional fees**\n\n- **+0.8% for international cards.**\n- **4% for instant refunds.**\n\n**We reserve the right to pass on any other fees that our payment providers might impose in the future.**\n\n**Details**\n\n\nAll transactions on lomi. follow a simple fee structure based on the payment method:\n\n| **Category** | **Method** | **Fee** |\n|:-------------|:-----------|:--------|\n| **Cards** | Local | 4% + $0.30 |\n|  | International | 4% + $0.30 |\n| **Mobile Money** | Orange | 3.2% + 200 XOF (+ $0.30) |\n|  | MTN | 3.2% + 200 XOF (+ $0.30)  |\n|  | Wave | 3.2% + 200 XOF (+ $0.30)  |\n|  | Airtel | 3.2% + 200 XOF (+ $0.30)  |\n|  | Moov | 3.2% + 200 XOF (+ $0.30)  |\n| **Cryptocurrencies** | Stablecoins | 4% + $0.30 |\n|  | Tokens | 4% + $0.30 |\n\nBreakdown\n\n\nA **30,000 XOF** subscription payment from Côte d'Ivoire (0% VAT):\n\n| **Item** | **Amount** |\n|:---------|:-----------|\n| Subscription Price | 30,000 XOF |\n| Transaction Value (amount paid by customer) | 30,000 XOF |\n| Transaction Fee (3.2% + 200 XOF) | 1,060 XOF |\n| Net amount (amount received by our merchant) | 28,940 XOF |\n\nYou will receive 28,940 XOF directly into your account balance, while your customer pays 30,000 XOF in total.\n\n&nbsp;\n\n  You can add discounts or additional fees (like delivery, taxes, or even 'transaction fees') directly from the merchant dashboard to customize pricing or absorb processing costs.\n\n\n**Refunds**\n\n\nYou can issue both **full and partial refunds** to your customers. However, initial transaction fees are non-refundable, as payment providers charge them regardless of any future refund. Additionally, a refund processing fee of 4% applies to all refunded transactions. In the case of a full refund, your customer will receive the full amount they paid—without any penalties, as the merchant absorbs the costs.\n\nBreakdown\n\n\nFor a **30,000 XOF** full refund:\n\n| **Item** | **Amount** |\n|:---------|:-----------|\n| Original Transaction Value | 30,000 XOF |\n| Transaction Fee (3.2% + 200 XOF) | 1,060 XOF |\n| Refund Processing Fee (4% — charged to merchant) | 1,200 XOF |\n| Final Refund Amount to Customer (in case of full refund) | 30,000 XOF |\n\n&nbsp;\n\n    lomi. reserves the right to issue refunds at our discretion within 60 days of a purchase. This helps proactively reduce disputes and chargebacks, which cost **$15 (10,000 XOF)** per dispute, charged directly to the merchant. We only exercise this right to help minimize chargebacks, avoid unexpected charges, and reduce associated fees on your behalf.\n\n\n**Disputes**\n\n\nSometimes, customers may dispute a transaction or request a chargeback via their payment provider. **Each dispute costs 10,000 XOF, regardless of the outcome**, and is deducted from your balance directly. This fee is charged by the underlying payment providers and **cannot be refunded**.\n\nChargebacks are rare on mobile money transactions, but we work proactively to **meet global industry standards** and minimize and avoid disputes.\n\n**Important:**\n- Payment providers impose monitoring programs, penalties, and higher chargeback costs for sellers with high chargeback rates (~0.7%+).\n- We monitor and manage chargeback rates to prevent exceeding problematic thresholds.\n- If chargebacks increase, we may need to intervene or suspend accounts unless proactive measures are taken.\n\nBefore initiating a chargeback, **please email us first**—we're happy to resolve disputes directly with your merchant.\n\n**Payouts**\n\n\nlomi. does **not** add extra fees to standard payouts. The fees below are set by payout providers. However, in some cases, for **fast payouts**, we charge an additional **2%**.\n\nFor **international bank transfers**, we charge **1% + $5.00 (or 3,500 XOF)** to cover our costs.\n\nWe offer both **manual and automatic withdrawals** for merchants, giving you full control over payouts. If you have a lomi. balance that remains unwithdrawn for several months, we may trigger a payout on your behalf.\n\n| **Method** | **Fee** | **Processing Time** |\n|:-----------|:--------|:--------------------|\n| International Bank Transfer | 1% + 3,500 XOF (or $5.00) | 1-2 business days |\n| Local Bank Transfer | Free | 1-2 business days |\n| Mobile Money | Free \\| 1% | Instant |\n\n&nbsp;\n\n  The 1% fee for a Mobile Money payouts is **not** a lomi. fee. It is a standard fee charged directly by mobile money operators during the payout process, which lomi. simply passes through.\n\n\n**Volume-based pricing**\n\n\nLarge or fast-growing business? We offer **volume-based discounts** on mobile money transactions:\n\n| **Monthly Volume (in XOF)** | **Discount** | **Adjusted Fee** |\n|:-------------------------|:-------------|:-----------------|\n| **5M - 10M** ($8,000 - $16,000) | 25% | 3.2% → 2.4% |\n| **10M - 50M** ($16,000 - $80,000) | 30% | 3.2% → 2.2% |\n| **50M+** ($80,000+) | Custom pricing | Contact us |\n\n> Contact our [sales team](mailto:hello@lomi.africa) to discuss **custom pricing** tailored to your business needs.",
    "parentName": "docs",
    "path": "docs/merchant-of-record/pricing"
  },
  "docs/support/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"contact\": \"Contact us\",\n};\n\nexport default meta;\n",
    "parentName": "docs",
    "path": "docs/support/_meta"
  },
  "docs/support/contact": {
    "name": "contact",
    "content": "**We're here for you !**\n\n\nlomi. is committed to providing exceptional support to our community and customers. We offer multiple channels for getting help, asking questions, and connecting with our team.\n\n**Getting help**\n\n\nGitHub support\n\n\nFor technical questions, bug reports, and feature requests, our GitHub repository is the best place to start:\n\n- **Questions**: Open a [new issue]( to get help from our team and community\n- **Bug reports**: Found a bug or facing a problem? [Report it]( and we'll investigate.\n- **Feature requests**: Have an idea? [Share it]( with us.\n\nCommunity support\n\n\nJoin our vibrant community of developers and merchants:\n\n- **Documentation**: Browse our [documentation]( for guides and references.\n- **Discord**: Connect with fellow developers and our team in our [Discord server](\n- **Contributing**: Help improve lomi. by submitting pull requests or reporting issues on [GitHub](\n\nDirect support\n\n\nNeed to reach us directly? We're here to help:\n\n- **Email support**: Contact us at [hello@lomi.africa](mailto:hello@lomi.africa)\n- **Business inquiries**: For partnership or business-related questions, email the same address [hello@lomi.africa](mailto:hello@lomi.africa) and we'll get back to you promptly.\n- **Schedule a call**: Book a [30-minute call]( with us.\n\n**Stay connected**\n\n\nFollow us on social media and join our community:\n\n- [X (Twitter)]( - Latest updates and announcements\n- [GitHub]( - Code repositories and technical discussions\n- [LinkedIn]( - Company news and industry insights\n- [ProductHunt]( - Product launches and feedback\n- [Discord]( - Real-time community discussions\n\n**Support tiers**\n\n\n| Feature | Customers | Merchants | Enterprises |\n|---------|-----------|-----------|------------|\n| Community Support | ✓ | ✓ | ✓ |\n| Email Support | - | ✓ | ✓ |\n| Priority Response | - | ✓ | ✓ |\n| Dedicated Support | - | - | ✓ |\n| Custom Solutions | - | - | ✓ |\n\nFor more information about our support plans and pricing, visit the [pricing section](../merchant-of-record/pricing).\n\nTo forecast your costs of working with us, please visit our [pricing page](\n\nContributing to the documentation\n\n\nHelp us improve our documentation! If you find any issues, typos, or have suggestions, please:\n\n1. Open an issue on [GitHub](\n2. Submit a pull request with your proposed changes\n3. Join our [Discord]( to discuss improvements\n\nWe appreciate your help in making lomi. better for everyone!",
    "parentName": "docs",
    "path": "docs/support/contact"
  },
  "reference/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"core\": \"Core\",\n  \"changelog\": \"Changelog\",\n};\n\nexport default meta;\n",
    "parentName": "reference",
    "path": "reference/_meta"
  },
  "reference/changelog/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"changelog\": \"Changelog\",\n};\n\nexport default meta;\n",
    "parentName": "reference",
    "path": "reference/changelog/_meta"
  },
  "reference/changelog/changelog": {
    "name": "changelog",
    "content": "**Changelog**\n\n\nThis page documents notable changes to the lomi. API and related services.\n\n**Version 1 (v1)**\n\n\n*   **Initial Release:** The first version of our REST API (`/v1/`).\n*   **Core Resources:** Introduced foundational endpoints for managing:\n    *   [Authentication](./../core/authentication)\n    *   [Merchants](./../core/merchants)\n    *   [Customers](./../core/customers)\n    *   [Products](./../core/products)\n    *   [Transactions](./../core/transactions)\n    *   [Subscription Plans](./../core/subscriptions)\n    *   [Providers](./../core/providers)\n    *   [Webhooks](./../core/webhooks)\n    *   [Checkout Sessions](./../core/checkout-sessions)\n    *   [Customer Subscriptions](./../core/customer-subscriptions)\n    *   [Payment Links](./../core/payment-links)\n    *   [Refunds](./../core/refunds) (Beta)\n*   **Environments:** Established separate Test and Live environments.\n*   **Error Handling:** Standardized error response structure.",
    "parentName": "reference",
    "path": "reference/changelog/changelog"
  },
  "reference/core/_meta": {
    "name": "_meta",
    "content": "import { Meta } from \"@/lib/types/meta\";\n\nconst meta: Meta = {\n  \"overview\": \"Overview\",\n  \"authentication\": \"Authentication\",\n  \"errors\": \"Error handling\",\n  \"data-models\": \"Data models\",\n  \"providers\": \"Payment providers\",\n  \"merchants\": \"Merchants\",\n  \"customers\": \"Customers\",\n  \"products\": \"Products\",\n  \"subscriptions\": \"Plans\",\n  \"customer-subscriptions\": \"Subscriptions\",\n  \"payment-links\": \"Payment links\",\n  \"checkout-sessions\": \"Checkout sessions\",\n  \"transactions\": \"Transactions\",\n  \"webhooks\": \"Webhooks\",\n  \"refunds\": \"Refunds (Beta)\"\n};\n\nexport default meta;\n",
    "parentName": "reference",
    "path": "reference/core/_meta"
  },
  "reference/core/authentication": {
    "name": "authentication",
    "content": "**Authentication**\n\n\nAll lomi. requests are authentified using API keys. Any request that doesn't include a valid API key will return an authentication error.\n\nThere are two types of API keys corresponding to lomi.'s two environments: Test and Live.\n\n**API keys**\n\n\nAll API requests must be made over HTTPS. Requests made over plain HTTP will fail. API requests without authentication will also fail.\n\nYou must include an API key in the `` `X-API-Key` `` header for every request.\n\n```http\nGET /v1/providers HTTP/1.1\nHost: api.lomi.africa\nX-API-Key: your_api_key\n```\n\nReplace `your_api_key` with your specific secret API key.\n\n**Test vs. Live environments**\n\n\nlomi. provides two distinct environments to separate development and testing from production operations.\n\n**Test environment**\n\n\nUse the test environment to develop and test your integration without processing real transactions or affecting live data. It mirrors the functionality of the live environment.\n\n-   **API Keys:** Test API keys start with `` `lomi_sk_test_` ``.\n-   **Base URL:** `` ` ``\n-   **Rate Limits:** 120 requests per minute / 20,000 requests per day.\n-   **Data:** Uses simulated data. Responses may include environment flags like `` `\"environment\": \"test\"` ``.\n\n**Live environment**\n\n\nUse the live environment for production operations involving real transactions.\n\n-   **API Keys:** Live API keys start with `` `lomi_sk_live_` ``.\n-   **Base URL:** `` ` ``\n-   **Rate Limits:** 60 requests per minute / 10,000 requests per day.\n-   **Data:** Processes real data. Responses may include environment flags like `` `\"environment\": \"live\"` ``.\n\nTo switch between environments, simply use the appropriate API key and base URL.\n\n**Obtaining API keys**\n\n\nYou can obtain your API keys after signing up and completing verification:\n\n1.  Log in to the [dashboard](\n2.  Navigate to the **Developers** or **API Settings** section.\n3.  Generate separate API keys for the **Test** and **Live** environments.\n\n**Key management and security**\n\n\nTreat your API keys as sensitive credentials. You can manage them (generate, revoke, view usage) in the merchant dashboard.\n\n**Best practices:**\n\n-   **Keep keys confidential:** Do not share your secret keys. Store them securely (e.g., environment variables, secrets management service).\n-   **Never expose keys client-side:** Do not embed API keys in frontend code.\n-   **Avoid version control:** Do not commit keys to your codebase.\n-   **Use test keys for development:** Only use live keys for production applications.\n-   **Rotate keys:** Consider rotating keys periodically or if you suspect a compromise.\n-   **Limit access:** Restrict access to API keys within your organization. ",
    "parentName": "reference",
    "path": "reference/core/authentication"
  },
  "reference/core/checkout-sessions": {
    "name": "checkout-sessions",
    "content": "**Checkout Sessions**\n\n\nThe Checkout Sessions API allows you to create secure, temporary sessions that represent a customer's intent to pay. You redirect your customer to the lomi.-hosted checkout page associated with the session to complete the payment.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. The associated Merchant ID is typically inferred from the key. See the [Authentication](./authentication) guide.\n\n**The checkout session object**\n\n\nRepresents a single checkout attempt, containing details about the payment, customer information (if provided), associated resources (like products or plans), and the session's status and URL. See [Data Models](./data-models#checkout-session-object) for the full structure (Note: This link assumes the object will be added to data-models.mdx).\n\n**Session lifecycle**\n\n\n1.  **Create:** You create a session via the API, specifying the amount, currency, allowed providers, and redirect URLs.\n2.  **Redirect:** You receive a unique `` `url` `` in the response and redirect your customer to this generated checkout page.\n3.  **Payment:** The customer selects a payment method and completes the payment on the page.\n4.  **Status Update:** The session `` `status` `` changes to `` `completed` `` or `` `expired` ``.\n5.  **Redirect Back:** lomi. redirects the customer back to your `` `success_url` `` or `` `cancel_url` ``.\n6.  **Verification:** You should verify the outcome by listening for webhook events (e.g., `` `checkout.session.completed` ``) or by retrieving the session status via the API.\n\n**Endpoints**\n\n\n**Create checkout session**\n\n\nCreates a new checkout session.\n\n**Endpoint:** `` `POST /checkout-sessions` ``\n\n**Request body parameters:**\n\n| Parameter             | Type           | Required | Description                                                                                                |\n| --------------------- | -------------- | -------- | ---------------------------------------------------------------------------------------------------------- |\n| `success_url`         | string (URL)   | Yes      | URL to redirect the customer to after successful payment.                                                |\n| `cancel_url`          | string (URL)   | Yes      | URL to redirect the customer to if they cancel the checkout.                                             |\n| `allowed_providers`   | array (string) | Yes      | Array of payment provider codes allowed for this session (e.g., `[\"WAVE\", \"ORANGE\"]`). Must not be empty. |\n| `amount`              | number         | Yes      | Amount to collect, in the smallest currency unit (e.g., cents for USD, XOF uses base unit). Must be positive. |\n| `currency_code`       | string         | Yes      | 3-letter ISO currency code (e.g., `\"XOF\"`).                                                              |\n| `title`               | string         | No       | Title displayed on the checkout page (e.g., \"Order #123\").                                                |\n| `public_description`  | string         | No       | Description displayed on the checkout page.                                                              |\n| `customer_email`      | string         | No       | Pre-fills the email field on the checkout page.                                                            |\n| `customer_name`       | string         | No       | Pre-fills the name field on the checkout page.                                                             |\n| `customer_phone`      | string         | No       | Pre-fills the phone number field on the checkout page.                                                     |\n| `product_id`          | string (UUID)  | No       | Associates the session with a specific lomi.'s [Product](./products).                                       |\n| `subscription_id`     | string (UUID)  | No       | Associates the session with a specific lomi's [Customer Subscription](./customer-subscriptions).             |\n| `plan_id`             | string (UUID)  | No       | Associates the session with a specific lomi's [Subscription Plan](./subscriptions).                          |\n| `metadata`            | object         | No       | Key-value pairs (up to 50 keys, string values) stored with the session.                                  |\n| `expiration_minutes`  | number         | No       | Minutes until the checkout session expires (default: 30).                                                  |\n| `allow_coupon_code`   | boolean        | No       | Allow coupon codes to be applied during checkout (default: `false`).                                     |\n\n**Example request:**\n\n```json\n{\n  \"success_url\": \"\n  \"cancel_url\": \"\n  \"allowed_providers\": [\"WAVE\", \"ORANGE\"],\n  \"amount\": 10000,\n  \"currency_code\": \"XOF\",\n  \"title\": \"Your Order Summary\",\n  \"metadata\": { \"internal_order_ref\": \"ORD-12345\" }\n}\n```\n\n**Example response (201 Created):**\n\n```json\n{\n  \"data\": {\n    \"checkout_session_id\": \"a465993b-98fb-49c3-9943-5b8eac17004c\",\n    \"url\": \" // Redirect customer here\n    \"status\": \"open\", // Initial status\n    \"expires_at\": \"2025-04-04T15:21:49.955Z\", // Based on expiration_minutes\n    \"created_at\": \"2025-04-04T14:21:49.955Z\",\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n    \"success_url\": \"\n    \"cancel_url\": \"\n    \"amount\": 10000,\n    \"currency_code\": \"XOF\",\n    \"allowed_providers\": [\"WAVE\", \"ORANGE\"],\n    \"title\": \"Your Order Summary\",\n    \"public_description\": null,\n    \"customer_email\": null,\n    \"customer_name\": null,\n    \"customer_phone\": null,\n    \"product_id\": null,\n    \"subscription_id\": null,\n    \"plan_id\": null,\n    \"allow_coupon_code\": false,\n    \"metadata\": { \"internal_order_ref\": \"ORD-12345\" },\n    \"environment\": \"live\" // Or \"test\"\n  }\n}\n```\n\n**Get checkout session**\n\n\nRetrieves the details and current status of a specific checkout session.\n\n**Endpoint:** `` `GET /checkout-sessions/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type          | Required | Description                                                        |\n| --------- | ------------- | -------- | ------------------------------------------------------------------ |\n| `id`      | string (UUID) | Yes      | The unique identifier of the checkout session (`checkout_session_id`). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"checkout_session_id\": \"a465993b-98fb-49c3-9943-5b8eac17004c\",\n    \"status\": \"completed\", // Could be open, completed, expired\n    // ... all other fields as shown in the create response\n    \"updated_at\": \"2025-04-04T14:55:00.123Z\" // Updated when status changes\n  }\n}\n```\n\n**List checkout sessions**\n\n\nRetrieves a list of checkout sessions associated with your merchant account, with options for filtering and pagination.\n\n**Endpoint:** `` `GET /checkout-sessions` ``\n\n**Query parameters:**\n\n| Parameter | Type   | Required | Default | Description                                           |\n| --------- | ------ | -------- | ------- | ----------------------------------------------------- |\n| `limit`   | number | No       | 20      | Maximum number of sessions to return.                 |\n| `page`    | number | No       | 1       | Page number for pagination.                           |\n| `status`  | string | No       | (all)   | Filter by status: `open`, `completed`, or `expired`. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": [\n    {\n      \"checkout_session_id\": \"a465993b-98fb-49c3-9943-5b8eac17004c\",\n      \"status\": \"completed\",\n      // ... other fields\n    },\n    {\n      \"checkout_session_id\": \"b5760a4c-a9cc-50d4-a054-6c9fbd28115d\",\n      \"status\": \"expired\",\n      // ... other fields\n    }\n    // ... more sessions\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 20\n    // Potentially other pagination fields like total_count, total_pages\n  }\n}\n```\n\n**Webhooks**\n\n\nListen for webhook events to be notified when a session is completed or expires, rather than relying solely on polling the API.\n\n-   `` `checkout.session.completed` ``: Sent when a payment is successfully completed through the session.\n-   `` `checkout.session.expired` ``: Sent when an open session passes its expiration time without being completed.\n\nSee the [Webhooks](./webhooks) guide for configuration details.\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for invalid input (missing required fields, invalid URLs, invalid provider codes), `` `401 Unauthorized` ``, `` `403 Forbidden` `` if the session doesn't belong to the merchant, `` `404 Not Found` `` if the session ID doesn't exist, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/checkout-sessions"
  },
  "reference/core/customer-subscriptions": {
    "name": "customer-subscriptions",
    "content": "**Customer Subscriptions**\n\n\nThe Customer Subscriptions API allows you to manage the individual recurring payment subscriptions for your customers. Subscriptions link a specific customer to a [Subscription Plan](./subscriptions) and track the lifecycle of their recurring payments.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. The associated Merchant ID is usually inferred from the key. See the [Authentication](./authentication) guide.\n\n**The customer subscription object**\n\n\nRepresents an active or past subscription for a specific customer to a specific plan. See [Data Models](./data-models#customer-subscription-object) for the full structure (Note: This link assumes the object will be added to data-models.mdx).\n\n**Endpoints**\n\n\n**List customer subscriptions**\n\n\nRetrieves a list of customer subscriptions for your merchant account, with options for filtering and pagination.\n\n**Endpoint:** `` `GET /customer-subscriptions` ``\n\n**Query parameters:**\n\n| Parameter     | Type          | Required | Description                                                                                        |\n| ------------- | ------------- | -------- | -------------------------------------------------------------------------------------------------- |\n| `merchant_id` | string (UUID) | *Maybe*  | The unique identifier of the merchant. *(May be inferred from API key)*                              |\n| `customer_id` | string (UUID) | No       | Filter subscriptions by a specific customer ID.                                                    |\n| `status`      | string        | No       | Filter by subscription status. Valid statuses: `` `pending` ``, `` `active` ``, `` `paused` ``, `` `cancelled` ``, `` `expired` ``, `` `past_due` ``, `` `trial` ``. |\n| `limit`       | number        | No       | Maximum number of subscriptions to return (default: 20).                                           |\n| `offset`      | number        | No       | Number of subscriptions to skip for pagination (default: 0).                                       |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"subscription_id\": \"5f8e3c9d-f1b4-4c0a-8e8c-dc56c7e1dde4\",\n      \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n      \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n      \"plan_id\": \"129208a9-23a0-4827-83f3-58f5dde344f6\",\n      \"plan_name\": \"Premium Monthly Plan\",\n      \"plan_amount\": 10000,\n      \"plan_currency_code\": \"XOF\",\n      \"plan_billing_frequency\": \"monthly\",\n      \"customer_id\": \"7210f6c9-a9c3-4a1e-9d9c-8e8f1e6b2c3d\",\n      \"customer_name\": \"John Doe\",\n      \"customer_email\": \"john.doe@example.com\",\n      \"status\": \"active\",\n      \"start_date\": \"2025-01-01T00:00:00.000Z\",\n      \"end_date\": null,\n      \"next_billing_date\": \"2025-02-01T00:00:00.000Z\",\n      \"metadata\": { \"source\": \"checkout_session\" },\n      \"created_at\": \"2025-01-01T00:00:00.000Z\",\n      \"updated_at\": \"2025-01-01T00:00:00.000Z\"\n    }\n    // ... more subscriptions\n  ],\n  \"meta\": {\n    \"limit\": 20,\n    \"offset\": 0,\n    \"total_returned\": 1 // May include other pagination fields like total_count\n  }\n}\n```\n\n**Get subscription details**\n\n\nRetrieves the details of a specific customer subscription.\n\n**Endpoint:** `` `GET /customer-subscriptions/{subscription_id}` ``\n\n**Path parameters:**\n\n| Parameter         | Type          | Required | Description                                                  |\n| ----------------- | ------------- | -------- | ------------------------------------------------------------ |\n| `subscription_id` | string (UUID) | Yes      | The unique identifier of the customer subscription (`subscription_id`). |\n\n**Query parameters:**\n\n| Parameter     | Type          | Required | Description                                                 |\n| ------------- | ------------- | -------- | ----------------------------------------------------------- |\n| `merchant_id` | string (UUID) | *Maybe*  | The unique identifier of the merchant. *(May be inferred from API key)* |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"subscription_id\": \"5f8e3c9d-f1b4-4c0a-8e8c-dc56c7e1dde4\",\n    // ... all other fields as shown in the list example\n    \"updated_at\": \"2025-01-01T00:00:00.000Z\"\n  }\n}\n```\n\n**Update subscription**\n\n\nUpdates the status, dates, or metadata of a specific customer subscription.\n\n**Endpoint:** `` `PATCH /customer-subscriptions/{subscription_id}` ``\n\n**Path parameters:**\n\n| Parameter         | Type          | Required | Description                                                  |\n| ----------------- | ------------- | -------- | ------------------------------------------------------------ |\n| `subscription_id` | string (UUID) | Yes      | The unique identifier of the customer subscription (`subscription_id`). |\n\n**Query parameters:**\n\n| Parameter     | Type          | Required | Description                                                 |\n| ------------- | ------------- | -------- | ----------------------------------------------------------- |\n| `merchant_id` | string (UUID) | *Maybe*  | The unique identifier of the merchant. *(May be inferred from API key)* |\n\n**Request body parameters:**\n\n*(Include at least one of the following optional fields)*\n\n| Parameter           | Type             | Description                                                                   |\n| ------------------- | ---------------- | ----------------------------------------------------------------------------- |\n| `status`            | string           | New status: `` `active` ``, `` `paused` ``, `` `cancelled` ``, `` `expired` ``, `` `past_due` ``, `` `trial` ``.    |\n| `start_date`        | string (ISO8601) | New start date for the subscription.                                          |\n| `end_date`          | string (ISO8601) | New end date for the subscription (often used when cancelling).               |\n| `next_billing_date` | string (ISO8601) | Manually set the next billing date.                                           |\n| `metadata`          | object           | Updates/adds key-value pairs. Merged with existing metadata.                  |\n\n**Example request (pause subscription):**\n\n```json\n{\n  \"status\": \"paused\",\n  \"metadata\": {\n    \"reason\": \"Customer request via support ticket #123\"\n  }\n}\n```\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"subscription_id\": \"5f8e3c9d-f1b4-4c0a-8e8c-dc56c7e1dde4\",\n    // ... other fields\n    \"status\": \"paused\",\n    \"metadata\": {\n      \"source\": \"checkout_session\",\n      \"reason\": \"Customer request via support ticket #123\"\n    },\n    \"updated_at\": \"2025-01-15T10:30:00.000Z\"\n  }\n}\n```\n\n**Cancel subscription**\n\n\nCancels a specific customer subscription by setting its status to `` `cancelled` ``.\n\n**Endpoint:** `` `DELETE /customer-subscriptions/{subscription_id}` ``\n\n**Path parameters:**\n\n| Parameter         | Type          | Required | Description                                                  |\n| ----------------- | ------------- | -------- | ------------------------------------------------------------ |\n| `subscription_id` | string (UUID) | Yes      | The unique identifier of the customer subscription (`subscription_id`). |\n\n**Query parameters:**\n\n| Parameter     | Type          | Required | Description                                                 |\n| ------------- | ------------- | -------- | ----------------------------------------------------------- |\n| `merchant_id` | string (UUID) | *Maybe*  | The unique identifier of the merchant. *(May be inferred from API key)* |\n\n**Example response (200 OK):**\n\n*(The source documentation shows a 200 OK with a body showing the cancelled object. While 204 No Content is common for DELETE, we follow the source here.)*\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"subscription_id\": \"5f8e3c9d-f1b4-4c0a-8e8c-dc56c7e1dde4\",\n    // ... other fields\n    \"status\": \"cancelled\",\n    \"end_date\": \"2025-01-15T11:00:00.000Z\", // Typically set upon cancellation\n    \"updated_at\": \"2025-01-15T11:00:00.000Z\"\n  }\n}\n```\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for invalid input or missing fields, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the subscription ID doesn't exist for the merchant, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/customer-subscriptions"
  },
  "reference/core/customers": {
    "name": "customers",
    "content": "**Customers**\n\n\nThe Customers API allows you to create, retrieve, update, list, and delete customer profiles associated with your merchant account.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. See the [Authentication](./authentication) guide.\n\n**The customer object**\n\n\nRepresents a customer profile containing contact information and other details. See [Data Models](./data-models#customer-object) for the full structure.\n\n**Endpoints**\n\n\n**Create a customer**\n\n\nCreates a new customer profile.\n\n**Endpoint:** `` `POST /customers` ``\n\n**Request body parameters:**\n\n| Parameter         | Type    | Required | Description                                           |\n| ----------------- | ------- | -------- | ----------------------------------------------------- |\n| `` `name` ``            | `` `string` ``  | Yes      | Customer's full name.                                 |\n| `` `email` ``           | `` `string` ``  | No       | Customer's email address.                             |\n| `` `phone_number` ``    | `` `string` ``  | No       | Customer's phone number (preferably E.164 format).    |\n| `` `whatsapp_number` `` | `` `string` ``  | No       | Customer's WhatsApp number (preferably E.164 format). |\n| `` `country` ``         | `` `string` ``  | No       | Customer's country name or code.                     |\n| `` `city` ``            | `` `string` ``  | No       | Customer's city.                                     |\n| `` `address` ``         | `` `string` ``  | No       | Customer's street address.                            |\n| `` `postal_code` ``     | `` `string` ``  | No       | Customer's postal code.                               |\n| `` `is_business` ``     | `` `boolean` `` | No       | Set `` `true` `` if the customer is a business (default: `` `false` ``). |\n| `` `metadata` ``        | `` `object` ``  | No       | Key-value pairs for storing additional information.   |\n\n**Example request:**\n\n```json\n{\n  \"name\": \"Amadou Ba\",\n  \"email\": \"amadou.ba@example.com\",\n  \"phone_number\": \"+221771234567\",\n  \"country\": \"Senegal\",\n  \"city\": \"Dakar\",\n  \"is_business\": false\n}\n```\n\n**Example response (201 Created):**\n\n```json\n{\n  \"data\": {\n    \"customer_id\": \"b78de3c9-7f76-4f43-9c5d-19d9f5c7c985\",\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n    \"name\": \"Amadou Ba\",\n    \"email\": \"amadou.ba@example.com\",\n    \"phone_number\": \"+221771234567\",\n    \"whatsapp_number\": null,\n    \"country\": \"Senegal\",\n    \"city\": \"Dakar\",\n    \"address\": null,\n    \"postal_code\": null,\n    \"is_business\": false,\n    \"metadata\": null,\n    \"created_at\": \"2025-04-04T14:21:49.955Z\",\n    \"updated_at\": \"2025-04-04T14:21:49.955Z\"\n  }\n}\n```\n\n**Get a customer**\n\n\nRetrieves the details of a specific customer by their ID.\n\n**Endpoint:** `` `GET /customers/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                     |\n| --------- | ------ | -------- | ------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the customer (`` `customer_id` ``). |\n\n**Example response (200 OK):**\n\n*(Response structure is the same as the `Create a customer` response)*\n\n**Update a customer**\n\n\nUpdates the details of a specific customer.\n\n**Endpoint:** `` `PATCH /customers/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                     |\n| --------- | ------ | -------- | ------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the customer (`` `customer_id` ``). |\n\n**Request body parameters:**\n\n*(Include only the fields you want to update. Parameters are the same as for `` `Create a customer` ``, none are required.)*\n\n**Example request:**\n\n```json\n{\n  \"phone_number\": \"+221779876543\",\n  \"address\": \"123 Main St\"\n}\n```\n\n**Example response (200 OK):**\n\n*(Response structure is the same as the `Create a customer` response, showing updated values and `updated_at` timestamp)*\n\n**List customers**\n\n\nReturns a list of customers associated with your merchant account. Supports pagination and filtering.\n\n**Endpoint:** `` `GET /customers` ``\n\n**Query parameters:**\n\n| Parameter     | Type   | Required | Description                                          |\n| ------------- | ------ | -------- | ---------------------------------------------------- |\n| `` `limit` ``       | `` `number` `` | No       | Maximum number of customers to return (default: 20). |\n| `` `page` ``        | `` `number` `` | No       | Page number for pagination (default: 1).             |\n| `` `email` ``       | `` `string` `` | No       | Filter customers by exact email address.             |\n| `` `phone_number` ``| `` `string` `` | No       | Filter customers by exact phone number.              |\n\n**Note:** By default, this endpoint only returns customers who have completed or refunded transactions. To see all customers, including newly created ones without transactions, you might need specific permissions or a different filter (check API updates for this behavior).\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": [\n    {\n      \"customer_id\": \"b78de3c9-7f76-4f43-9c5d-19d9f5c7c985\",\n      // ... other customer fields\n    }\n    // ... more customer objects\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 20\n    // Potentially other pagination fields like total_count, total_pages\n  }\n}\n```\n\n**Delete a customer**\n\n\nDeletes a specific customer profile.\n\n**Endpoint:** `` `DELETE /customers/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                     |\n| --------- | ------ | -------- | ------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the customer (`` `customer_id` ``). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"customer_id\": \"b78de3c9-7f76-4f43-9c5d-19d9f5c7c985\",\n    \"deleted\": true\n  }\n}\n```\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for invalid input, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the customer ID doesn't exist, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/customers"
  },
  "reference/core/data-models": {
    "name": "data-models",
    "content": "**Data models**\n\n\nThis section describes the structure of common data objects returned by our API endpoints documented in this core reference.\n\n**Merchant object**\n\n\nRepresents a merchant account on lomi. Returned by the `` `GET /merchants/{id}` `` endpoint.\n\n| Property                  | Type     | Description                                                                                         |\n| ------------------------- | -------- | --------------------------------------------------------------------------------------------------- |\n| `` `merchant_id` ``             | `` `string` ``   | Unique identifier for the merchant account.                                                         |\n| `` `name` ``                    | `` `string` ``   | The registered name of the merchant.                                                                |\n| `` `email` ``                   | `` `string` ``   | The primary contact email address for the merchant.                                                 |\n| `` `phone_number` ``            | `` `string` ``   | The primary contact phone number for the merchant.                                                  |\n| `` `country` ``                 | `` `string` ``   | The two-letter ISO country code where the merchant is based (e.g., `` `\"SN\"` ``).                          |\n| `` `mrr` ``                     | `` `number` ``   | Monthly Recurring Revenue, calculated based on active subscriptions (in smallest currency unit).    |\n| `` `arr` ``                     | `` `number` ``   | Annual Recurring Revenue, calculated based on active subscriptions (in smallest currency unit).     |\n| `` `merchant_lifetime_value` `` | `` `number` ``   | Total value processed for this merchant (in smallest currency unit).                                |\n| `` `retry_payment_every` ``     | `` `number` ``   | The number of days between automatic retry attempts for failed subscription payments.               |\n| `` `total_retries` ``           | `` `number` ``   | The total number of automatic retry attempts configured for failed subscription payments.           |\n| `` `metadata` ``                | `` `object` ``   | A set of key-value pairs that you can attach to the object. Useful for storing additional information. |\n| `` `created_at` ``              | `` `string` ``   | Timestamp (ISO 8601) indicating when the merchant account was created.                               |\n| `` `updated_at` ``              | `` `string` ``   | Timestamp (ISO 8601) indicating when the merchant account was last updated.                         |\n\n**Example:**\n\n```json\n{\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"name\": \"Test Merchant\",\n  \"email\": \"merchant@example.com\",\n  \"phone_number\": \"+123456789\",\n  \"country\": \"SN\",\n  \"mrr\": 50000,\n  \"arr\": 600000,\n  \"merchant_lifetime_value\": 1200000,\n  \"retry_payment_every\": 3,\n  \"total_retries\": 5,\n  \"metadata\": {\n    \"industry\": \"e-commerce\"\n  },\n  \"created_at\": \"2023-01-15T10:30:00Z\",\n  \"updated_at\": \"2023-02-20T14:45:00Z\"\n}\n```\n\n**Transaction object**\n\n\nRepresents a single transaction, such as a payment or refund. Returned by transaction endpoints (`` `GET /transactions` ``, `` `GET /transactions/{id}` ``).\n\n| Property                  | Type   | Description                                                                        |\n| ------------------------- | ------ | ---------------------------------------------------------------------------------- |\n| `` `transaction_id` ``          | `` `string` `` | Unique identifier for the transaction (UUID).                                      |\n| `` `merchant_id` ``             | `` `string` `` | Identifier for the merchant associated with this transaction.                      |\n| `` `organization_id` ``         | `` `string` `` | Identifier for the organization associated with this transaction.                    |\n| `` `customer_id` ``             | `` `string` `` | Identifier for the customer associated with this transaction (nullable).           |\n| `` `gross_amount` ``            | `` `number` `` | The total amount of the transaction in the smallest currency unit.                  |\n| `` `fee_amount` ``              | `` `number` `` | The fee amount deducted from the transaction in the smallest currency unit.        |\n| `` `net_amount` ``              | `` `number` `` | The net amount received by the merchant (`` `gross_amount` `` - `` `fee_amount` ``).          |\n| `` `fee_reference` ``           | `` `string` `` | Identifier for the fee structure applied (nullable).                               |\n| `` `currency_code` ``           | `` `string` `` | Three-letter ISO currency code (e.g., `` `\"XOF\"` ``).                                    |\n| `` `payment_method_code` ``     | `` `string` `` | Code identifying the payment method used (e.g., `` `\"MOBILE_MONEY\"` ``).                 |\n| `` `provider_code` ``           | `` `string` `` | Code identifying the payment provider used (e.g., `` `\"WAVE\"` ``).                      |\n| `` `provider_transaction_id` `` | `` `string` `` | The transaction ID from the external payment provider system (nullable).            |\n| `` `transaction_type` ``        | `` `string` `` | Type of transaction (e.g., `` `\"payment\"` ``, `` `\"refund\"` ``).                               |\n| `` `product_id` ``              | `` `string` `` | Identifier for the product associated with this transaction (nullable).            |\n| `` `subscription_id` ``         | `` `string` `` | Identifier for the subscription associated with this transaction (nullable).       |\n| `` `status` ``                  | `` `string` `` | Current status of the transaction (`` `pending` ``, `` `completed` ``, `` `failed` ``, `` `refunded` ``, `` `expired` ``). |\n| `` `description` ``             | `` `string` `` | Description provided for the transaction (nullable).                               |\n| `` `metadata` ``                | `` `object` `` | Key-value pairs for storing additional information about the transaction (nullable). |\n| `` `created_at` ``              | `` `string` `` | Timestamp (ISO 8601) indicating when the transaction was created.                 |\n| `` `updated_at` ``              | `` `string` `` | Timestamp (ISO 8601) indicating when the transaction was last updated.           |\n| `` `environment` ``             | `` `string` `` | Indicates the environment (`` `test` `` or `` `live` ``) where the transaction occurred.       |\n\n**Example:**\n\n```json\n{\n  \"transaction_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n  \"customer_id\": \"c47ac10b-58cc-4372-a567-0e02b2c3d480\",\n  \"gross_amount\": 5000,\n  \"fee_amount\": 125,\n  \"net_amount\": 4875,\n  \"fee_reference\": \"STANDARD_FEE\",\n  \"currency_code\": \"XOF\",\n  \"payment_method_code\": \"MOBILE_MONEY\",\n  \"provider_code\": \"WAVE\",\n  \"provider_transaction_id\": \"prov_trx_12345\",\n  \"transaction_type\": \"payment\",\n  \"product_id\": null,\n  \"subscription_id\": null,\n  \"status\": \"completed\",\n  \"description\": \"Payment for Order #5678\",\n  \"created_at\": \"2025-04-05T10:30:00.000Z\",\n  \"updated_at\": \"2025-04-05T10:30:05.000Z\",\n  \"metadata\": { \"source\": \"api\" },\n  \"environment\": \"test\"\n}\n```\n\n**Subscription plan object**\n\n\nRepresents a reusable subscription plan definition. Returned by subscription plan endpoints (`` `GET /merchants/{m_id}/subscriptions` ``, `` `POST /merchants/{m_id}/subscriptions` ``, etc.).\n\n| Property                | Type   | Description                                                                                 |\n| ----------------------- | ------ | ------------------------------------------------------------------------------------------- |\n| `` `plan_id` ``               | `` `string` `` | Unique identifier for the subscription plan (UUID).                                         |\n| `` `merchant_id` ``           | `` `string` `` | Identifier for the merchant this plan belongs to.                                           |\n| `` `organization_id` ``       | `` `string` `` | Identifier for the organization this plan belongs to.                                     |\n| `` `name` ``                  | `` `string` `` | Name of the subscription plan.                                                              |\n| `` `description` ``           | `` `string` `` | Description of the plan (nullable).                                                         |\n| `` `amount` ``                | `` `number` `` | Amount to be charged per billing cycle, in the smallest currency unit.                      |\n| `` `currency_code` ``         | `` `string` `` | Three-letter ISO currency code for the amount (e.g., `` `\"XOF\"` ``).                              |\n| `` `billing_frequency` ``     | `` `string` `` | How often the subscription renews (e.g., `` `monthly` ``, `` `yearly` ``, `` `weekly` ``).                       |\n| `` `failed_payment_action` `` | `` `string` `` | Action to take on failed recurring payments (e.g., `` `cancel` ``, `` `pause` ``) (nullable).           |\n| `` `charge_day` ``            | `` `number` `` | Specific day for charging (day of month/week, depending on frequency) (nullable).           |\n| `` `metadata` ``              | `` `object` `` | Key-value pairs for storing additional information about the plan (nullable).               |\n| `` `is_active` ``             | `` `boolean` ``| Whether the plan can be used to create new customer subscriptions.                            |\n| `` `first_payment_type` ``    | `` `string` `` | Type of the first payment (e.g., `` `initial` ``, `` `prorated` ``) (nullable).                          |\n| `` `created_at` ``            | `` `string` `` | Timestamp (ISO 8601) indicating when the plan was created.                                  |\n| `` `updated_at` ``            | `` `string` `` | Timestamp (ISO 8601) indicating when the plan was last updated.                            |\n\n**Example:**\n\n```json\n{\n  \"plan_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"organization_id\": \"org_abc123...\",\n  \"name\": \"Pro Monthly Plan\",\n  \"description\": \"Access to all pro features, billed monthly.\",\n  \"amount\": 1500000,\n  \"currency_code\": \"XOF\",\n  \"billing_frequency\": \"monthly\",\n  \"failed_payment_action\": null,\n  \"charge_day\": null,\n  \"metadata\": {\n    \"internal_code\": \"PRO_M\"\n  },\n  \"is_active\": true,\n  \"first_payment_type\": \"initial\",\n  \"created_at\": \"2023-10-27T10:00:00Z\",\n  \"updated_at\": \"2023-10-27T10:00:00Z\"\n}\n```\n\n**Customer object**\n\n\nRepresents a customer profile associated with a merchant account. Returned by customer endpoints (`` `GET /customers/{id}` ``, `` `POST /customers` ``, etc.).\n\n| Property          | Type    | Description                                                                       |\n| ----------------- | ------- | --------------------------------------------------------------------------------- |\n| `` `customer_id` ``     | `` `string` ``  | Unique identifier for the customer.                                               |\n| `` `merchant_id` ``     | `` `string` ``  | Identifier for the merchant this customer belongs to.                           |\n| `` `organization_id` `` | `` `string` ``  | Identifier for the organization this customer belongs to.                       |\n| `` `name` ``            | `` `string` ``  | Customer's full name.                                                              |\n| `` `email` ``           | `` `string` ``  | Customer's email address (nullable).                                              |\n| `` `phone_number` ``    | `` `string` ``  | Customer's phone number (nullable).                                               |\n| `` `whatsapp_number` `` | `` `string` ``  | Customer's WhatsApp number (nullable).                                            |\n| `` `country` ``         | `` `string` ``  | Customer's country (nullable).                                                    |\n| `` `city` ``            | `` `string` ``  | Customer's city (nullable).                                                       |\n| `` `address` ``         | `` `string` ``  | Customer's street address (nullable).                                             |\n| `` `postal_code` ``     | `` `string` ``  | Customer's postal code (nullable).                                                |\n| `` `is_business` ``     | `` `boolean` `` | Indicates if the customer represents a business.                                  |\n| `` `metadata` ``        | `` `object` ``  | Key-value pairs for storing additional information about the customer (nullable). |\n| `` `created_at` ``      | `` `string` ``  | Timestamp (ISO 8601) indicating when the customer was created.                   |\n| `` `updated_at` ``      | `` `string` ``  | Timestamp (ISO 8601) indicating when the customer was last updated.              |\n\n**Example:**\n\n```json\n{\n  \"customer_id\": \"b78de3c9-7f76-4f43-9c5d-19d9f5c7c985\",\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone_number\": \"+221771234567\",\n  \"whatsapp_number\": null,\n  \"country\": \"Senegal\",\n  \"city\": \"Dakar\",\n  \"address\": null,\n  \"postal_code\": null,\n  \"is_business\": false,\n  \"metadata\": null,\n  \"created_at\": \"2025-04-04T14:21:49.955Z\",\n  \"updated_at\": \"2025-04-04T14:21:49.955Z\"\n}\n```\n\n**Product object**\n\n\nRepresents a product or service that can be purchased. Returned by product endpoints (`` `GET /products` ``, `` `POST /products` ``, etc.).\n\n| Property                | Type           | Description                                                               |\n| ----------------------- | -------------- | ------------------------------------------------------------------------- |\n| `` `product_id` ``            | `` `string` ``         | Unique identifier for the product (UUID).                                 |\n| `` `merchant_id` ``           | `` `string` ``         | Identifier for the merchant this product belongs to.                      |\n| `` `organization_id` ``       | `` `string` ``         | Identifier for the organization this product belongs to.                  |\n| `` `name` ``                  | `` `string` ``         | Name of the product.                                                      |\n| `` `description` ``           | `` `string` ``         | Description of the product (nullable).                                    |\n| `` `price` ``                 | `` `number` ``         | Price of the product (in the specified currency).                         |\n| `` `currency_code` ``         | `` `string` ``         | Currency code for the price (e.g., `` `\"XOF\"` ``, `` `\"USD\"` ``).                   |\n| `` `image_url` ``             | `` `string` ``         | URL for the product image (nullable).                                     |\n| `` `is_active` ``             | `` `boolean` ``        | Whether the product is currently active and can be purchased.             |\n| `` `display_on_storefront` `` | `` `boolean` ``        | Whether the product should be displayed on a merchant storefront (if applicable). |\n| `` `fee_type_ids` ``        | `` `array (string)` `` | Array of UUIDs for associated organization fee types (may not be present). |\n| `` `created_at` ``            | `` `string` ``         | Timestamp (ISO 8601) indicating when the product was created.            |\n| `` `updated_at` ``            | `` `string` ``         | Timestamp (ISO 8601) indicating when the product was last updated.       |\n\n**Example:**\n\n```json\n{\n  \"product_id\": \"uuid-generated-for-product\",\n  \"merchant_id\": \"uuid-of-authenticated-merchant\",\n  \"organization_id\": \"uuid-of-merchants-org\",\n  \"name\": \"Premium Widget\",\n  \"description\": \"An optional description of the widget.\",\n  \"price\": 19.99,\n  \"currency_code\": \"XOF\",\n  \"image_url\": \"\n  \"is_active\": true,\n  \"display_on_storefront\": true,\n  \"created_at\": \"2023-10-27T10:00:00Z\",\n  \"updated_at\": \"2023-10-27T10:00:00Z\"\n}\n```\n\n**Provider object**\n\n\nRepresents an available payment provider and its connection status for your account. Returned by the `` `GET /providers` `` endpoint.\n\n| Property          | Type           | Description                                                     |\n| ----------------- | -------------- | --------------------------------------------------------------- |\n| `` `code` ``            | `` `string` ``         | Unique identifier for the payment provider (e.g., `` `\"ORANGE\"` ``). |\n| `` `name` ``            | `` `string` ``         | Display name of the payment provider (e.g., `` `\"Orange Money\"` ``).  |\n| `` `description` ``     | `` `string` ``         | Brief description of the payment provider.                      |\n| `` `payment_methods` `` | `` `array (string)` `` | List of payment method types supported by this provider (e.g., `` `[\"mobile_money\"]` ``). |\n| `` `is_connected` ``    | `` `boolean` ``        | Indicates whether this provider is configured and active for your merchant account. |\n\n**Example:**\n\n```json\n{\n  \"code\": \"WAVE\",\n  \"name\": \"Wave\",\n  \"description\": \"Pay with Wave mobile wallet\",\n  \"payment_methods\": [\"mobile_money\"],\n  \"is_connected\": false\n}\n```\n\n**Webhook object**\n\n\nRepresents a configured webhook endpoint for receiving event notifications. Returned by webhook endpoints (`GET /webhooks`, `POST /webhooks`, etc.).\n\n| Property      | Type           | Description                                                                                              |\n| ------------- | -------------- | -------------------------------------------------------------------------------------------------------- |\n| `` `webhook_id` `` | `` `string` ``         | Unique identifier for the webhook endpoint (UUID).                                                       |\n| `` `merchant_id` `` | `` `string` ``         | Identifier for the merchant account this webhook belongs to.                                               |\n| `` `organization_id` `` | `` `string` ``         | Identifier for the organization this webhook belongs to.                                                   |\n| `` `url` ``        | `` `string` ``         | The HTTPS URL where event notifications will be sent.                                                    |\n| `` `description` `` | `` `string` ``         | Optional description for the webhook endpoint.                                                           |\n| `` `event_types` `` | `` `array (string)` `` | List of event types this endpoint is subscribed to (e.g., `` `[\"transaction.succeeded\"]` ``). |\n| `` `is_active` ``   | `` `boolean` ``        | Whether the webhook endpoint is currently active and receiving events.                                   |\n| `` `secret` ``      | `` `string` ``         | The secret key used to sign webhook events (used to verify the sender). Returned only on creation. |\n| `` `created_at` ``  | `` `string` ``         | Timestamp (ISO 8601) indicating when the webhook was created.                                            |\n| `` `updated_at` ``  | `` `string` ``         | Timestamp (ISO 8601) indicating when the webhook was last updated.                                       |\n\n**Example (on creation):**\n\n```json\n{\n  \"webhook_id\": \"wh_abc123...\",\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"organization_id\": \"org_abc123...\",\n  \"url\": \"\n  \"description\": \"Primary webhook for payment events\",\n  \"event_types\": [\n    \"transaction.succeeded\",\n    \"transaction.failed\"\n  ],\n  \"is_active\": true,\n  \"secret\": \"whsec_...\", // Returned only on creation\n  \"created_at\": \"2023-10-27T12:00:00Z\",\n  \"updated_at\": \"2023-10-27T12:00:00Z\"\n}\n```\n\n**Example (on retrieval):**\n\n```json\n{\n  \"webhook_id\": \"wh_abc123...\",\n  \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n  \"organization_id\": \"org_abc123...\",\n  \"url\": \"\n  \"description\": \"Primary webhook for payment events\",\n  \"event_types\": [\n    \"transaction.succeeded\",\n    \"transaction.failed\"\n  ],\n  \"is_active\": true,\n  // \"secret\" is not returned on retrieval\n  \"created_at\": \"2023-10-27T12:00:00Z\",\n  \"updated_at\": \"2023-10-27T12:15:00Z\"\n}\n```\n\n**Error object**\n\n\nRepresents the structure returned in the response body when an API request fails (returns a `4xx` or `5xx` status code).\n\n| Property    | Type             | Description                                                                 |\n| ----------- | ---------------- | --------------------------------------------------------------------------- |\n| `error`     | object           | Container for the error details.                                            |\n| `message`   | string           | A brief, human-readable summary of the error.                               |\n| `details`   | string or object | Optional. Provides more specific context or structured data about the error. |\n\nSee the [Errors](./errors) guide for more details on status codes and common error messages.\n\n**Example:**\n\n```json\n{\n  \"error\": {\n    \"message\": \"Invalid API key\",\n    \"details\": \"The provided API key is invalid or does not exist\"\n  }\n}\n``` ",
    "parentName": "reference",
    "path": "reference/core/data-models"
  },
  "reference/core/errors": {
    "name": "errors",
    "content": "**Error handling**\n\n\nWe use conventional HTTP status codes to indicate the success or failure of an API request. In general:\n\n-   Codes in the `` `2xx` `` range indicate success.\n-   Codes in the `` `4xx` `` range indicate a client-side error (e.g., a required parameter was omitted, invalid data was sent, etc.).\n-   Codes in the `` `5xx` `` range indicate an error with our servers (these are rare), in case of doubt you can visit our [status page](\n\nWhen an API request fails (returns a `` `4xx` `` or `` `5xx` `` status code), the response body will contain a JSON object detailing the error.\n\n**Error response structure**\n\n\nAll error responses follow a consistent JSON format:\n\n```json\n{\n  \"error\": {\n    \"message\": \"A human-readable description of the error.\",\n    \"details\": \"Optional: Additional details or structured information about the error.\"\n  }\n}\n```\n\n| Property    | Type                   | Description                                                    |\n| ----------- | ---------------------- | -------------------------------------------------------------- |\n| `` `error` ``     | `` `object` ``                 | Container for the error information.                           |\n| `` `message` ``   | `` `string` ``                 | A brief, human-readable summary of the error.                  |\n| `` `details` ``   | `` `string` `` or `` `object` ``       | Optional. Provides more specific context or structured data about the error (e.g., validation failures, conflicting resources). |\n\n**HTTP status codes**\n\n\nHere are some common HTTP status codes you might encounter:\n\n| Code | Status                  | Meaning                                                                                     |\n| ---- | ----------------------- | ------------------------------------------------------------------------------------------- |\n| `` `200` ``  | OK                      | The request was successful.                                                                 |\n| `` `201` ``  | Created                 | The request was successful and a resource was created (e.g., creating a webhook).         |\n| `` `204` ``  | No Content              | The request was successful but there is no representation to return (e.g., deleting a webhook). |\n| `` `400` ``  | Bad Request             | The request was unacceptable, often due to missing a required parameter or invalid data format. |\n| `` `401` ``  | Unauthorized            | No valid API key provided.                                                                  |\n| `` `403` ``  | Forbidden               | The API key doesn't have permissions to perform the request.                                |\n| `` `404` ``  | Not Found               | The requested resource doesn't exist.                                                       |\n| `` `409` ``  | Conflict                | The request conflicts with the current state of the resource (e.g., duplicate webhook URL). |\n| `` `429` ``  | Too Many Requests       | Rate limits have been exceeded.                                                             |\n| `` `500` ``  | Internal Server Error   | Something went wrong on lomi's end (these are rare).                                        |\n| `` `503` ``  | Service Unavailable     | We're temporarily offline for maintenance. Please try again later.                           |\n\n**Common error messages**\n\n\nWhile the specific `` `message` `` and `` `details` `` will vary, here are examples associated with common status codes:\n\n**`` `400` `` Bad Request:**\n\n-   `\"message\": \"Invalid request\"`, `\"details\": \"Missing required field: \\`url\\`\"`\n-   `\"message\": \"Invalid request\"`, `\"details\": \"Invalid \\`Webhook ID\\` format.\"`\n-   `\"message\": \"Invalid request body\"`\n\n**`` `401` `` Unauthorized:**\n\n-   `\"message\": \"Invalid API key\"`, `\"details\": \"The provided API key is invalid or does not exist\"`\n-   `\"message\": \"Missing API key\"`, `\"details\": \"API key is required for authentication\"`\n-   `\"message\": \"Authentication required\"`\n\n**`` `404` `` Not Found:**\n\n-   `\"message\": \"Webhook not found\"`, `\"details\": \"Webhook with ID \\`wh_...\\` does not exist or does not belong to this organization.\"`\n-   `\"message\": \"Resource not found\"`\n\n**`` `409` `` Conflict:**\n\n-   `\"message\": \"Conflict\"`, `\"details\": \"A webhook with this URL already exists for your organization.\"`\n\n**`` `429` `` Too Many Requests:**\n\n-   `\"message\": \"Rate limit exceeded\"`\n\n**`` `500` `` Internal Server Error:**\n\n-   `\"message\": \"Internal server error\"`\n-   `\"message\": \"Database error\"`, `\"details\": \"Failed to execute database query.\"`\n\n**Handling errors**\n\n\nYour integration should gracefully handle potential API errors:\n\n1.  **Check the HTTP Status Code:** Determine the general outcome of the request.\n2.  **Parse the Response Body:** If the status code indicates an error (`` `4xx` `` or `` `5xx` ``), parse the JSON response body.\n3.  **Use Error Information:** Use the `` `message` `` and `` `details` `` from the parsed JSON to understand the specific problem.\n4.  **Implement Logic:** Based on the error type, implement appropriate logic (e.g., prompt the user to fix input for a `` `400` `` error, check credentials for `` `401` ``, retry later for `` `429` `` or `` `5xx` `` errors).\n5.  **Log Errors:** Log errors, including the full response body and potentially the request ID (if provided in headers), to aid debugging. ",
    "parentName": "reference",
    "path": "reference/core/errors"
  },
  "reference/core/merchants": {
    "name": "merchants",
    "content": "**Merchants**\n\n\nThe Merchants API allows you to retrieve information about merchant accounts, including details, recurring revenue metrics, and balances.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. See the [Authentication](./authentication) guide.\n\n**Endpoints**\n\n\n**Get merchant details**\n\n\nRetrieves detailed information about a specific merchant account.\n\n**Endpoint:** `` `GET /merchants/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the merchant. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"name\": \"Test Merchant\",\n    \"email\": \"merchant@example.com\",\n    \"phone_number\": \"+123456789\",\n    \"country\": \"SN\",\n    \"mrr\": 50000, // In smallest currency unit\n    \"arr\": 600000, // In smallest currency unit\n    \"merchant_lifetime_value\": 1200000, // In smallest currency unit\n    \"retry_payment_every\": 3,\n    \"total_retries\": 5,\n    \"metadata\": {\n      \"industry\": \"e-commerce\"\n    },\n    \"created_at\": \"2023-01-15T10:30:00Z\",\n    \"updated_at\": \"2023-02-20T14:45:00Z\"\n  }\n}\n```\n\n*(See [Data Models](./data-models#merchant-object) for property descriptions)*\n\n**Possible error responses:**\n\n| Status Code | Error Code         | Description                                    |\n| ----------- | ------------------ | ---------------------------------------------- |\n| `` `401` ``         | `` `UNAUTHORIZED` ``     | Authentication failed or API key is invalid.  |\n| `` `404` ``         | `` `MERCHANT_NOT_FOUND` `` | No merchant found with the provided ID.        |\n| `` `500` ``         | `` `DATABASE_ERROR` ``   | Error retrieving merchant details.             |\n| `` `500` ``         | `` `INTERNAL_ERROR` ``   | Internal server error.                         |\n\n**Get merchant monthly recurring revenue (MRR)**\n\n\nRetrieves the current MRR for a merchant.\n\n**Endpoint:** `` `GET /merchants/{id}/mrr` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the merchant. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"mrr\": 50000, // In smallest currency unit\n    \"currency_code\": \"XOF\",\n    \"as_of_date\": \"2023-04-01T00:00:00Z\"\n  }\n}\n```\n\n**Possible error responses:**\n\n| Status Code | Error Code         | Description                                    |\n| ----------- | ------------------ | ---------------------------------------------- |\n| `` `401` ``         | `` `UNAUTHORIZED` ``     | Authentication failed or API key is invalid.  |\n| `` `404` ``         | `` `MERCHANT_NOT_FOUND` `` | No merchant found with the provided ID.        |\n| `` `404` ``         | `` `NOT_FOUND` ``        | No MRR data found for the merchant.           |\n| `` `500` ``         | `` `DATABASE_ERROR` ``   | Error retrieving merchant MRR.                 |\n| `` `500` ``         | `` `INTERNAL_ERROR` ``   | Internal server error.                         |\n\n**Get merchant annual recurring revenue (ARR)**\n\n\nRetrieves the current ARR for a merchant.\n\n**Endpoint:** `` `GET /merchants/{id}/arr` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the merchant. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"arr\": 600000, // In smallest currency unit\n    \"currency_code\": \"XOF\",\n    \"as_of_date\": \"2023-04-01T00:00:00Z\"\n  }\n}\n```\n\n**Possible error responses:**\n\n| Status Code | Error Code         | Description                                    |\n| ----------- | ------------------ | ---------------------------------------------- |\n| `` `401` ``         | `` `UNAUTHORIZED` ``     | Authentication failed or API key is invalid.  |\n| `` `404` ``         | `` `MERCHANT_NOT_FOUND` `` | No merchant found with the provided ID.        |\n| `` `404` ``         | `` `NOT_FOUND` ``        | No ARR data found for the merchant.           |\n| `` `500` ``         | `` `DATABASE_ERROR` ``   | Error retrieving merchant ARR.                 |\n| `` `500` ``         | `` `INTERNAL_ERROR` ``   | Internal server error.                         |\n\n**Get merchant account balance**\n\n\nRetrieves the current account balance for a merchant in a specific currency.\n\n**Endpoint:** `` `GET /merchants/{id}/balance` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier of the merchant. |\n\n**Query parameters:**\n\n| Parameter     | Type   | Required | Description                                         |\n| ------------- | ------ | -------- | --------------------------------------------------- |\n| `` `currency_code` `` | `` `string` `` | Yes      | Currency code for the balance (e.g., `` `XOF` ``, `` `USD` ``). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"currency_code\": \"XOF\",\n    \"balance\": 250000, // In smallest currency unit\n    \"as_of_date\": \"2023-04-01T12:30:45Z\"\n  }\n}\n```\n\n**Possible error responses:**\n\n| Status Code | Error Code        | Description                                    |\n| ----------- | ----------------- | ---------------------------------------------- |\n| `` `400` ``         | `` `MISSING_PARAMETER` `` | The `` `currency_code` `` query parameter is missing. |\n| `` `401` ``         | `` `UNAUTHORIZED` ``    | Authentication failed or API key is invalid.  |\n| `` `500` ``         | `` `DATABASE_ERROR` ``  | Error retrieving merchant balance.             |\n| `` `500` ``         | `` `INTERNAL_ERROR` ``  | Internal server error.                         |\n\n**Implementation notes**\n\n\n-   All monetary values (`` `mrr` ``, `` `arr` ``, `` `merchant_lifetime_value` ``, `` `balance` ``) are returned in the smallest currency unit (e.g., cents for USD, XOF represents the base unit directly).\n-   Dates and times are returned in ISO 8601 format (`` `YYYY-MM-DDTHH:mm:ssZ` ``).\n-   See the [Errors](./errors) guide for general error handling information. ",
    "parentName": "reference",
    "path": "reference/core/merchants"
  },
  "reference/core/overview": {
    "name": "overview",
    "content": "**API overview**\n\n\nWelcome to the lomi.'s REST API documentation. This API allows you to integrate lomi.'s payment capabilities directly into your applications.\n\nYou can use the API to manage resources like payment providers and configure webhooks to receive real-time event notifications.\n\n**Environments and Authentication**\n\n\nlomi. provides separate **Test** and **Live** environments, each with its own base URL and API keys. All API requests must be authenticated using your secret API key passed in the `` `X-API-Key` `` header.\n\nFor full details on environments, base URLs, obtaining API keys, and security best practices, see the [Authentication](./authentication) guide.\n\n**Requests and responses**\n\n\nAll API requests should be made over HTTPS to the appropriate base URL. Request bodies (for `` `POST` ``, `` `PATCH` `` methods) should be sent as JSON.\n\nResponses are returned in JSON format. Successful requests return `` `2xx` `` status codes. Failed requests return `` `4xx` `` or `` `5xx` `` status codes with a standardized error object in the response body.\n\nLearn more about the structure of success and error responses in the [Errors](./errors) guide.\n\n**API resources**\n\n\nThis core reference section covers the following API resources:\n\n-   **[Authentication](./authentication):** How to authenticate your API requests.\n-   **[Errors](./errors):** Understanding API error responses.\n-   **[Data Models](./data-models):** Structure of key API objects.\n-   **[Merchants](./merchants):** Managing merchant account details and metrics.\n-   **[Customers](./customers):** Creating and managing customer profiles.\n-   **[Products](./products):** Managing product definitions.\n-   **[Transactions](./transactions):** Retrieving payment transaction details.\n-   **[Subscription Plans](./subscriptions):** Managing reusable subscription plan definitions.\n-   **[Customer Subscriptions](./customer-subscriptions):** Managing individual customer subscriptions.\n-   **[Checkout Sessions](./checkout-sessions):** Creating sessions for online checkouts.\n-   **[Payment Links](./payment-links):** Creating shareable payment pages.\n-   **[Providers](./providers):** Retrieving connected payment provider information.\n-   **[Webhooks](./webhooks):** Managing webhook endpoints for event notifications.\n-   **[Refunds](./refunds):** Retrieving refund details (Beta).\n-   **[Changelog](./../changelog/changelog):** Notable API changes and updates.\n\n**Versioning**\n\n\nThe current API version is `` `v1` ``, included in the base URL path (`/v1/`). We strive to maintain backward compatibility for this version. Significant breaking changes would be introduced under a new version path. ",
    "parentName": "reference",
    "path": "reference/core/overview"
  },
  "reference/core/payment-links": {
    "name": "payment-links",
    "content": "**Payment Links**\n\n\nThe Payment Links API allows you to create and manage shareable, hosted payment pages for collecting one-time payments or initiating subscriptions.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. The associated Merchant ID is typically inferred from the key. See the [Authentication](./authentication) guide.\n\n**The payment link object**\n\n\nRepresents a configured payment link, including its type, target product/plan/amount, settings, and the shareable URL. See [Data Models](./data-models#payment-link-object) for the full structure (Note: This link assumes the object will be added to data-models.mdx).\n\n**Link types**\n\n\nThere are three types of payment links:\n\n-   `` `instant` ``: Collects a specific, one-time amount.\n-   `` `product` ``: Collects payment for a specific [Product](./products).\n-   `` `plan` ``: Initiates a [Subscription Plan](./subscriptions) for a customer.\n\n**Endpoints**\n\n\n**Create payment link**\n\n\nCreates a new payment link of the specified type.\n\n**Endpoint:** `` `POST /payment-links` ``\n\n**Request body parameters:**\n\n| Parameter             | Type           | Required                               | Description                                                                                              |\n| --------------------- | -------------- | -------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| `link_type`           | string         | Yes                                    | Type of link: `` `product` ``, `` `plan` ``, or `` `instant` ``.                                                           |\n| `title`               | string         | Yes                                    | Title displayed on the payment page.                                                                     |\n| `currency_code`       | string         | Yes                                    | 3-letter ISO currency code (e.g., `XOF`).                                                                |\n| `product_id`        | string (UUID)  | Yes, if `link_type` is `product`       | ID of the [Product](./products) to link.                                                          |\n| `plan_id`           | string (UUID)  | Yes, if `link_type` is `plan`          | ID of the [Plan](./subscriptions) to link.                                             |\n| `price`               | number         | Yes, if `link_type` is `instant`       | Amount to collect (smallest currency unit) for an `instant` link.                                        |\n| `public_description`  | string         | No                                     | Public description displayed on the payment page.                                                        |\n| `private_description` | string         | No                                     | Internal description for merchant reference (not shown to customer).                                     |\n| `allowed_providers`   | array (string) | No                                     | Array of payment provider codes (e.g., `[\"WAVE\", \"ORANGE\"]`). If omitted, uses merchant defaults.     |\n| `allow_coupon_code`   | boolean        | No                                     | Allow coupon codes to be applied (default: `false`).                                                     |\n| `is_active`           | boolean        | No                                     | Set to `false` to create an inactive link (default: `true`).                                            |\n| `expires_at`          | string (ISO8601) | No                                     | Optional timestamp for when the link automatically deactivates.                                           |\n| `success_url`         | string (URL)   | No                                     | Custom URL to redirect to after successful payment.                                                      |\n| `cancel_url`          | string (URL)   | No                                     | Custom URL to redirect to after cancelled payment.                                                       |\n| `metadata`            | object         | No                                     | Key-value pairs for storing additional information.                                                      |\n\n**Example request (Instant link):**\n\n```json\n{\n  \"link_type\": \"instant\",\n  \"title\": \"Donation\",\n  \"price\": 5000,\n  \"currency_code\": \"XOF\",\n  \"public_description\": \"Support our cause!\",\n  \"success_url\": \"\n}\n```\n\n**Example response (201 Created):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"link_id\": \"d7e8f0a1-b2c3-4d5e-8f9a-0b1c2d3e4f5a\",\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n    \"link_type\": \"instant\",\n    \"url\": \" // The shareable URL\n    \"product_id\": null,\n    \"product_name\": null,\n    \"product_price\": null,\n    \"plan_id\": null,\n    \"plan_name\": null,\n    \"plan_amount\": null,\n    \"title\": \"Donation\",\n    \"public_description\": \"Support our cause!\",\n    \"private_description\": null,\n    \"price\": 5000.00,\n    \"currency_code\": \"XOF\",\n    \"allowed_providers\": null, // Would show defaults if not specified\n    \"allow_coupon_code\": false,\n    \"is_active\": true,\n    \"expires_at\": null,\n    \"success_url\": \"\n    \"cancel_url\": null, // Would show default if not specified\n    \"metadata\": null,\n    \"created_at\": \"2023-10-27T10:00:00.000Z\",\n    \"updated_at\": \"2023-10-27T10:00:00.000Z\"\n  }\n}\n```\n\n**List payment links**\n\n\nRetrieves a list of payment links for your merchant account, with options for filtering and pagination.\n\n**Endpoint:** `` `GET /payment-links` ``\n\n**Query parameters:**\n\n| Parameter         | Type    | Required | Default | Description                                              |\n| ----------------- | ------- | -------- | ------- | -------------------------------------------------------- |\n| `link_type`       | string  | No       | (all)   | Filter by link type: `` `product` ``, `` `plan` ``, or `` `instant` ``.    |\n| `currency_code`   | string  | No       | (all)   | Filter by 3-letter ISO currency code.                   |\n| `is_active`       | boolean | No       | (all)   | Filter by active status (`true` or `false`).             |\n| `page`            | number  | No       | 1       | Page number for pagination.                              |\n| `page_size`       | number  | No       | 50      | Number of links per page (max: 100).                     |\n| `include_expired` | boolean | No       | false   | Set to `true` to include expired links in the results. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"link_id\": \"d7e8f0a1-b2c3-4d5e-8f9a-0b1c2d3e4f5a\",\n      \"link_type\": \"instant\",\n      \"url\": \"\n      \"title\": \"Donation\",\n      \"price\": 5000.00,\n      \"currency_code\": \"XOF\",\n      \"is_active\": true,\n      \"expires_at\": null,\n      // ... other fields\n    }\n    // ... more payment link objects\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"pageSize\": 50,\n    \"totalCount\": 120 // Example\n  }\n}\n```\n\n**Get payment link details**\n\n\nRetrieves the details of a specific payment link by its ID.\n\n**Endpoint:** `` `GET /payment-links/{link_id}` ``\n\n**Path parameters:**\n\n| Parameter | Type          | Required | Description                                             |\n| --------- | ------------- | -------- | ------------------------------------------------------- |\n| `link_id` | string (UUID) | Yes      | The unique identifier of the payment link (`link_id`). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"link_id\": \"d7e8f0a1-b2c3-4d5e-8f9a-0b1c2d3e4f5a\",\n    // ... all other fields as shown in the create example\n  }\n}\n```\n\n**Update payment link**\n\n\nUpdates certain configurable fields of a specific payment link. Core details like the type, title, price/product/plan association, and active status cannot be changed after creation.\n\n**Endpoint:** `` `PATCH /payment-links/{link_id}` ``\n\n**Path parameters:**\n\n| Parameter | Type          | Required | Description                                             |\n| --------- | ------------- | -------- | ------------------------------------------------------- |\n| `link_id` | string (UUID) | Yes      | The unique identifier of the payment link (`link_id`). |\n\n**Request body parameters:**\n\n*(Include only the fields you want to update)*\n\n| Parameter           | Type           | Description                                                                  |\n| ------------------- | -------------- | ---------------------------------------------------------------------------- |\n| `expires_at`        | string (ISO8601) | New expiration timestamp. Set to `null` to remove expiration.                |\n| `success_url`       | string (URL)   | Update the success redirect URL.                                             |\n| `cancel_url`        | string (URL)   | Update the cancellation redirect URL.                                        |\n| `allowed_providers` | array (string) | Replace the list of allowed payment provider codes.                            |\n| `allow_coupon_code` | boolean        | Enable or disable coupon code usage.                                         |\n| `metadata`          | object         | Replace the existing metadata object with the provided one.                  |\n\n**Example request:**\n\n```json\n{\n  \"allowed_providers\": [\"WAVE\"],\n  \"metadata\": { \"updated_via\": \"api\" }\n}\n```\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"link_id\": \"d7e8f0a1-b2c3-4d5e-8f9a-0b1c2d3e4f5a\",\n    // ... other fields showing updated values\n    \"allowed_providers\": [\"WAVE\"],\n    \"metadata\": { \"updated_via\": \"api\" },\n    \"updated_at\": \"2023-10-27T11:00:00.000Z\"\n  }\n}\n```\n\n**Delete payment link**\n\n\nDeletes a specific payment link.\n\n**Endpoint:** `` `DELETE /payment-links/{link_id}` ``\n\n**Path parameters:**\n\n| Parameter | Type          | Required | Description                                             |\n| --------- | ------------- | -------- | ------------------------------------------------------- |\n| `link_id` | string (UUID) | Yes      | The unique identifier of the payment link (`link_id`). |\n\n**Example response (204 No Content):**\n\n*(No response body)*\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for validation failures (invalid type, missing conditional fields, invalid URL), `` `401 Unauthorized` ``, `` `404 Not Found` `` if the link ID or associated product/plan doesn't exist, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/payment-links"
  },
  "reference/core/products": {
    "name": "products",
    "content": "**Products**\n\n\nThe Products API allows you to create, list, retrieve, update (active status only), and delete products associated with your merchant account.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. See the [Authentication](./authentication) guide.\n\n**The product object**\n\n\nRepresents a product or service offered by a merchant. See [Data Models](./data-models#product-object) for the full structure.\n\n**Endpoints**\n\n\n**Create product**\n\n\nCreates a new product for the authenticated merchant.\n\n**Endpoint:** `` `POST /products` ``\n\n**Request body parameters:**\n\n| Parameter               | Type           | Required | Description                                                  |\n| ----------------------- | -------------- | -------- | ------------------------------------------------------------ |\n| `` `name` ``                  | `` `string` ``         | Yes      | Name of the product.                                         |\n| `` `description` ``           | `` `string` ``         | No       | Optional description.                                        |\n| `` `price` ``                 | `` `number` ``         | Yes      | Price of the product (must be positive).                     |\n| `` `currency_code` ``         | `` `string` ``         | Yes      | Currency code (e.g., `` `\"XOF\"` ``, `` `\"USD\"` ``).                    |\n| `` `is_active` ``             | `` `boolean` ``        | No       | Whether the product is active (defaults to `` `true` ``).          |\n| `` `image_url` ``             | `` `string` ``         | No       | URL for the product image (must be a valid URL).             |\n| `` `display_on_storefront` `` | `` `boolean` ``        | No       | Whether to display on the storefront (defaults to `` `true` ``).   |\n| `` `fee_type_ids` ``        | `` `array (string)` `` | No       | Array of UUIDs for associated organization-level fee types. |\n\n**Example request:**\n\n```json\n{\n  \"name\": \"Standard Subscription\",\n  \"description\": \"Monthly access to standard features.\",\n  \"price\": 9900,\n  \"currency_code\": \"XOF\",\n  \"is_active\": true\n}\n```\n\n**Example response (201 Created):**\n\n```json\n{\n  \"data\": {\n    \"product_id\": \"uuid-generated-for-product\",\n    \"merchant_id\": \"uuid-of-authenticated-merchant\",\n    \"organization_id\": \"uuid-of-merchants-org\",\n    \"name\": \"Standard Subscription\",\n    \"description\": \"Monthly access to standard features.\",\n    \"price\": 9900,\n    \"currency_code\": \"XOF\",\n    \"image_url\": null,\n    \"is_active\": true,\n    \"display_on_storefront\": true,\n    \"created_at\": \"2023-10-27T10:00:00Z\",\n    \"updated_at\": \"2023-10-27T10:00:00Z\"\n    // fee_type_ids might also be included if provided in request\n  }\n}\n```\n\n**List products**\n\n\nRetrieves a list of products for the authenticated merchant, with pagination and filtering.\n\n**Endpoint:** `` `GET /products` ``\n\n**Query parameters:**\n\n| Parameter   | Type    | Required | Default | Description                                           |\n| ----------- | ------- | -------- | ------- | ----------------------------------------------------- |\n| `` `limit` ``     | `` `integer` `` | No       | 20      | Maximum number of products to return.                 |\n| `` `offset` ``    | `` `integer` `` | No       | 0       | Number of products to skip for pagination.            |\n| `` `is_active` `` | `` `boolean` `` | No       | (all)   | Filter products by active status (`` `true` `` or `` `false` ``). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": [\n    {\n      \"product_id\": \"uuid-product-1\",\n      // ... other product fields\n      \"is_active\": true,\n      // ...\n    },\n    {\n      \"product_id\": \"uuid-product-2\",\n      // ... other product fields\n      \"is_active\": false,\n      // ...\n    }\n    // ... more products\n  ],\n  \"meta\": {\n    \"total_count\": 55,\n    \"limit\": 20,\n    \"offset\": 0\n  }\n}\n```\n\n**Get product details**\n\n\nRetrieves details for a specific product belonging to the authenticated merchant.\n\n**Endpoint:** `` `GET /products/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                                      |\n| --------- | ------ | -------- | ------------------------------------------------ |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier (UUID) of the product (`` `product_id` ``). |\n\n**Example response (200 OK):**\n\n*(Response structure is the same as the `Create product` response)*\n\n**Update product**\n\n\nUpdates the `` `is_active` `` status of a specific product. Other product details (name, price, etc.) cannot be changed after creation.\n\n**Endpoint:** `` `PATCH /products/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                                      |\n| --------- | ------ | -------- | ------------------------------------------------ |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier (UUID) of the product (`` `product_id` ``). |\n\n**Request body parameters:**\n\n| Parameter   | Type    | Required | Description                           |\n| ----------- | ------- | -------- | ------------------------------------- |\n| `` `is_active` `` | `` `boolean` `` | Yes      | Set `` `true` `` to activate, `` `false` `` to deactivate. |\n\n**Example request:**\n\n```json\n{\n  \"is_active\": false\n}\n```\n\n**Example response (200 OK):**\n\n*(Response structure is the same as the `Create product` response, showing the updated `` `is_active` `` value and `` `updated_at` `` timestamp)*\n\n**Delete product**\n\n\nDeletes a specific product.\n\n**Endpoint:** `` `DELETE /products/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                                      |\n| --------- | ------ | -------- | ------------------------------------------------ |\n| `` `id` ``      | `` `string` `` | Yes      | The unique identifier (UUID) of the product (`` `product_id` ``). |\n\n**Example response (204 No Content):**\n\n*(No response body)*\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for invalid input (e.g., negative price, invalid URL) or attempting to update immutable fields, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the product ID doesn't exist or belong to the merchant, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide. ",
    "parentName": "reference",
    "path": "reference/core/products"
  },
  "reference/core/providers": {
    "name": "providers",
    "content": "**Providers API**\n\n\nThe Providers API allows merchants to retrieve information about available payment providers connected to their account. This information can be used to determine which payment methods to offer to customers.\n\n**Base URL**\n\n\n```\n\n```\n\n**Authentication**\n\n\nAll API requests require authentication using an API key. Provide your API key in the `` `X-API-Key` `` request header. See [Authentication](./authentication) for more details.\n\n```http\nX-API-Key: your_api_key\n```\n\n**Endpoints**\n\n\n**List payment providers**\n\n\nRetrieves a list of all available payment providers and indicates whether they are connected (active) for the authenticated merchant.\n\n**Endpoint:** `` `GET /providers` ``\n\n**Query parameters:** None\n\n**Example response:**\n\n```json\n{\n  \"data\": [\n    {\n      \"code\": \"ORANGE\",\n      \"name\": \"Orange Money\",\n      \"description\": \"Pay with Orange Money mobile wallet\",\n      \"payment_methods\": [\"mobile_money\"],\n      \"is_connected\": true\n    },\n    {\n      \"code\": \"WAVE\",\n      \"name\": \"Wave\",\n      \"description\": \"Pay with Wave mobile wallet\",\n      \"payment_methods\": [\"mobile_money\"],\n      \"is_connected\": false\n    },\n    {\n      \"code\": \"NOWPAYMENTS\",\n      \"name\": \"NOWPayments\",\n      \"description\": \"Pay with cryptocurrency\",\n      \"payment_methods\": [\"crypto\"],\n      \"is_connected\": false\n    }\n    // Additional providers...\n  ]\n}\n```\n\n**Response properties:**\n\n| Property          | Type    | Description                                                     |\n| ----------------- | ------- | --------------------------------------------------------------- |\n| `` `code` ``            | `` `string` ``  | Unique identifier for the payment provider                      |\n| `` `name` ``            | `` `string` ``  | Display name of the payment provider                            |\n| `` `description` ``     | `` `string` ``  | Brief description of the payment provider                       |\n| `` `payment_methods` `` | `` `array` ``   | List of payment method types supported by this provider         |\n| `` `is_connected` ``    | `` `boolean` `` | Whether this provider is connected to your merchant account |\n\n**Possible error responses:**\n\n| Status Code | Error Message                     | Description                                  |\n| ----------- | --------------------------------- | -------------------------------------------- |\n| `` `401` ``         | `` `Authentication required` ``         | Missing or invalid API key                   |\n| `` `500` ``         | `` `Failed to retrieve providers` ``    | Internal server error retrieving providers |\n\n**Error handling**\n\n\nError responses follow a consistent format. See the [Errors](./errors) guide for more details.\n\n```json\n{\n  \"error\": {\n    \"message\": \"Error message description\",\n    \"details\": \"Additional details or structured error data\"\n  }\n}\n```\n\n**Rate limits**\n\n\nAPI requests are subject to rate limits based on your API key type:\n\n-   **Live API keys:** 60 requests per minute, 10,000 requests per day\n-   **Test API keys:** 120 requests per minute, 20,000 requests per day\n\nExceeding these limits will result in a `` `429 Too Many Requests` `` error.\n\n**Implementation notes**\n\n\n-   Use the `` `is_connected` `` property to determine which providers to display as payment options to your customers. Only connected providers can be used to process payments.\n-   The list of available providers (`` `code` ``) may change over time as new integrations are added.\n-   Provider availability might depend on merchant configuration and supported regions.\n-   Use the provider `` `code` `` (e.g., `` `\"ORANGE\"` ``, `` `\"WAVE\"` ``) when specifying allowed providers in other API calls like creating Checkout Sessions.\n\n**Testing**\n\n\nYou can test this endpoint using `` `curl` `` or any HTTP client. Remember to replace placeholder values like the base URL and API key.\n\n**Retrieve all available payment providers**\n\n\n```bash\ncurl -X GET \" \\\n  -H \"X-API-Key: your_api_key\"\n```\n\n**Test with an invalid API key**\n\n\n```bash\ncurl -X GET \" \\\n  -H \"X-API-Key: invalid_api_key\"\n```\n\nExpected error response:\n\n```json\n{\n  \"error\": {\n    \"message\": \"Invalid API key\",\n    \"details\": \"The provided API key is invalid or does not exist\"\n  }\n}\n```\n\n**Test with a missing API key header**\n\n\n```bash\ncurl -X GET \"\n```\n\nExpected error response:\n\n```json\n{\n  \"error\": {\n    \"message\": \"Missing API key\",\n    \"details\": \"API key is required for authentication\"\n  }\n}\n``` ",
    "parentName": "reference",
    "path": "reference/core/providers"
  },
  "reference/core/refunds": {
    "name": "refunds",
    "content": "**Refunds (Beta)**\n\n\n**(Note: This API is currently in Beta)**\n\nThe Refunds API allows you to retrieve details about refunds processed for transactions associated with your merchant account.\n\n*(Currently, creating refunds via the API is not supported; refunds are typically initiated through the merchant dashboard or other internal mechanisms.)*\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. See the [Authentication](./authentication) guide.\n\n**The refund object**\n\n\nRepresents a refund issued for a specific transaction. See [Data Models](./data-models#refund-object) for the full structure (Note: This link assumes the object will be added to data-models.mdx).\n\n**Endpoints**\n\n\n**Get refund details**\n\n\nRetrieves the details of a specific refund by its unique ID.\n\n**Endpoint:** `` `GET /refunds/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type          | Required | Description                                     |\n| --------- | ------------- | -------- | ----------------------------------------------- |\n| `id`      | string (UUID) | Yes      | The unique identifier of the refund (`` `refund_id` ``). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"refund_id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"transaction_id\": \"f0e9d8c7-b6a5-4321-fedc-ba9876543210\", // Original transaction\n    \"amount\": 5000.00, // Original transaction amount\n    \"refunded_amount\": 5000.00, // Amount actually refunded\n    \"fee_amount\": 150.00, // Original transaction fee\n    \"reason\": \"Customer requested refund due to duplicate charge\",\n    \"status\": \"completed\", // Can be: `` `pending` ``, `` `completed` ``, `` `failed` ``\n    \"metadata\": {\n      \"processed_by\": \"support@your-company.com\",\n      \"ticket_ref\": \"ZT-1234\"\n    },\n    \"created_at\": \"2025-04-05T10:30:00.123Z\",\n    \"updated_at\": \"2025-04-05T10:35:15.456Z\"\n  },\n  \"environment\": \"test\"\n}\n```\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for an invalid refund ID format, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the refund ID doesn't exist or belong to the merchant, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/refunds"
  },
  "reference/core/subscriptions": {
    "name": "subscriptions",
    "content": "**Subscription Plans**\n\n\nThe Subscription Plans API allows you to create and manage reusable billing plans for your merchant account. These plans define the pricing, currency, and billing frequency for recurring payments.\n\nCustomer subscriptions are created based on these plans. See the [Customer Subscriptions](./customer-subscriptions) API for managing individual customer subscriptions.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. The associated Merchant ID is inferred from the key. See the [Authentication](./authentication) guide.\n\n**The subscription plan object**\n\n\nRepresents a reusable subscription plan definition. See [Data Models](./data-models#subscription-plan-object) for the full structure.\n\n**Endpoints**\n\n\n**Create subscription plan**\n\n\nCreates a new subscription plan for your merchant account.\n\n**Endpoint:** `` `POST /merchants/{merchant_id}/subscriptions` ``\n\n**(Note:** The `` `{merchant_id}` `` in the path is typically handled by API gateway/middleware based on your `` `X-API-Key` ``; you usually don't need to include it explicitly if using the standard base URL.)*\n\n**Request body parameters:**\n\n| Parameter               | Type    | Required | Description                                                                                                |\n| ----------------------- | ------- | -------- | ---------------------------------------------------------------------------------------------------------- |\n| `` `name` ``                  | `` `string` ``  | Yes      | The name of the plan (e.g., \"Gold Tier Monthly\").                                                            |\n| `` `amount` ``                | `` `number` ``  | Yes      | Amount to be charged per billing cycle, in the smallest currency unit (e.g., cents for USD). Must be positive. |\n| `` `currency_code` ``         | `` `string` ``  | Yes      | Three-letter ISO currency code (e.g., `` `\"XOF\"` ``, `` `\"USD\"` ``).                                                    |\n| `` `billing_frequency` ``     | `` `string` ``  | Yes      | How often the subscription renews. Valid values: `` `monthly` ``, `` `yearly` ``, `` `weekly` ``, `` `bi-weekly` ``, `` `quarterly` ``, `` `semi-annual` ``, `` `one-time` ``. |\n| `` `description` ``           | `` `string` ``  | No       | Optional description of the plan.                                                                          |\n| `` `failed_payment_action` `` | `` `string` ``  | No       | Action to take on failed recurring payments (e.g., `` `cancel` ``, `` `pause` ``). Defaults vary.                     |\n| `` `charge_day` ``            | `` `integer` `` | No       | Specific day for charging (e.g., day of month for `` `monthly` ``). Depends on `` `billing_frequency` ``.            |\n| `` `metadata` ``              | `` `object` ``  | No       | Key-value pairs for storing additional information.                                                      |\n| `` `is_active` ``             | `` `boolean` `` | No       | Whether the plan can be used to create new subscriptions (defaults to `` `true` ``).                               |\n| `` `first_payment_type` ``    | `` `string` ``  | No       | Type of the first payment (e.g., `` `initial` ``, `` `prorated` ``). Defaults vary.                                  |\n\n**Example request:**\n\n```json\n{\n  \"name\": \"Pro Monthly Plan\",\n  \"amount\": 15000,\n  \"currency_code\": \"XOF\",\n  \"billing_frequency\": \"monthly\",\n  \"description\": \"Access to all pro features, billed monthly.\",\n  \"metadata\": {\n    \"internal_code\": \"PRO_M\"\n  }\n}\n```\n\n**Example response (201 Created):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"plan_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n    \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n    \"organization_id\": \"org_abc123...\",\n    \"name\": \"Pro Monthly Plan\",\n    \"description\": \"Access to all pro features, billed monthly.\",\n    \"amount\": 15000,\n    \"currency_code\": \"XOF\",\n    \"billing_frequency\": \"monthly\",\n    \"failed_payment_action\": null,\n    \"charge_day\": null,\n    \"metadata\": {\n      \"internal_code\": \"PRO_M\"\n    },\n    \"is_active\": true,\n    \"first_payment_type\": \"initial\",\n    \"created_at\": \"2023-10-27T10:00:00Z\",\n    \"updated_at\": \"2023-10-27T10:00:00Z\"\n  }\n}\n```\n\n**List subscription plans**\n\n\nRetrieves a list of subscription plans belonging to your merchant account.\n\n**Endpoint:** `` `GET /merchants/{merchant_id}/subscriptions` ``\n\n**(Note:** The `` `{merchant_id}` `` path parameter is typically handled based on your API key.)*\n\n**Query parameters:**\n\n| Parameter | Type    | Required | Default | Description                               |\n| --------- | ------- | -------- | ------- | ----------------------------------------- |\n| `` `limit` ``   | `` `integer` `` | No       | 20      | Maximum number of plans to return.        |\n| `` `offset` ``  | `` `integer` `` | No       | 0       | Number of plans to skip for pagination.   |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"plan_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n      \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n      // ... other plan fields\n    },\n    // ... more plans\n  ]\n}\n```\n\n**Get subscription plan details**\n\n\nRetrieves details for a specific subscription plan.\n\n**Endpoint:** `` `GET /merchants/{merchant_id}/subscriptions/{plan_id}` ``\n\n**(Note:** The `` `{merchant_id}` `` path parameter is typically handled based on your API key.)*\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `plan_id` `` | `` `string` `` | Yes      | The unique identifier of the plan (`` `plan_id` ``). |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"plan_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n    // ... all other plan fields\n  }\n}\n```\n\n**Update subscription plan**\n\n\nUpdates the `` `is_active` `` status and/or `` `metadata` `` of a specific subscription plan. Core details like amount, currency, and frequency cannot be changed via the API after creation.\n\n**Endpoint:** `` `PATCH /merchants/{merchant_id}/subscriptions/{plan_id}` ``\n\n**(Note:** The `` `{merchant_id}` `` path parameter is typically handled based on your API key.)*\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `plan_id` `` | `` `string` `` | Yes      | The unique identifier of the plan (`` `plan_id` ``). |\n\n**Request body parameters:**\n\n*(Include at least one of the following optional fields)*\n\n| Parameter   | Type    | Description                                                               |\n| ----------- | ------- | ------------------------------------------------------------------------- |\n| `` `is_active` `` | `` `boolean` `` | Set `` `true` `` to make the plan active, `` `false` `` to deactivate it.              |\n| `` `metadata` ``  | `` `object` ``  | Updates/adds key-value pairs to the plan's metadata. Existing keys are merged. |\n\n**Example request (deactivate):**\n\n```json\n{\n  \"is_active\": false\n}\n```\n\n**Example response (200 OK):**\n\n*(Response structure is the same as the `Get subscription plan details` response, showing updated values and `` `updated_at` `` timestamp)*\n\n**Delete subscription plan**\n\n\nDeletes a subscription plan. This will fail if the plan is currently associated with any active customer subscriptions.\n\n**Endpoint:** `` `DELETE /merchants/{merchant_id}/subscriptions/{plan_id}` ``\n\n**(Note:** The `` `{merchant_id}` `` path parameter is typically handled based on your API key.)*\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| --------- | ------ | -------- | ----------------------------------- |\n| `` `plan_id` `` | `` `string` `` | Yes      | The unique identifier of the plan (`` `plan_id` ``). |\n\n**Example response (204 No Content):**\n\n*(No response body)*\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for validation failures, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the plan ID doesn't exist for the merchant, `` `409 Conflict` `` if attempting to delete a plan in use, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide. ",
    "parentName": "reference",
    "path": "reference/core/subscriptions"
  },
  "reference/core/transactions": {
    "name": "transactions",
    "content": "**Transactions**\n\n\nThe Transactions API allows you to retrieve information about payment transactions associated with your merchant account.\n\n**Authentication**\n\n\nRequests require authentication using your API key in the `` `X-API-Key` `` header. See the [Authentication](./authentication) guide.\n\n**The transaction object**\n\n\nRepresents a single payment transaction, including details about the amount, status, provider, customer, and related resources. See [Data Models](./data-models#transaction-object) for the full structure.\n\n**Endpoints**\n\n\n**List transactions**\n\n\nRetrieves a list of transactions for the authenticated merchant, with options for filtering and pagination.\n\n**Endpoint:** `` `GET /transactions` ``\n\n**Query parameters:**\n\n| Parameter     | Type            | Required | Description                                                                          |\n| ------------- | --------------- | -------- | ------------------------------------------------------------------------------------ |\n| `` `status` ``      | `` `string` `` / `` `array` ``  | No       | Filter by transaction status(es). Provide a single status or comma-separated list (e.g., `` `completed` ``, `` `failed,refunded` ``). Valid statuses: `` `pending` ``, `` `completed` ``, `` `failed` ``, `` `refunded` ``, `` `expired` ``. |\n| `` `provider` ``    | `` `string` ``          | No       | Filter by payment provider code (e.g., `` `ORANGE` ``, `` `WAVE` ``).                               |\n| `` `from_date` ``   | `` `string (ISO8601)` ``| No       | Filter transactions created on or after this date/time (inclusive). Format: `` `YYYY-MM-DDTHH:mm:ssZ` ``. |\n| `` `to_date` ``     | `` `string (ISO8601)` ``| No       | Filter transactions created on or before this date/time (inclusive). Format: `` `YYYY-MM-DDTHH:mm:ssZ` ``. |\n| `` `limit` ``       | `` `number` ``          | No       | Maximum number of transactions to return (default: 20, max: 100).                     |\n| `` `page` ``        | `` `number` ``          | No       | Page number for pagination (default: 1).                                              |\n\n**Example request (filtering for completed Wave transactions):**\n\n```\nGET /transactions?status=completed&provider=WAVE&limit=10\nHost: api.lomi.africa\nX-API-Key: your_api_key\n```\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"transaction_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n      \"merchant_id\": \"904d003c-3736-41d4-90a5-9de74d404fd7\",\n      \"organization_id\": \"0979ec77-9fb1-4c9a-8c55-d7fb6c182c9c\",\n      \"customer_id\": \"c47ac10b-58cc-4372-a567-0e02b2c3d480\",\n      \"gross_amount\": 5000,\n      \"fee_amount\": 125,\n      \"net_amount\": 4875,\n      \"fee_reference\": \"STANDARD_FEE\",\n      \"currency_code\": \"XOF\",\n      \"payment_method_code\": \"MOBILE_MONEY\",\n      \"provider_code\": \"WAVE\",\n      \"provider_transaction_id\": \"prov_trx_12345\",\n      \"transaction_type\": \"payment\",\n      \"product_id\": null,\n      \"subscription_id\": null,\n      \"status\": \"completed\",\n      \"description\": \"Payment for Order #5678\",\n      \"created_at\": \"2025-04-05T10:30:00.000Z\",\n      \"updated_at\": \"2025-04-05T10:30:05.000Z\",\n      \"metadata\": { \"source\": \"api\" }\n    }\n    // ... more transaction objects\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10\n    // \"total\": 5 // Total count may not always be present\n  },\n  \"environment\": \"test\"\n}\n```\n\n**Get transaction by ID**\n\n\nRetrieves the details of a specific transaction by its unique ID.\n\n**Endpoint:** `` `GET /transactions/{transaction_id}` ``\n\n**Path parameters:**\n\n| Parameter        | Type         | Required | Description                                        |\n| ---------------- | ------------ | -------- | -------------------------------------------------- |\n| `` `transaction_id` `` | `` `string (UUID)` ``| Yes      | The unique identifier of the transaction to retrieve. |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"transaction_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n    // ... all other transaction fields as shown in the list example\n    \"metadata\": { \"source\": \"api\" }\n  },\n  \"environment\": \"test\"\n}\n```\n\n**Error handling**\n\n\nCommon errors include `` `400 Bad Request` `` for invalid filter parameters or ID format, `` `401 Unauthorized` ``, `` `404 Not Found` `` if the transaction ID doesn't exist, and `` `500 Internal Server Error` ``. Refer to the [Errors](./errors) guide for general structure and handling. ",
    "parentName": "reference",
    "path": "reference/core/transactions"
  },
  "reference/core/webhooks": {
    "name": "webhooks",
    "content": "**Webhooks**\n\n\nWebhooks allow your application to receive real-time notifications about events that occur in your lomi. account, such as successful payments, subscription renewals, or failed transactions. Instead of polling the API, you can configure a webhook endpoint where lomi will send event data via HTTP `` `POST` `` requests.\n\n**Base URL**\n\n\n```\n\n```\n\n**Authentication**\n\n\nAPI requests to manage webhooks require authentication using an API key in the `` `X-API-Key` `` header. See [Authentication](./authentication).\n\n```http\nX-API-Key: your_api_key\n```\n\n**Webhook security**\n\n\nTo ensure the security and integrity of webhook events, lomi. signs each request sent to your endpoint using a unique secret associated with that webhook.\n\n1.  **Signature Header:** Each webhook request includes an `` `X-Lomi-Signature` `` HTTP header.\n2.  **Webhook Secret:** When you create a webhook endpoint via the API, a `` `secret` `` (prefixed with `` `whsec_` ``) is returned. **Store this secret securely, as it will not be shown again.**\n3.  **Verification:** Your endpoint should verify the signature by computing an `` `HMAC-SHA256` `` hash of the raw request body using the webhook secret and comparing it to the signature provided in the header.\n\nRefer to the [Webhook Signature Verification](../../../developers-reference/webhook-signature-verification) guide for detailed implementation examples in various languages.\n\n**Webhook events**\n\n\nWhen creating or updating a webhook, you subscribe it to specific event types. lomi. will only send notifications for the events you've subscribed to.\n\n| Event Enum                    | Description                                  | Data Payload Type |\n| ----------------------------- | -------------------------------------------- | ----------------- |\n| `` `PAYMENT_SUCCEEDED` ``           | A one-time payment is successful.            | `` `Transaction` ``       |\n| `` `PAYMENT_FAILED` ``              | A one-time payment attempt failed.           | `` `Transaction` ``       |\n| `` `CHECKOUT_COMPLETED` ``          | A checkout session was completed.            | `` `CheckoutSession` ``   |\n| `` `SUBSCRIPTION_CREATED` ``        | A new subscription is created.               | `` `Subscription` ``      |\n| `` `SUBSCRIPTION_RENEWED` ``        | A subscription successfully renews.          | `` `Subscription` ``      |\n| `` `SUBSCRIPTION_PAYMENT_FAILED` `` | A scheduled subscription payment failed.     | `` `Subscription` ``      |\n| `` `SUBSCRIPTION_CANCELED` ``       | A subscription is canceled.                  | `` `Subscription` ``      |\n| `` `REFUND_COMPLETED` ``            | A refund is successfully processed.          | `` `Refund` ``            |\n| `` `PROVIDER_STATUS_CHANGED` ``     | The status of a connected provider changes.  | `` `ProviderSetting` ``   |\n| `` `test.webhook` ``                | A test event generated via the API.          | `` `TestPayload` ``       |\n\n*(Note: The specific structure of the data payload for each event type will be documented under the respective API resource, e.g., Transactions, Subscriptions.)*\n\n**API endpoints**\n\n\n**List webhooks**\n\n\nRetrieves a list of all webhook endpoints configured for your organization.\n\n**Endpoint:** `` `GET /webhooks` ``\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"wh_a1b2c3d4e5f6\",\n      \"organization_id\": \"org_f6e5d4c3b2a1\",\n      \"url\": \"\n      \"events\": [\"PAYMENT_SUCCEEDED\", \"SUBSCRIPTION_RENEWED\"],\n      \"active\": true,\n      \"created_at\": \"2025-04-06T12:00:00.000Z\",\n      \"updated_at\": \"2025-04-06T12:00:00.000Z\",\n      \"description\": \"Primary production webhook\"\n    }\n    // ... (secret is NOT included)\n  ]\n}\n```\n\n**Create webhook**\n\n\nCreates a new webhook endpoint.\n\n**Endpoint:** `` `POST /webhooks` ``\n\n**Request body:**\n\n```json\n{\n  \"url\": \"\n  \"authorized_events\": [\"PAYMENT_SUCCEEDED\", \"PAYMENT_FAILED\"],\n  \"description\": \"Webhook for payment events\"\n}\n```\n\n*   `` `url` `` (`` `string` ``, required): The HTTPS URL for your webhook endpoint.\n*   `` `authorized_events` `` (`` `array of strings` ``, required): List of event types to subscribe to (see [Webhook Events](#webhook-events)).\n*   `` `description` `` (`` `string` ``, optional): A descriptive label.\n\n**Example response (201 Created):**\n\n```json\n{\n  \"data\": {\n      \"id\": \"wh_new1b2c3d4e5f6\",\n      \"organization_id\": \"org_f6e5d4c3b2a1\",\n      \"url\": \"\n      \"events\": [\"PAYMENT_SUCCEEDED\", \"PAYMENT_FAILED\"],\n      \"active\": true,\n      \"created_at\": \"2025-04-06T14:00:00.000Z\",\n      \"updated_at\": \"2025-04-06T14:00:00.000Z\",\n      \"description\": \"Webhook for payment events\"\n  },\n  \"secret\": \"whsec_abc123def456...\" // Store this secret securely!\n}\n```\n\n**Get webhook**\n\n\nRetrieves details for a specific webhook.\n\n**Endpoint:** `` `GET /webhooks/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                   |\n| --------- | ------ | -------- | ----------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | ID of the webhook (`` `wh_...` ``) |\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n      \"id\": \"wh_a1b2c3d4e5f6\",\n      // ... other fields (secret is NOT included)\n      \"description\": \"Updated description\"\n  }\n}\n```\n\n**Update webhook**\n\n\nUpdates an existing webhook endpoint.\n\n**Endpoint:** `` `PATCH /webhooks/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                   |\n| --------- | ------ | -------- | ----------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | ID of the webhook (`` `wh_...` ``) |\n\n**Request body (include only fields to update):**\n\n```json\n{\n  \"url\": \"\n  \"authorized_events\": [\"PAYMENT_SUCCEEDED\"],\n  \"is_active\": false,\n  \"description\": \"Updated description\"\n}\n```\n\n*   `` `url` `` (`` `string` ``, optional): The new HTTPS URL.\n*   `` `authorized_events` `` (`` `array of strings` ``, optional): The new list of event types.\n*   `` `is_active` `` (`` `boolean` ``, optional): Set `` `false` `` to disable, `` `true` `` to enable.\n*   `` `description` `` (`` `string` ``, optional): A new description.\n\n**Example response (200 OK):**\n\n```json\n{\n  \"data\": {\n      \"id\": \"wh_a1b2c3d4e5f6\",\n      \"url\": \"\n      \"events\": [\"PAYMENT_SUCCEEDED\"],\n      \"active\": false,\n      // ... other fields\n  }\n}\n```\n\n**Delete webhook**\n\n\nDeletes a webhook endpoint.\n\n**Endpoint:** `` `DELETE /webhooks/{id}` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                   |\n| --------- | ------ | -------- | ----------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | ID of the webhook (`` `wh_...` ``) |\n\n**Example response (204 No Content):** No response body.\n\n**Testing webhooks**\n\n\nYou can test your webhook endpoints using the API or `` `curl` ``.\n\n**Create a webhook for testing**\n\n\nFirst, create a webhook endpoint pointing to a test receiver (e.g., using a service like [Webhook.site]( or a local tunnel like ngrok).\n\n```bash\nReplace API_KEY and URL\n\ncurl -X POST \" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-API-Key: YOUR_API_KEY\" \\\n  -d '{\n    \"url\": \"YOUR_TEST_WEBHOOK_URL\",\n    \"authorized_events\": [\"PAYMENT_SUCCEEDED\", \"test.webhook\"],\n    \"description\": \"Test Endpoint\"\n  }'\n```\n\nNote the `` `id` `` and `` `secret` `` from the response.\n\n**Send a test event**\n\n\nUse the `` `POST /webhooks/{id}/test` `` endpoint to send a predefined `` `test.webhook` `` event to your endpoint.\n\n```bash\nReplace WEBHOOK_ID and API_KEY\n\ncurl -X POST \" \\\n  -H \"X-API-Key: YOUR_API_KEY\"\n```\n\nCheck your test receiver to confirm the event was received and verify the signature using the stored secret.\n\n**Delivery logs and retries**\n\n\nlomi. logs webhook delivery attempts and provides endpoints to view these logs and manually retry failed deliveries.\n\n**Get webhook delivery logs**\n\n\nRetrieves delivery logs for a specific webhook, showing success/failure status, timestamps, response codes, etc.\n\n**Endpoint:** `` `GET /webhooks/{id}/logs` ``\n\n**Path parameters:**\n\n| Parameter | Type   | Required | Description                   |\n| --------- | ------ | -------- | ----------------------------- |\n| `` `id` ``      | `` `string` `` | Yes      | ID of the webhook (`` `wh_...` ``) |\n\n**Query parameters (optional):**\n\n| Parameter | Type    | Description                        |\n| --------- | ------- | ---------------------------------- |\n| `` `limit` ``   | `` `integer` `` | Number of logs to return (max 100) |\n| `` `offset` ``  | `` `integer` `` | Number of logs to skip (pagination)|\n| `` `success` `` | `` `boolean` `` | Filter by successful deliveries    |\n| `` `failed` ``  | `` `boolean` `` | Filter by failed deliveries        |\n\n**Example request:**\n\n```bash\nReplace WEBHOOK_ID and API_KEY\n\ncurl -X GET \" \\\n  -H \"X-API-Key: YOUR_API_KEY\"\n```\n\n**Retry webhook delivery**\n\n\nManually triggers a retry for a specific failed delivery log entry.\n\n**Endpoint:** `` `POST /webhooks/{webhook_id}/logs/{log_id}/retry` ``\n\n**Path parameters:**\n\n| Parameter    | Type   | Required | Description                         |\n| ------------ | ------ | -------- | ----------------------------------- |\n| `` `webhook_id` `` | `` `string` `` | Yes      | ID of the webhook (`` `wh_...` ``)       |\n| `` `log_id` ``     | `` `string` `` | Yes      | ID of the failed delivery log entry |\n\n**Example request:**\n\n```bash\nReplace WEBHOOK_ID, LOG_ID and API_KEY\n\ncurl -X POST \" \\\n  -H \"X-API-Key: YOUR_API_KEY\"\n```\n\n**Automatic retries:** lomi. automatically retries failed deliveries using an exponential backoff strategy over approximately 6 hours before marking the delivery as permanently failed.\n\n**Best practices**\n\n\n-   **Verify signatures:** Always verify the `` `X-Lomi-Signature` `` to ensure the request is from lomi.\n-   **Respond quickly:** Your endpoint should return a `` `2xx` `` status code within a few seconds. Offload longer processing to background jobs.\n-   **Handle retries:** Be prepared for lomi. to retry sending events if your endpoint fails or times out.\n-   **Idempotency:** Design your event processing logic to handle duplicate events gracefully.\n-   **Secure your secret:** Store your webhook secret securely using environment variables or a secrets manager. ",
    "parentName": "reference",
    "path": "reference/core/webhooks"
  }
}
