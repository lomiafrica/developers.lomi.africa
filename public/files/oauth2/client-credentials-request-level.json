{
  "name": "oauth2_client_credentials_request_level",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "resource",
      "seq": 2,
      "request": {
        "url": "{{host}}/api/auth/oauth2/client_credentials/resource?token={{access_token_set_by_request_script}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "token",
            "value": "{{access_token_set_by_request_script}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "token",
      "seq": 3,
      "request": {
        "url": "",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "res": "// The script below sets the OAuth2 access token to a runtime variable.\n\n// When the 'Get Access Token' action is performed,\n// the request has 'auth_mode' set to 'oauth2'.\n\n// The 'if' condition below ensures that the 'set token' logic is not executed \n// during the normal request execution flow.\n\nif(req.getAuthMode() == 'oauth2' && res.body.access_token) {\n bru.setVar('access_token_set_by_request_script', res.body.access_token);\n}"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "auth": {
          "mode": "oauth2",
          "oauth2": {
            "grantType": "client_credentials",
            "accessTokenUrl": "{{client_credentials_access_token_url}}",
            "clientId": "{{client_credentials_client_id}}",
            "clientSecret": "{{client_credentials_client_secret}}",
            "scope": "{{client_credentials_scope}}"
          }
        }
      }
    }
  ],
  "activeEnvironmentUid": "kwunlz6m0I5iapnqhuUVP",
  "environments": [
    {
      "variables": [
        {
          "name": "host",
          "value": "http://localhost:8080",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "bearer_auth_token",
          "value": "your_secret_token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "basic_auth_password",
          "value": "della",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_id",
          "value": "client_id_1",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_secret",
          "value": "client_secret_1",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "password_credentials_access_token_url",
          "value": "http://localhost:8080/api/auth/oauth2/password_credentials/token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "password_credentials_username",
          "value": "foo",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "password_credentials_password",
          "value": "bar",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "password_credentials_scope",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_authorize_url",
          "value": "http://localhost:8080/api/auth/oauth2/authorization_code/authorize",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_callback_url",
          "value": "http://localhost:8080/api/auth/oauth2/authorization_code/callback",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_access_token_url",
          "value": "http://localhost:8080/api/auth/oauth2/authorization_code/token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_google_auth_url",
          "value": "https://accounts.google.com/o/oauth2/auth",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_google_access_token_url",
          "value": "https://accounts.google.com/o/oauth2/token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_google_scope",
          "value": "https://www.googleapis.com/auth/userinfo.email",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_github_authorize_url",
          "value": "https://github.com/login/oauth/authorize",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_github_access_token_url",
          "value": "https://github.com/login/oauth/access_token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_access_token",
          "value": "null",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_credentials_access_token_url",
          "value": "http://localhost:8080/api/auth/oauth2/client_credentials/token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_credentials_client_id",
          "value": "client_id_1",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_credentials_client_secret",
          "value": "client_secret_1",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_credentials_scope",
          "value": "admin",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client_credentials_access_token",
          "value": "e785b48eaa246df4ebcb86238d6d34c9",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "common_access_token",
          "value": "9f1b1874f1e79b48a46d65569d830bbb",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "authorization_code_google_client_id",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "authorization_code_google_client_secret",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "authorization_code_github_client_secret",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "authorization_code_github_client_id",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "authorization_code_github_authorization_code",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "authorization_code_github_access_token",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        }
      ],
      "name": "Local"
    },
    {
      "variables": [
        {
          "name": "host",
          "value": "https://testbench-sanity.usebruno.com",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "bearer_auth_token",
          "value": "your_secret_token",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "basic_auth_password",
          "value": "della",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "env.var1",
          "value": "envVar1",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "env-var2",
          "value": "envVar2",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "bark",
          "value": "{{process.env.PROC_ENV_VAR}}",
          "enabled": true,
          "secret": false,
          "type": "text"
        }
      ],
      "name": "Prod"
    }
  ],
  "root": {
    "request": {
      "auth": {
        "mode": "oauth2",
        "oauth2": {
          "grantType": "client_credentials",
          "accessTokenUrl": "{{client_credentials_access_token_url}}",
          "clientId": "{{client_credentials_client_id}}",
          "clientSecret": "{{client_credentials_client_secret}}",
          "scope": "{{client_credentials_scope}}"
        }
      },
      "headers": [
        {
          "name": "check",
          "value": "again",
          "enabled": true,
          "uid": "cB7WCdSqPvWDQOjJ82b0u"
        }
      ],
      "script": {
        "res": "// The script below sets the OAuth2 access token to a runtime variable.\n\n// When the 'Get Access Token' action is performed,\n// the request has 'auth_mode' set to 'oauth2'.\n\n// The 'if' condition below ensures that the 'set token' logic is not executed \n// during the normal request execution flow.\n\nif(req.getAuthMode() == 'oauth2' && res.body.access_token) {\n bru.setVar('access_token_set_by_collection_script', res.body.access_token);\n}"
      }
    },
    "docs": "# bruno-testbench 🐶\n\nThis is a test collection that I am using to test various functionalities around bruno"
  },
  "brunoConfig": {
    "version": "1",
    "name": "oauth2_client_credentials_request_level",
    "type": "collection",
    "scripts": {
      "moduleWhitelist": [
        "crypto"
      ],
      "filesystemAccess": {
        "allow": true
      }
    },
    "clientCertificates": {
      "enabled": true,
      "certs": []
    },
    "presets": {
      "requestType": "http"
    }
  }
}